
lab3.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003e70  08000188  08000188  00001188  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00006ef8  08003ff8  08003ff8  00004ff8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800aef0  0800aef0  0000c00c  2**0
                  CONTENTS
  4 .ARM          00000008  0800aef0  0800aef0  0000bef0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800aef8  0800aef8  0000c00c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800aef8  0800aef8  0000bef8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800aefc  0800aefc  0000befc  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         0000000c  20000000  0800af00  0000c000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0000c00c  2**0
                  CONTENTS
 10 .bss          00000148  2000000c  2000000c  0000c00c  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000154  20000154  0000c00c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0000c00c  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000ee99  00000000  00000000  0000c03c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002ba8  00000000  00000000  0001aed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000ef0  00000000  00000000  0001da80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 00000b53  00000000  00000000  0001e970  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0002263b  00000000  00000000  0001f4c3  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011c63  00000000  00000000  00041afe  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cdca1  00000000  00000000  00053761  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000043  00000000  00000000  00121402  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00003c5c  00000000  00000000  00121448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000066  00000000  00000000  001250a4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000188 <__do_global_dtors_aux>:
 8000188:	b510      	push	{r4, lr}
 800018a:	4c05      	ldr	r4, [pc, #20]	@ (80001a0 <__do_global_dtors_aux+0x18>)
 800018c:	7823      	ldrb	r3, [r4, #0]
 800018e:	b933      	cbnz	r3, 800019e <__do_global_dtors_aux+0x16>
 8000190:	4b04      	ldr	r3, [pc, #16]	@ (80001a4 <__do_global_dtors_aux+0x1c>)
 8000192:	b113      	cbz	r3, 800019a <__do_global_dtors_aux+0x12>
 8000194:	4804      	ldr	r0, [pc, #16]	@ (80001a8 <__do_global_dtors_aux+0x20>)
 8000196:	f3af 8000 	nop.w
 800019a:	2301      	movs	r3, #1
 800019c:	7023      	strb	r3, [r4, #0]
 800019e:	bd10      	pop	{r4, pc}
 80001a0:	2000000c 	.word	0x2000000c
 80001a4:	00000000 	.word	0x00000000
 80001a8:	08003fe0 	.word	0x08003fe0

080001ac <frame_dummy>:
 80001ac:	b508      	push	{r3, lr}
 80001ae:	4b03      	ldr	r3, [pc, #12]	@ (80001bc <frame_dummy+0x10>)
 80001b0:	b11b      	cbz	r3, 80001ba <frame_dummy+0xe>
 80001b2:	4903      	ldr	r1, [pc, #12]	@ (80001c0 <frame_dummy+0x14>)
 80001b4:	4803      	ldr	r0, [pc, #12]	@ (80001c4 <frame_dummy+0x18>)
 80001b6:	f3af 8000 	nop.w
 80001ba:	bd08      	pop	{r3, pc}
 80001bc:	00000000 	.word	0x00000000
 80001c0:	20000010 	.word	0x20000010
 80001c4:	08003fe0 	.word	0x08003fe0

080001c8 <strlen>:
 80001c8:	4603      	mov	r3, r0
 80001ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001ce:	2a00      	cmp	r2, #0
 80001d0:	d1fb      	bne.n	80001ca <strlen+0x2>
 80001d2:	1a18      	subs	r0, r3, r0
 80001d4:	3801      	subs	r0, #1
 80001d6:	4770      	bx	lr

080001d8 <__aeabi_uldivmod>:
 80001d8:	b953      	cbnz	r3, 80001f0 <__aeabi_uldivmod+0x18>
 80001da:	b94a      	cbnz	r2, 80001f0 <__aeabi_uldivmod+0x18>
 80001dc:	2900      	cmp	r1, #0
 80001de:	bf08      	it	eq
 80001e0:	2800      	cmpeq	r0, #0
 80001e2:	bf1c      	itt	ne
 80001e4:	f04f 31ff 	movne.w	r1, #4294967295	@ 0xffffffff
 80001e8:	f04f 30ff 	movne.w	r0, #4294967295	@ 0xffffffff
 80001ec:	f000 b96a 	b.w	80004c4 <__aeabi_idiv0>
 80001f0:	f1ad 0c08 	sub.w	ip, sp, #8
 80001f4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80001f8:	f000 f806 	bl	8000208 <__udivmoddi4>
 80001fc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000200:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000204:	b004      	add	sp, #16
 8000206:	4770      	bx	lr

08000208 <__udivmoddi4>:
 8000208:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800020c:	9d08      	ldr	r5, [sp, #32]
 800020e:	460c      	mov	r4, r1
 8000210:	2b00      	cmp	r3, #0
 8000212:	d14e      	bne.n	80002b2 <__udivmoddi4+0xaa>
 8000214:	4694      	mov	ip, r2
 8000216:	458c      	cmp	ip, r1
 8000218:	4686      	mov	lr, r0
 800021a:	fab2 f282 	clz	r2, r2
 800021e:	d962      	bls.n	80002e6 <__udivmoddi4+0xde>
 8000220:	b14a      	cbz	r2, 8000236 <__udivmoddi4+0x2e>
 8000222:	f1c2 0320 	rsb	r3, r2, #32
 8000226:	4091      	lsls	r1, r2
 8000228:	fa20 f303 	lsr.w	r3, r0, r3
 800022c:	fa0c fc02 	lsl.w	ip, ip, r2
 8000230:	4319      	orrs	r1, r3
 8000232:	fa00 fe02 	lsl.w	lr, r0, r2
 8000236:	ea4f 471c 	mov.w	r7, ip, lsr #16
 800023a:	fa1f f68c 	uxth.w	r6, ip
 800023e:	fbb1 f4f7 	udiv	r4, r1, r7
 8000242:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000246:	fb07 1114 	mls	r1, r7, r4, r1
 800024a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800024e:	fb04 f106 	mul.w	r1, r4, r6
 8000252:	4299      	cmp	r1, r3
 8000254:	d90a      	bls.n	800026c <__udivmoddi4+0x64>
 8000256:	eb1c 0303 	adds.w	r3, ip, r3
 800025a:	f104 30ff 	add.w	r0, r4, #4294967295	@ 0xffffffff
 800025e:	f080 8112 	bcs.w	8000486 <__udivmoddi4+0x27e>
 8000262:	4299      	cmp	r1, r3
 8000264:	f240 810f 	bls.w	8000486 <__udivmoddi4+0x27e>
 8000268:	3c02      	subs	r4, #2
 800026a:	4463      	add	r3, ip
 800026c:	1a59      	subs	r1, r3, r1
 800026e:	fa1f f38e 	uxth.w	r3, lr
 8000272:	fbb1 f0f7 	udiv	r0, r1, r7
 8000276:	fb07 1110 	mls	r1, r7, r0, r1
 800027a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800027e:	fb00 f606 	mul.w	r6, r0, r6
 8000282:	429e      	cmp	r6, r3
 8000284:	d90a      	bls.n	800029c <__udivmoddi4+0x94>
 8000286:	eb1c 0303 	adds.w	r3, ip, r3
 800028a:	f100 31ff 	add.w	r1, r0, #4294967295	@ 0xffffffff
 800028e:	f080 80fc 	bcs.w	800048a <__udivmoddi4+0x282>
 8000292:	429e      	cmp	r6, r3
 8000294:	f240 80f9 	bls.w	800048a <__udivmoddi4+0x282>
 8000298:	4463      	add	r3, ip
 800029a:	3802      	subs	r0, #2
 800029c:	1b9b      	subs	r3, r3, r6
 800029e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 80002a2:	2100      	movs	r1, #0
 80002a4:	b11d      	cbz	r5, 80002ae <__udivmoddi4+0xa6>
 80002a6:	40d3      	lsrs	r3, r2
 80002a8:	2200      	movs	r2, #0
 80002aa:	e9c5 3200 	strd	r3, r2, [r5]
 80002ae:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80002b2:	428b      	cmp	r3, r1
 80002b4:	d905      	bls.n	80002c2 <__udivmoddi4+0xba>
 80002b6:	b10d      	cbz	r5, 80002bc <__udivmoddi4+0xb4>
 80002b8:	e9c5 0100 	strd	r0, r1, [r5]
 80002bc:	2100      	movs	r1, #0
 80002be:	4608      	mov	r0, r1
 80002c0:	e7f5      	b.n	80002ae <__udivmoddi4+0xa6>
 80002c2:	fab3 f183 	clz	r1, r3
 80002c6:	2900      	cmp	r1, #0
 80002c8:	d146      	bne.n	8000358 <__udivmoddi4+0x150>
 80002ca:	42a3      	cmp	r3, r4
 80002cc:	d302      	bcc.n	80002d4 <__udivmoddi4+0xcc>
 80002ce:	4290      	cmp	r0, r2
 80002d0:	f0c0 80f0 	bcc.w	80004b4 <__udivmoddi4+0x2ac>
 80002d4:	1a86      	subs	r6, r0, r2
 80002d6:	eb64 0303 	sbc.w	r3, r4, r3
 80002da:	2001      	movs	r0, #1
 80002dc:	2d00      	cmp	r5, #0
 80002de:	d0e6      	beq.n	80002ae <__udivmoddi4+0xa6>
 80002e0:	e9c5 6300 	strd	r6, r3, [r5]
 80002e4:	e7e3      	b.n	80002ae <__udivmoddi4+0xa6>
 80002e6:	2a00      	cmp	r2, #0
 80002e8:	f040 8090 	bne.w	800040c <__udivmoddi4+0x204>
 80002ec:	eba1 040c 	sub.w	r4, r1, ip
 80002f0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80002f4:	fa1f f78c 	uxth.w	r7, ip
 80002f8:	2101      	movs	r1, #1
 80002fa:	fbb4 f6f8 	udiv	r6, r4, r8
 80002fe:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000302:	fb08 4416 	mls	r4, r8, r6, r4
 8000306:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 800030a:	fb07 f006 	mul.w	r0, r7, r6
 800030e:	4298      	cmp	r0, r3
 8000310:	d908      	bls.n	8000324 <__udivmoddi4+0x11c>
 8000312:	eb1c 0303 	adds.w	r3, ip, r3
 8000316:	f106 34ff 	add.w	r4, r6, #4294967295	@ 0xffffffff
 800031a:	d202      	bcs.n	8000322 <__udivmoddi4+0x11a>
 800031c:	4298      	cmp	r0, r3
 800031e:	f200 80cd 	bhi.w	80004bc <__udivmoddi4+0x2b4>
 8000322:	4626      	mov	r6, r4
 8000324:	1a1c      	subs	r4, r3, r0
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb4 f0f8 	udiv	r0, r4, r8
 800032e:	fb08 4410 	mls	r4, r8, r0, r4
 8000332:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000336:	fb00 f707 	mul.w	r7, r0, r7
 800033a:	429f      	cmp	r7, r3
 800033c:	d908      	bls.n	8000350 <__udivmoddi4+0x148>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 34ff 	add.w	r4, r0, #4294967295	@ 0xffffffff
 8000346:	d202      	bcs.n	800034e <__udivmoddi4+0x146>
 8000348:	429f      	cmp	r7, r3
 800034a:	f200 80b0 	bhi.w	80004ae <__udivmoddi4+0x2a6>
 800034e:	4620      	mov	r0, r4
 8000350:	1bdb      	subs	r3, r3, r7
 8000352:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000356:	e7a5      	b.n	80002a4 <__udivmoddi4+0x9c>
 8000358:	f1c1 0620 	rsb	r6, r1, #32
 800035c:	408b      	lsls	r3, r1
 800035e:	fa22 f706 	lsr.w	r7, r2, r6
 8000362:	431f      	orrs	r7, r3
 8000364:	fa20 fc06 	lsr.w	ip, r0, r6
 8000368:	fa04 f301 	lsl.w	r3, r4, r1
 800036c:	ea43 030c 	orr.w	r3, r3, ip
 8000370:	40f4      	lsrs	r4, r6
 8000372:	fa00 f801 	lsl.w	r8, r0, r1
 8000376:	0c38      	lsrs	r0, r7, #16
 8000378:	ea4f 4913 	mov.w	r9, r3, lsr #16
 800037c:	fbb4 fef0 	udiv	lr, r4, r0
 8000380:	fa1f fc87 	uxth.w	ip, r7
 8000384:	fb00 441e 	mls	r4, r0, lr, r4
 8000388:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800038c:	fb0e f90c 	mul.w	r9, lr, ip
 8000390:	45a1      	cmp	r9, r4
 8000392:	fa02 f201 	lsl.w	r2, r2, r1
 8000396:	d90a      	bls.n	80003ae <__udivmoddi4+0x1a6>
 8000398:	193c      	adds	r4, r7, r4
 800039a:	f10e 3aff 	add.w	sl, lr, #4294967295	@ 0xffffffff
 800039e:	f080 8084 	bcs.w	80004aa <__udivmoddi4+0x2a2>
 80003a2:	45a1      	cmp	r9, r4
 80003a4:	f240 8081 	bls.w	80004aa <__udivmoddi4+0x2a2>
 80003a8:	f1ae 0e02 	sub.w	lr, lr, #2
 80003ac:	443c      	add	r4, r7
 80003ae:	eba4 0409 	sub.w	r4, r4, r9
 80003b2:	fa1f f983 	uxth.w	r9, r3
 80003b6:	fbb4 f3f0 	udiv	r3, r4, r0
 80003ba:	fb00 4413 	mls	r4, r0, r3, r4
 80003be:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 80003c2:	fb03 fc0c 	mul.w	ip, r3, ip
 80003c6:	45a4      	cmp	ip, r4
 80003c8:	d907      	bls.n	80003da <__udivmoddi4+0x1d2>
 80003ca:	193c      	adds	r4, r7, r4
 80003cc:	f103 30ff 	add.w	r0, r3, #4294967295	@ 0xffffffff
 80003d0:	d267      	bcs.n	80004a2 <__udivmoddi4+0x29a>
 80003d2:	45a4      	cmp	ip, r4
 80003d4:	d965      	bls.n	80004a2 <__udivmoddi4+0x29a>
 80003d6:	3b02      	subs	r3, #2
 80003d8:	443c      	add	r4, r7
 80003da:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 80003de:	fba0 9302 	umull	r9, r3, r0, r2
 80003e2:	eba4 040c 	sub.w	r4, r4, ip
 80003e6:	429c      	cmp	r4, r3
 80003e8:	46ce      	mov	lr, r9
 80003ea:	469c      	mov	ip, r3
 80003ec:	d351      	bcc.n	8000492 <__udivmoddi4+0x28a>
 80003ee:	d04e      	beq.n	800048e <__udivmoddi4+0x286>
 80003f0:	b155      	cbz	r5, 8000408 <__udivmoddi4+0x200>
 80003f2:	ebb8 030e 	subs.w	r3, r8, lr
 80003f6:	eb64 040c 	sbc.w	r4, r4, ip
 80003fa:	fa04 f606 	lsl.w	r6, r4, r6
 80003fe:	40cb      	lsrs	r3, r1
 8000400:	431e      	orrs	r6, r3
 8000402:	40cc      	lsrs	r4, r1
 8000404:	e9c5 6400 	strd	r6, r4, [r5]
 8000408:	2100      	movs	r1, #0
 800040a:	e750      	b.n	80002ae <__udivmoddi4+0xa6>
 800040c:	f1c2 0320 	rsb	r3, r2, #32
 8000410:	fa20 f103 	lsr.w	r1, r0, r3
 8000414:	fa0c fc02 	lsl.w	ip, ip, r2
 8000418:	fa24 f303 	lsr.w	r3, r4, r3
 800041c:	4094      	lsls	r4, r2
 800041e:	430c      	orrs	r4, r1
 8000420:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000424:	fa00 fe02 	lsl.w	lr, r0, r2
 8000428:	fa1f f78c 	uxth.w	r7, ip
 800042c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000430:	fb08 3110 	mls	r1, r8, r0, r3
 8000434:	0c23      	lsrs	r3, r4, #16
 8000436:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 800043a:	fb00 f107 	mul.w	r1, r0, r7
 800043e:	4299      	cmp	r1, r3
 8000440:	d908      	bls.n	8000454 <__udivmoddi4+0x24c>
 8000442:	eb1c 0303 	adds.w	r3, ip, r3
 8000446:	f100 36ff 	add.w	r6, r0, #4294967295	@ 0xffffffff
 800044a:	d22c      	bcs.n	80004a6 <__udivmoddi4+0x29e>
 800044c:	4299      	cmp	r1, r3
 800044e:	d92a      	bls.n	80004a6 <__udivmoddi4+0x29e>
 8000450:	3802      	subs	r0, #2
 8000452:	4463      	add	r3, ip
 8000454:	1a5b      	subs	r3, r3, r1
 8000456:	b2a4      	uxth	r4, r4
 8000458:	fbb3 f1f8 	udiv	r1, r3, r8
 800045c:	fb08 3311 	mls	r3, r8, r1, r3
 8000460:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000464:	fb01 f307 	mul.w	r3, r1, r7
 8000468:	42a3      	cmp	r3, r4
 800046a:	d908      	bls.n	800047e <__udivmoddi4+0x276>
 800046c:	eb1c 0404 	adds.w	r4, ip, r4
 8000470:	f101 36ff 	add.w	r6, r1, #4294967295	@ 0xffffffff
 8000474:	d213      	bcs.n	800049e <__udivmoddi4+0x296>
 8000476:	42a3      	cmp	r3, r4
 8000478:	d911      	bls.n	800049e <__udivmoddi4+0x296>
 800047a:	3902      	subs	r1, #2
 800047c:	4464      	add	r4, ip
 800047e:	1ae4      	subs	r4, r4, r3
 8000480:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000484:	e739      	b.n	80002fa <__udivmoddi4+0xf2>
 8000486:	4604      	mov	r4, r0
 8000488:	e6f0      	b.n	800026c <__udivmoddi4+0x64>
 800048a:	4608      	mov	r0, r1
 800048c:	e706      	b.n	800029c <__udivmoddi4+0x94>
 800048e:	45c8      	cmp	r8, r9
 8000490:	d2ae      	bcs.n	80003f0 <__udivmoddi4+0x1e8>
 8000492:	ebb9 0e02 	subs.w	lr, r9, r2
 8000496:	eb63 0c07 	sbc.w	ip, r3, r7
 800049a:	3801      	subs	r0, #1
 800049c:	e7a8      	b.n	80003f0 <__udivmoddi4+0x1e8>
 800049e:	4631      	mov	r1, r6
 80004a0:	e7ed      	b.n	800047e <__udivmoddi4+0x276>
 80004a2:	4603      	mov	r3, r0
 80004a4:	e799      	b.n	80003da <__udivmoddi4+0x1d2>
 80004a6:	4630      	mov	r0, r6
 80004a8:	e7d4      	b.n	8000454 <__udivmoddi4+0x24c>
 80004aa:	46d6      	mov	lr, sl
 80004ac:	e77f      	b.n	80003ae <__udivmoddi4+0x1a6>
 80004ae:	4463      	add	r3, ip
 80004b0:	3802      	subs	r0, #2
 80004b2:	e74d      	b.n	8000350 <__udivmoddi4+0x148>
 80004b4:	4606      	mov	r6, r0
 80004b6:	4623      	mov	r3, r4
 80004b8:	4608      	mov	r0, r1
 80004ba:	e70f      	b.n	80002dc <__udivmoddi4+0xd4>
 80004bc:	3e02      	subs	r6, #2
 80004be:	4463      	add	r3, ip
 80004c0:	e730      	b.n	8000324 <__udivmoddi4+0x11c>
 80004c2:	bf00      	nop

080004c4 <__aeabi_idiv0>:
 80004c4:	4770      	bx	lr
 80004c6:	bf00      	nop

080004c8 <LCD_WR_REG>:

static void LCD_WR_DATA(uint16_t data);
static uint16_t LCD_RD_DATA(void);
static uint32_t mypow(uint8_t m, uint8_t n);

void LCD_WR_REG(uint16_t reg) {
 80004c8:	b480      	push	{r7}
 80004ca:	b083      	sub	sp, #12
 80004cc:	af00      	add	r7, sp, #0
 80004ce:	4603      	mov	r3, r0
 80004d0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_REG = reg;
 80004d2:	4a04      	ldr	r2, [pc, #16]	@ (80004e4 <LCD_WR_REG+0x1c>)
 80004d4:	88fb      	ldrh	r3, [r7, #6]
 80004d6:	8013      	strh	r3, [r2, #0]
}
 80004d8:	bf00      	nop
 80004da:	370c      	adds	r7, #12
 80004dc:	46bd      	mov	sp, r7
 80004de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80004e2:	4770      	bx	lr
 80004e4:	600ffffe 	.word	0x600ffffe

080004e8 <LCD_WR_DATA>:

void LCD_WR_DATA(uint16_t data) {
 80004e8:	b480      	push	{r7}
 80004ea:	b083      	sub	sp, #12
 80004ec:	af00      	add	r7, sp, #0
 80004ee:	4603      	mov	r3, r0
 80004f0:	80fb      	strh	r3, [r7, #6]
	LCD->LCD_RAM = data;
 80004f2:	4a04      	ldr	r2, [pc, #16]	@ (8000504 <LCD_WR_DATA+0x1c>)
 80004f4:	88fb      	ldrh	r3, [r7, #6]
 80004f6:	8053      	strh	r3, [r2, #2]
}
 80004f8:	bf00      	nop
 80004fa:	370c      	adds	r7, #12
 80004fc:	46bd      	mov	sp, r7
 80004fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000502:	4770      	bx	lr
 8000504:	600ffffe 	.word	0x600ffffe

08000508 <LCD_RD_DATA>:

uint16_t LCD_RD_DATA(void) {
 8000508:	b480      	push	{r7}
 800050a:	b083      	sub	sp, #12
 800050c:	af00      	add	r7, sp, #0
	__IO uint16_t ram;
	ram = LCD->LCD_RAM;
 800050e:	4b06      	ldr	r3, [pc, #24]	@ (8000528 <LCD_RD_DATA+0x20>)
 8000510:	885b      	ldrh	r3, [r3, #2]
 8000512:	b29b      	uxth	r3, r3
 8000514:	80fb      	strh	r3, [r7, #6]
	return ram;
 8000516:	88fb      	ldrh	r3, [r7, #6]
 8000518:	b29b      	uxth	r3, r3
}
 800051a:	4618      	mov	r0, r3
 800051c:	370c      	adds	r7, #12
 800051e:	46bd      	mov	sp, r7
 8000520:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000524:	4770      	bx	lr
 8000526:	bf00      	nop
 8000528:	600ffffe 	.word	0x600ffffe

0800052c <lcd_set_address>:


void lcd_set_address(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2) {
 800052c:	b590      	push	{r4, r7, lr}
 800052e:	b083      	sub	sp, #12
 8000530:	af00      	add	r7, sp, #0
 8000532:	4604      	mov	r4, r0
 8000534:	4608      	mov	r0, r1
 8000536:	4611      	mov	r1, r2
 8000538:	461a      	mov	r2, r3
 800053a:	4623      	mov	r3, r4
 800053c:	80fb      	strh	r3, [r7, #6]
 800053e:	4603      	mov	r3, r0
 8000540:	80bb      	strh	r3, [r7, #4]
 8000542:	460b      	mov	r3, r1
 8000544:	807b      	strh	r3, [r7, #2]
 8000546:	4613      	mov	r3, r2
 8000548:	803b      	strh	r3, [r7, #0]
	LCD_WR_REG(0x2a);
 800054a:	202a      	movs	r0, #42	@ 0x2a
 800054c:	f7ff ffbc 	bl	80004c8 <LCD_WR_REG>
	LCD_WR_DATA(x1 >> 8);
 8000550:	88fb      	ldrh	r3, [r7, #6]
 8000552:	0a1b      	lsrs	r3, r3, #8
 8000554:	b29b      	uxth	r3, r3
 8000556:	4618      	mov	r0, r3
 8000558:	f7ff ffc6 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(x1 & 0xff);
 800055c:	88fb      	ldrh	r3, [r7, #6]
 800055e:	b2db      	uxtb	r3, r3
 8000560:	b29b      	uxth	r3, r3
 8000562:	4618      	mov	r0, r3
 8000564:	f7ff ffc0 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(x2 >> 8);
 8000568:	887b      	ldrh	r3, [r7, #2]
 800056a:	0a1b      	lsrs	r3, r3, #8
 800056c:	b29b      	uxth	r3, r3
 800056e:	4618      	mov	r0, r3
 8000570:	f7ff ffba 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(x2 & 0xff);
 8000574:	887b      	ldrh	r3, [r7, #2]
 8000576:	b2db      	uxtb	r3, r3
 8000578:	b29b      	uxth	r3, r3
 800057a:	4618      	mov	r0, r3
 800057c:	f7ff ffb4 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_REG(0x2b);
 8000580:	202b      	movs	r0, #43	@ 0x2b
 8000582:	f7ff ffa1 	bl	80004c8 <LCD_WR_REG>
	LCD_WR_DATA(y1 >> 8);
 8000586:	88bb      	ldrh	r3, [r7, #4]
 8000588:	0a1b      	lsrs	r3, r3, #8
 800058a:	b29b      	uxth	r3, r3
 800058c:	4618      	mov	r0, r3
 800058e:	f7ff ffab 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(y1 & 0xff);
 8000592:	88bb      	ldrh	r3, [r7, #4]
 8000594:	b2db      	uxtb	r3, r3
 8000596:	b29b      	uxth	r3, r3
 8000598:	4618      	mov	r0, r3
 800059a:	f7ff ffa5 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(y2 >> 8);
 800059e:	883b      	ldrh	r3, [r7, #0]
 80005a0:	0a1b      	lsrs	r3, r3, #8
 80005a2:	b29b      	uxth	r3, r3
 80005a4:	4618      	mov	r0, r3
 80005a6:	f7ff ff9f 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(y2 & 0xff);
 80005aa:	883b      	ldrh	r3, [r7, #0]
 80005ac:	b2db      	uxtb	r3, r3
 80005ae:	b29b      	uxth	r3, r3
 80005b0:	4618      	mov	r0, r3
 80005b2:	f7ff ff99 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_REG(0x2c);
 80005b6:	202c      	movs	r0, #44	@ 0x2c
 80005b8:	f7ff ff86 	bl	80004c8 <LCD_WR_REG>
}
 80005bc:	bf00      	nop
 80005be:	370c      	adds	r7, #12
 80005c0:	46bd      	mov	sp, r7
 80005c2:	bd90      	pop	{r4, r7, pc}

080005c4 <lcd_fill>:
 * @param  yend	End row
 * @param  color Color to fill
 * @retval None
 */
void lcd_fill(uint16_t xsta, uint16_t ysta, uint16_t xend, uint16_t yend,
		uint16_t color) {
 80005c4:	b590      	push	{r4, r7, lr}
 80005c6:	b085      	sub	sp, #20
 80005c8:	af00      	add	r7, sp, #0
 80005ca:	4604      	mov	r4, r0
 80005cc:	4608      	mov	r0, r1
 80005ce:	4611      	mov	r1, r2
 80005d0:	461a      	mov	r2, r3
 80005d2:	4623      	mov	r3, r4
 80005d4:	80fb      	strh	r3, [r7, #6]
 80005d6:	4603      	mov	r3, r0
 80005d8:	80bb      	strh	r3, [r7, #4]
 80005da:	460b      	mov	r3, r1
 80005dc:	807b      	strh	r3, [r7, #2]
 80005de:	4613      	mov	r3, r2
 80005e0:	803b      	strh	r3, [r7, #0]
	uint16_t i, j;
	lcd_set_address(xsta, ysta, xend - 1, yend - 1);
 80005e2:	887b      	ldrh	r3, [r7, #2]
 80005e4:	3b01      	subs	r3, #1
 80005e6:	b29a      	uxth	r2, r3
 80005e8:	883b      	ldrh	r3, [r7, #0]
 80005ea:	3b01      	subs	r3, #1
 80005ec:	b29b      	uxth	r3, r3
 80005ee:	88b9      	ldrh	r1, [r7, #4]
 80005f0:	88f8      	ldrh	r0, [r7, #6]
 80005f2:	f7ff ff9b 	bl	800052c <lcd_set_address>
	for (i = ysta; i < yend; i++) {
 80005f6:	88bb      	ldrh	r3, [r7, #4]
 80005f8:	81fb      	strh	r3, [r7, #14]
 80005fa:	e010      	b.n	800061e <lcd_fill+0x5a>
		for (j = xsta; j < xend; j++) {
 80005fc:	88fb      	ldrh	r3, [r7, #6]
 80005fe:	81bb      	strh	r3, [r7, #12]
 8000600:	e006      	b.n	8000610 <lcd_fill+0x4c>
			LCD_WR_DATA(color);
 8000602:	8c3b      	ldrh	r3, [r7, #32]
 8000604:	4618      	mov	r0, r3
 8000606:	f7ff ff6f 	bl	80004e8 <LCD_WR_DATA>
		for (j = xsta; j < xend; j++) {
 800060a:	89bb      	ldrh	r3, [r7, #12]
 800060c:	3301      	adds	r3, #1
 800060e:	81bb      	strh	r3, [r7, #12]
 8000610:	89ba      	ldrh	r2, [r7, #12]
 8000612:	887b      	ldrh	r3, [r7, #2]
 8000614:	429a      	cmp	r2, r3
 8000616:	d3f4      	bcc.n	8000602 <lcd_fill+0x3e>
	for (i = ysta; i < yend; i++) {
 8000618:	89fb      	ldrh	r3, [r7, #14]
 800061a:	3301      	adds	r3, #1
 800061c:	81fb      	strh	r3, [r7, #14]
 800061e:	89fa      	ldrh	r2, [r7, #14]
 8000620:	883b      	ldrh	r3, [r7, #0]
 8000622:	429a      	cmp	r2, r3
 8000624:	d3ea      	bcc.n	80005fc <lcd_fill+0x38>
		}
	}
}
 8000626:	bf00      	nop
 8000628:	bf00      	nop
 800062a:	3714      	adds	r7, #20
 800062c:	46bd      	mov	sp, r7
 800062e:	bd90      	pop	{r4, r7, pc}

08000630 <lcd_draw_point>:
 * @param  x X coordinate
 * @param  y Y coordinate
 * @param  color Color to fill
 * @retval None
 */
void lcd_draw_point(uint16_t x, uint16_t y, uint16_t color) {
 8000630:	b580      	push	{r7, lr}
 8000632:	b082      	sub	sp, #8
 8000634:	af00      	add	r7, sp, #0
 8000636:	4603      	mov	r3, r0
 8000638:	80fb      	strh	r3, [r7, #6]
 800063a:	460b      	mov	r3, r1
 800063c:	80bb      	strh	r3, [r7, #4]
 800063e:	4613      	mov	r3, r2
 8000640:	807b      	strh	r3, [r7, #2]
	lcd_set_address(x, y, x, y);
 8000642:	88bb      	ldrh	r3, [r7, #4]
 8000644:	88fa      	ldrh	r2, [r7, #6]
 8000646:	88b9      	ldrh	r1, [r7, #4]
 8000648:	88f8      	ldrh	r0, [r7, #6]
 800064a:	f7ff ff6f 	bl	800052c <lcd_set_address>
	LCD_WR_DATA(color);
 800064e:	887b      	ldrh	r3, [r7, #2]
 8000650:	4618      	mov	r0, r3
 8000652:	f7ff ff49 	bl	80004e8 <LCD_WR_DATA>
}
 8000656:	bf00      	nop
 8000658:	3708      	adds	r7, #8
 800065a:	46bd      	mov	sp, r7
 800065c:	bd80      	pop	{r7, pc}

0800065e <lcd_draw_line>:
 * @param  y2 Y coordinate of end point
 * @param  color Color to fill
 * @retval None
 */
void lcd_draw_line(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,
		uint16_t color) {
 800065e:	b590      	push	{r4, r7, lr}
 8000660:	b08d      	sub	sp, #52	@ 0x34
 8000662:	af00      	add	r7, sp, #0
 8000664:	4604      	mov	r4, r0
 8000666:	4608      	mov	r0, r1
 8000668:	4611      	mov	r1, r2
 800066a:	461a      	mov	r2, r3
 800066c:	4623      	mov	r3, r4
 800066e:	80fb      	strh	r3, [r7, #6]
 8000670:	4603      	mov	r3, r0
 8000672:	80bb      	strh	r3, [r7, #4]
 8000674:	460b      	mov	r3, r1
 8000676:	807b      	strh	r3, [r7, #2]
 8000678:	4613      	mov	r3, r2
 800067a:	803b      	strh	r3, [r7, #0]
	uint16_t t;
	int xerr = 0, yerr = 0, delta_x, delta_y, distance;
 800067c:	2300      	movs	r3, #0
 800067e:	62bb      	str	r3, [r7, #40]	@ 0x28
 8000680:	2300      	movs	r3, #0
 8000682:	627b      	str	r3, [r7, #36]	@ 0x24
	int incx, incy, uRow, uCol;
	delta_x = x2 - x1;
 8000684:	887a      	ldrh	r2, [r7, #2]
 8000686:	88fb      	ldrh	r3, [r7, #6]
 8000688:	1ad3      	subs	r3, r2, r3
 800068a:	623b      	str	r3, [r7, #32]
	delta_y = y2 - y1;
 800068c:	883a      	ldrh	r2, [r7, #0]
 800068e:	88bb      	ldrh	r3, [r7, #4]
 8000690:	1ad3      	subs	r3, r2, r3
 8000692:	61fb      	str	r3, [r7, #28]
	uRow = x1;
 8000694:	88fb      	ldrh	r3, [r7, #6]
 8000696:	60fb      	str	r3, [r7, #12]
	uCol = y1;
 8000698:	88bb      	ldrh	r3, [r7, #4]
 800069a:	60bb      	str	r3, [r7, #8]
	if (delta_x > 0)
 800069c:	6a3b      	ldr	r3, [r7, #32]
 800069e:	2b00      	cmp	r3, #0
 80006a0:	dd02      	ble.n	80006a8 <lcd_draw_line+0x4a>
		incx = 1;
 80006a2:	2301      	movs	r3, #1
 80006a4:	617b      	str	r3, [r7, #20]
 80006a6:	e00b      	b.n	80006c0 <lcd_draw_line+0x62>
	else if (delta_x == 0)
 80006a8:	6a3b      	ldr	r3, [r7, #32]
 80006aa:	2b00      	cmp	r3, #0
 80006ac:	d102      	bne.n	80006b4 <lcd_draw_line+0x56>
		incx = 0;
 80006ae:	2300      	movs	r3, #0
 80006b0:	617b      	str	r3, [r7, #20]
 80006b2:	e005      	b.n	80006c0 <lcd_draw_line+0x62>
	else {
		incx = -1;
 80006b4:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006b8:	617b      	str	r3, [r7, #20]
		delta_x = -delta_x;
 80006ba:	6a3b      	ldr	r3, [r7, #32]
 80006bc:	425b      	negs	r3, r3
 80006be:	623b      	str	r3, [r7, #32]
	}
	if (delta_y > 0)
 80006c0:	69fb      	ldr	r3, [r7, #28]
 80006c2:	2b00      	cmp	r3, #0
 80006c4:	dd02      	ble.n	80006cc <lcd_draw_line+0x6e>
		incy = 1;
 80006c6:	2301      	movs	r3, #1
 80006c8:	613b      	str	r3, [r7, #16]
 80006ca:	e00b      	b.n	80006e4 <lcd_draw_line+0x86>
	else if (delta_y == 0)
 80006cc:	69fb      	ldr	r3, [r7, #28]
 80006ce:	2b00      	cmp	r3, #0
 80006d0:	d102      	bne.n	80006d8 <lcd_draw_line+0x7a>
		incy = 0;
 80006d2:	2300      	movs	r3, #0
 80006d4:	613b      	str	r3, [r7, #16]
 80006d6:	e005      	b.n	80006e4 <lcd_draw_line+0x86>
	else {
		incy = -1;
 80006d8:	f04f 33ff 	mov.w	r3, #4294967295	@ 0xffffffff
 80006dc:	613b      	str	r3, [r7, #16]
		delta_y = -delta_y;
 80006de:	69fb      	ldr	r3, [r7, #28]
 80006e0:	425b      	negs	r3, r3
 80006e2:	61fb      	str	r3, [r7, #28]
	}
	if (delta_x > delta_y)
 80006e4:	6a3a      	ldr	r2, [r7, #32]
 80006e6:	69fb      	ldr	r3, [r7, #28]
 80006e8:	429a      	cmp	r2, r3
 80006ea:	dd02      	ble.n	80006f2 <lcd_draw_line+0x94>
		distance = delta_x;
 80006ec:	6a3b      	ldr	r3, [r7, #32]
 80006ee:	61bb      	str	r3, [r7, #24]
 80006f0:	e001      	b.n	80006f6 <lcd_draw_line+0x98>
	else
		distance = delta_y;
 80006f2:	69fb      	ldr	r3, [r7, #28]
 80006f4:	61bb      	str	r3, [r7, #24]
	for (t = 0; t < distance + 1; t++) {
 80006f6:	2300      	movs	r3, #0
 80006f8:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 80006fa:	e02b      	b.n	8000754 <lcd_draw_line+0xf6>
		lcd_draw_point(uRow, uCol, color);
 80006fc:	68fb      	ldr	r3, [r7, #12]
 80006fe:	b29b      	uxth	r3, r3
 8000700:	68ba      	ldr	r2, [r7, #8]
 8000702:	b291      	uxth	r1, r2
 8000704:	f8b7 2040 	ldrh.w	r2, [r7, #64]	@ 0x40
 8000708:	4618      	mov	r0, r3
 800070a:	f7ff ff91 	bl	8000630 <lcd_draw_point>
		xerr += delta_x;
 800070e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000710:	6a3b      	ldr	r3, [r7, #32]
 8000712:	4413      	add	r3, r2
 8000714:	62bb      	str	r3, [r7, #40]	@ 0x28
		yerr += delta_y;
 8000716:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000718:	69fb      	ldr	r3, [r7, #28]
 800071a:	4413      	add	r3, r2
 800071c:	627b      	str	r3, [r7, #36]	@ 0x24
		if (xerr > distance) {
 800071e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000720:	69bb      	ldr	r3, [r7, #24]
 8000722:	429a      	cmp	r2, r3
 8000724:	dd07      	ble.n	8000736 <lcd_draw_line+0xd8>
			xerr -= distance;
 8000726:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000728:	69bb      	ldr	r3, [r7, #24]
 800072a:	1ad3      	subs	r3, r2, r3
 800072c:	62bb      	str	r3, [r7, #40]	@ 0x28
			uRow += incx;
 800072e:	68fa      	ldr	r2, [r7, #12]
 8000730:	697b      	ldr	r3, [r7, #20]
 8000732:	4413      	add	r3, r2
 8000734:	60fb      	str	r3, [r7, #12]
		}
		if (yerr > distance) {
 8000736:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000738:	69bb      	ldr	r3, [r7, #24]
 800073a:	429a      	cmp	r2, r3
 800073c:	dd07      	ble.n	800074e <lcd_draw_line+0xf0>
			yerr -= distance;
 800073e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8000740:	69bb      	ldr	r3, [r7, #24]
 8000742:	1ad3      	subs	r3, r2, r3
 8000744:	627b      	str	r3, [r7, #36]	@ 0x24
			uCol += incy;
 8000746:	68ba      	ldr	r2, [r7, #8]
 8000748:	693b      	ldr	r3, [r7, #16]
 800074a:	4413      	add	r3, r2
 800074c:	60bb      	str	r3, [r7, #8]
	for (t = 0; t < distance + 1; t++) {
 800074e:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000750:	3301      	adds	r3, #1
 8000752:	85fb      	strh	r3, [r7, #46]	@ 0x2e
 8000754:	8dfb      	ldrh	r3, [r7, #46]	@ 0x2e
 8000756:	69ba      	ldr	r2, [r7, #24]
 8000758:	429a      	cmp	r2, r3
 800075a:	dacf      	bge.n	80006fc <lcd_draw_line+0x9e>
		}
	}
}
 800075c:	bf00      	nop
 800075e:	bf00      	nop
 8000760:	3734      	adds	r7, #52	@ 0x34
 8000762:	46bd      	mov	sp, r7
 8000764:	bd90      	pop	{r4, r7, pc}

08000766 <lcd_draw_rectangle>:

void lcd_draw_rectangle(uint16_t x1, uint16_t y1, uint16_t x2, uint16_t y2,
		uint16_t color) {
 8000766:	b590      	push	{r4, r7, lr}
 8000768:	b085      	sub	sp, #20
 800076a:	af02      	add	r7, sp, #8
 800076c:	4604      	mov	r4, r0
 800076e:	4608      	mov	r0, r1
 8000770:	4611      	mov	r1, r2
 8000772:	461a      	mov	r2, r3
 8000774:	4623      	mov	r3, r4
 8000776:	80fb      	strh	r3, [r7, #6]
 8000778:	4603      	mov	r3, r0
 800077a:	80bb      	strh	r3, [r7, #4]
 800077c:	460b      	mov	r3, r1
 800077e:	807b      	strh	r3, [r7, #2]
 8000780:	4613      	mov	r3, r2
 8000782:	803b      	strh	r3, [r7, #0]
	lcd_draw_line(x1, y1, x2, y1, color);
 8000784:	88bc      	ldrh	r4, [r7, #4]
 8000786:	887a      	ldrh	r2, [r7, #2]
 8000788:	88b9      	ldrh	r1, [r7, #4]
 800078a:	88f8      	ldrh	r0, [r7, #6]
 800078c:	8b3b      	ldrh	r3, [r7, #24]
 800078e:	9300      	str	r3, [sp, #0]
 8000790:	4623      	mov	r3, r4
 8000792:	f7ff ff64 	bl	800065e <lcd_draw_line>
	lcd_draw_line(x1, y1, x1, y2, color);
 8000796:	883c      	ldrh	r4, [r7, #0]
 8000798:	88fa      	ldrh	r2, [r7, #6]
 800079a:	88b9      	ldrh	r1, [r7, #4]
 800079c:	88f8      	ldrh	r0, [r7, #6]
 800079e:	8b3b      	ldrh	r3, [r7, #24]
 80007a0:	9300      	str	r3, [sp, #0]
 80007a2:	4623      	mov	r3, r4
 80007a4:	f7ff ff5b 	bl	800065e <lcd_draw_line>
	lcd_draw_line(x1, y2, x2, y2, color);
 80007a8:	883c      	ldrh	r4, [r7, #0]
 80007aa:	887a      	ldrh	r2, [r7, #2]
 80007ac:	8839      	ldrh	r1, [r7, #0]
 80007ae:	88f8      	ldrh	r0, [r7, #6]
 80007b0:	8b3b      	ldrh	r3, [r7, #24]
 80007b2:	9300      	str	r3, [sp, #0]
 80007b4:	4623      	mov	r3, r4
 80007b6:	f7ff ff52 	bl	800065e <lcd_draw_line>
	lcd_draw_line(x2, y1, x2, y2, color);
 80007ba:	883c      	ldrh	r4, [r7, #0]
 80007bc:	887a      	ldrh	r2, [r7, #2]
 80007be:	88b9      	ldrh	r1, [r7, #4]
 80007c0:	8878      	ldrh	r0, [r7, #2]
 80007c2:	8b3b      	ldrh	r3, [r7, #24]
 80007c4:	9300      	str	r3, [sp, #0]
 80007c6:	4623      	mov	r3, r4
 80007c8:	f7ff ff49 	bl	800065e <lcd_draw_line>
}
 80007cc:	bf00      	nop
 80007ce:	370c      	adds	r7, #12
 80007d0:	46bd      	mov	sp, r7
 80007d2:	bd90      	pop	{r4, r7, pc}

080007d4 <lcd_show_char>:

void lcd_show_char(uint16_t x, uint16_t y, uint8_t character, uint16_t fc,
		uint16_t bc, uint8_t sizey, uint8_t mode) {
 80007d4:	b590      	push	{r4, r7, lr}
 80007d6:	b087      	sub	sp, #28
 80007d8:	af00      	add	r7, sp, #0
 80007da:	4604      	mov	r4, r0
 80007dc:	4608      	mov	r0, r1
 80007de:	4611      	mov	r1, r2
 80007e0:	461a      	mov	r2, r3
 80007e2:	4623      	mov	r3, r4
 80007e4:	80fb      	strh	r3, [r7, #6]
 80007e6:	4603      	mov	r3, r0
 80007e8:	80bb      	strh	r3, [r7, #4]
 80007ea:	460b      	mov	r3, r1
 80007ec:	70fb      	strb	r3, [r7, #3]
 80007ee:	4613      	mov	r3, r2
 80007f0:	803b      	strh	r3, [r7, #0]
	uint8_t temp, sizex, t, m = 0;
 80007f2:	2300      	movs	r3, #0
 80007f4:	757b      	strb	r3, [r7, #21]
	uint16_t i, TypefaceNum;
	uint16_t x0 = x;
 80007f6:	88fb      	ldrh	r3, [r7, #6]
 80007f8:	823b      	strh	r3, [r7, #16]
	sizex = sizey / 2;
 80007fa:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80007fe:	085b      	lsrs	r3, r3, #1
 8000800:	73fb      	strb	r3, [r7, #15]
	TypefaceNum = (sizex / 8 + ((sizex % 8) ? 1 : 0)) * sizey;
 8000802:	7bfb      	ldrb	r3, [r7, #15]
 8000804:	08db      	lsrs	r3, r3, #3
 8000806:	b2db      	uxtb	r3, r3
 8000808:	461a      	mov	r2, r3
 800080a:	7bfb      	ldrb	r3, [r7, #15]
 800080c:	f003 0307 	and.w	r3, r3, #7
 8000810:	b2db      	uxtb	r3, r3
 8000812:	2b00      	cmp	r3, #0
 8000814:	bf14      	ite	ne
 8000816:	2301      	movne	r3, #1
 8000818:	2300      	moveq	r3, #0
 800081a:	b2db      	uxtb	r3, r3
 800081c:	4413      	add	r3, r2
 800081e:	b29a      	uxth	r2, r3
 8000820:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000824:	b29b      	uxth	r3, r3
 8000826:	fb12 f303 	smulbb	r3, r2, r3
 800082a:	81bb      	strh	r3, [r7, #12]
	character = character - ' ';
 800082c:	78fb      	ldrb	r3, [r7, #3]
 800082e:	3b20      	subs	r3, #32
 8000830:	70fb      	strb	r3, [r7, #3]
	lcd_set_address(x, y, x + sizex - 1, y + sizey - 1);
 8000832:	7bfb      	ldrb	r3, [r7, #15]
 8000834:	b29a      	uxth	r2, r3
 8000836:	88fb      	ldrh	r3, [r7, #6]
 8000838:	4413      	add	r3, r2
 800083a:	b29b      	uxth	r3, r3
 800083c:	3b01      	subs	r3, #1
 800083e:	b29c      	uxth	r4, r3
 8000840:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000844:	b29a      	uxth	r2, r3
 8000846:	88bb      	ldrh	r3, [r7, #4]
 8000848:	4413      	add	r3, r2
 800084a:	b29b      	uxth	r3, r3
 800084c:	3b01      	subs	r3, #1
 800084e:	b29b      	uxth	r3, r3
 8000850:	88b9      	ldrh	r1, [r7, #4]
 8000852:	88f8      	ldrh	r0, [r7, #6]
 8000854:	4622      	mov	r2, r4
 8000856:	f7ff fe69 	bl	800052c <lcd_set_address>
	for (i = 0; i < TypefaceNum; i++) {
 800085a:	2300      	movs	r3, #0
 800085c:	827b      	strh	r3, [r7, #18]
 800085e:	e07a      	b.n	8000956 <lcd_show_char+0x182>
		if (sizey == 12)
 8000860:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000864:	2b0c      	cmp	r3, #12
 8000866:	d028      	beq.n	80008ba <lcd_show_char+0xe6>
			;
		else if (sizey == 16)
 8000868:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800086c:	2b10      	cmp	r3, #16
 800086e:	d108      	bne.n	8000882 <lcd_show_char+0xae>
			temp = ascii_1608[character][i];
 8000870:	78fa      	ldrb	r2, [r7, #3]
 8000872:	8a7b      	ldrh	r3, [r7, #18]
 8000874:	493c      	ldr	r1, [pc, #240]	@ (8000968 <lcd_show_char+0x194>)
 8000876:	0112      	lsls	r2, r2, #4
 8000878:	440a      	add	r2, r1
 800087a:	4413      	add	r3, r2
 800087c:	781b      	ldrb	r3, [r3, #0]
 800087e:	75fb      	strb	r3, [r7, #23]
 8000880:	e01b      	b.n	80008ba <lcd_show_char+0xe6>
		else if (sizey == 24)
 8000882:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8000886:	2b18      	cmp	r3, #24
 8000888:	d10b      	bne.n	80008a2 <lcd_show_char+0xce>
			temp = ascii_2412[character][i];
 800088a:	78fa      	ldrb	r2, [r7, #3]
 800088c:	8a79      	ldrh	r1, [r7, #18]
 800088e:	4837      	ldr	r0, [pc, #220]	@ (800096c <lcd_show_char+0x198>)
 8000890:	4613      	mov	r3, r2
 8000892:	005b      	lsls	r3, r3, #1
 8000894:	4413      	add	r3, r2
 8000896:	011b      	lsls	r3, r3, #4
 8000898:	4403      	add	r3, r0
 800089a:	440b      	add	r3, r1
 800089c:	781b      	ldrb	r3, [r3, #0]
 800089e:	75fb      	strb	r3, [r7, #23]
 80008a0:	e00b      	b.n	80008ba <lcd_show_char+0xe6>
		else if (sizey == 32)
 80008a2:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80008a6:	2b20      	cmp	r3, #32
 80008a8:	d15a      	bne.n	8000960 <lcd_show_char+0x18c>
			temp = ascii_3216[character][i];
 80008aa:	78fa      	ldrb	r2, [r7, #3]
 80008ac:	8a7b      	ldrh	r3, [r7, #18]
 80008ae:	4930      	ldr	r1, [pc, #192]	@ (8000970 <lcd_show_char+0x19c>)
 80008b0:	0192      	lsls	r2, r2, #6
 80008b2:	440a      	add	r2, r1
 80008b4:	4413      	add	r3, r2
 80008b6:	781b      	ldrb	r3, [r3, #0]
 80008b8:	75fb      	strb	r3, [r7, #23]
		else
			return;
		for (t = 0; t < 8; t++) {
 80008ba:	2300      	movs	r3, #0
 80008bc:	75bb      	strb	r3, [r7, #22]
 80008be:	e044      	b.n	800094a <lcd_show_char+0x176>
			if (!mode) {
 80008c0:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80008c4:	2b00      	cmp	r3, #0
 80008c6:	d120      	bne.n	800090a <lcd_show_char+0x136>
				if (temp & (0x01 << t))
 80008c8:	7dfa      	ldrb	r2, [r7, #23]
 80008ca:	7dbb      	ldrb	r3, [r7, #22]
 80008cc:	fa42 f303 	asr.w	r3, r2, r3
 80008d0:	f003 0301 	and.w	r3, r3, #1
 80008d4:	2b00      	cmp	r3, #0
 80008d6:	d004      	beq.n	80008e2 <lcd_show_char+0x10e>
					LCD_WR_DATA(fc);
 80008d8:	883b      	ldrh	r3, [r7, #0]
 80008da:	4618      	mov	r0, r3
 80008dc:	f7ff fe04 	bl	80004e8 <LCD_WR_DATA>
 80008e0:	e003      	b.n	80008ea <lcd_show_char+0x116>
				else
					LCD_WR_DATA(bc);
 80008e2:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80008e4:	4618      	mov	r0, r3
 80008e6:	f7ff fdff 	bl	80004e8 <LCD_WR_DATA>
				m++;
 80008ea:	7d7b      	ldrb	r3, [r7, #21]
 80008ec:	3301      	adds	r3, #1
 80008ee:	757b      	strb	r3, [r7, #21]
				if (m % sizex == 0) {
 80008f0:	7d7b      	ldrb	r3, [r7, #21]
 80008f2:	7bfa      	ldrb	r2, [r7, #15]
 80008f4:	fbb3 f1f2 	udiv	r1, r3, r2
 80008f8:	fb01 f202 	mul.w	r2, r1, r2
 80008fc:	1a9b      	subs	r3, r3, r2
 80008fe:	b2db      	uxtb	r3, r3
 8000900:	2b00      	cmp	r3, #0
 8000902:	d11f      	bne.n	8000944 <lcd_show_char+0x170>
					m = 0;
 8000904:	2300      	movs	r3, #0
 8000906:	757b      	strb	r3, [r7, #21]
					break;
 8000908:	e022      	b.n	8000950 <lcd_show_char+0x17c>
				}
			} else {
				if (temp & (0x01 << t))
 800090a:	7dfa      	ldrb	r2, [r7, #23]
 800090c:	7dbb      	ldrb	r3, [r7, #22]
 800090e:	fa42 f303 	asr.w	r3, r2, r3
 8000912:	f003 0301 	and.w	r3, r3, #1
 8000916:	2b00      	cmp	r3, #0
 8000918:	d005      	beq.n	8000926 <lcd_show_char+0x152>
					lcd_draw_point(x, y, fc);
 800091a:	883a      	ldrh	r2, [r7, #0]
 800091c:	88b9      	ldrh	r1, [r7, #4]
 800091e:	88fb      	ldrh	r3, [r7, #6]
 8000920:	4618      	mov	r0, r3
 8000922:	f7ff fe85 	bl	8000630 <lcd_draw_point>
				x++;
 8000926:	88fb      	ldrh	r3, [r7, #6]
 8000928:	3301      	adds	r3, #1
 800092a:	80fb      	strh	r3, [r7, #6]
				if ((x - x0) == sizex) {
 800092c:	88fa      	ldrh	r2, [r7, #6]
 800092e:	8a3b      	ldrh	r3, [r7, #16]
 8000930:	1ad2      	subs	r2, r2, r3
 8000932:	7bfb      	ldrb	r3, [r7, #15]
 8000934:	429a      	cmp	r2, r3
 8000936:	d105      	bne.n	8000944 <lcd_show_char+0x170>
					x = x0;
 8000938:	8a3b      	ldrh	r3, [r7, #16]
 800093a:	80fb      	strh	r3, [r7, #6]
					y++;
 800093c:	88bb      	ldrh	r3, [r7, #4]
 800093e:	3301      	adds	r3, #1
 8000940:	80bb      	strh	r3, [r7, #4]
					break;
 8000942:	e005      	b.n	8000950 <lcd_show_char+0x17c>
		for (t = 0; t < 8; t++) {
 8000944:	7dbb      	ldrb	r3, [r7, #22]
 8000946:	3301      	adds	r3, #1
 8000948:	75bb      	strb	r3, [r7, #22]
 800094a:	7dbb      	ldrb	r3, [r7, #22]
 800094c:	2b07      	cmp	r3, #7
 800094e:	d9b7      	bls.n	80008c0 <lcd_show_char+0xec>
	for (i = 0; i < TypefaceNum; i++) {
 8000950:	8a7b      	ldrh	r3, [r7, #18]
 8000952:	3301      	adds	r3, #1
 8000954:	827b      	strh	r3, [r7, #18]
 8000956:	8a7a      	ldrh	r2, [r7, #18]
 8000958:	89bb      	ldrh	r3, [r7, #12]
 800095a:	429a      	cmp	r2, r3
 800095c:	d380      	bcc.n	8000860 <lcd_show_char+0x8c>
 800095e:	e000      	b.n	8000962 <lcd_show_char+0x18e>
			return;
 8000960:	bf00      	nop
				}
			}
		}
	}
}
 8000962:	371c      	adds	r7, #28
 8000964:	46bd      	mov	sp, r7
 8000966:	bd90      	pop	{r4, r7, pc}
 8000968:	08004018 	.word	0x08004018
 800096c:	08004608 	.word	0x08004608
 8000970:	080057d8 	.word	0x080057d8

08000974 <mypow>:

uint32_t mypow(uint8_t m, uint8_t n) {
 8000974:	b480      	push	{r7}
 8000976:	b085      	sub	sp, #20
 8000978:	af00      	add	r7, sp, #0
 800097a:	4603      	mov	r3, r0
 800097c:	460a      	mov	r2, r1
 800097e:	71fb      	strb	r3, [r7, #7]
 8000980:	4613      	mov	r3, r2
 8000982:	71bb      	strb	r3, [r7, #6]
	uint32_t result = 1;
 8000984:	2301      	movs	r3, #1
 8000986:	60fb      	str	r3, [r7, #12]
	while (n--)
 8000988:	e004      	b.n	8000994 <mypow+0x20>
		result *= m;
 800098a:	79fa      	ldrb	r2, [r7, #7]
 800098c:	68fb      	ldr	r3, [r7, #12]
 800098e:	fb02 f303 	mul.w	r3, r2, r3
 8000992:	60fb      	str	r3, [r7, #12]
	while (n--)
 8000994:	79bb      	ldrb	r3, [r7, #6]
 8000996:	1e5a      	subs	r2, r3, #1
 8000998:	71ba      	strb	r2, [r7, #6]
 800099a:	2b00      	cmp	r3, #0
 800099c:	d1f5      	bne.n	800098a <mypow+0x16>
	return result;
 800099e:	68fb      	ldr	r3, [r7, #12]
}
 80009a0:	4618      	mov	r0, r3
 80009a2:	3714      	adds	r7, #20
 80009a4:	46bd      	mov	sp, r7
 80009a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009aa:	4770      	bx	lr

080009ac <lcd_show_int_num>:

void lcd_show_int_num(uint16_t x, uint16_t y, uint16_t num, uint8_t len,
		uint16_t fc, uint16_t bc, uint8_t sizey) {
 80009ac:	b590      	push	{r4, r7, lr}
 80009ae:	b089      	sub	sp, #36	@ 0x24
 80009b0:	af04      	add	r7, sp, #16
 80009b2:	4604      	mov	r4, r0
 80009b4:	4608      	mov	r0, r1
 80009b6:	4611      	mov	r1, r2
 80009b8:	461a      	mov	r2, r3
 80009ba:	4623      	mov	r3, r4
 80009bc:	80fb      	strh	r3, [r7, #6]
 80009be:	4603      	mov	r3, r0
 80009c0:	80bb      	strh	r3, [r7, #4]
 80009c2:	460b      	mov	r3, r1
 80009c4:	807b      	strh	r3, [r7, #2]
 80009c6:	4613      	mov	r3, r2
 80009c8:	707b      	strb	r3, [r7, #1]
	uint8_t t, temp;
	uint8_t enshow = 0;
 80009ca:	2300      	movs	r3, #0
 80009cc:	73bb      	strb	r3, [r7, #14]
	uint8_t sizex = sizey / 2;
 80009ce:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 80009d2:	085b      	lsrs	r3, r3, #1
 80009d4:	737b      	strb	r3, [r7, #13]
	for (t = 0; t < len; t++) {
 80009d6:	2300      	movs	r3, #0
 80009d8:	73fb      	strb	r3, [r7, #15]
 80009da:	e059      	b.n	8000a90 <lcd_show_int_num+0xe4>
		temp = (num / mypow(10, len - t - 1)) % 10;
 80009dc:	887c      	ldrh	r4, [r7, #2]
 80009de:	787a      	ldrb	r2, [r7, #1]
 80009e0:	7bfb      	ldrb	r3, [r7, #15]
 80009e2:	1ad3      	subs	r3, r2, r3
 80009e4:	b2db      	uxtb	r3, r3
 80009e6:	3b01      	subs	r3, #1
 80009e8:	b2db      	uxtb	r3, r3
 80009ea:	4619      	mov	r1, r3
 80009ec:	200a      	movs	r0, #10
 80009ee:	f7ff ffc1 	bl	8000974 <mypow>
 80009f2:	4603      	mov	r3, r0
 80009f4:	fbb4 f1f3 	udiv	r1, r4, r3
 80009f8:	4b2a      	ldr	r3, [pc, #168]	@ (8000aa4 <lcd_show_int_num+0xf8>)
 80009fa:	fba3 2301 	umull	r2, r3, r3, r1
 80009fe:	08da      	lsrs	r2, r3, #3
 8000a00:	4613      	mov	r3, r2
 8000a02:	009b      	lsls	r3, r3, #2
 8000a04:	4413      	add	r3, r2
 8000a06:	005b      	lsls	r3, r3, #1
 8000a08:	1aca      	subs	r2, r1, r3
 8000a0a:	4613      	mov	r3, r2
 8000a0c:	733b      	strb	r3, [r7, #12]
		if (enshow == 0 && t < (len - 1)) {
 8000a0e:	7bbb      	ldrb	r3, [r7, #14]
 8000a10:	2b00      	cmp	r3, #0
 8000a12:	d121      	bne.n	8000a58 <lcd_show_int_num+0xac>
 8000a14:	7bfa      	ldrb	r2, [r7, #15]
 8000a16:	787b      	ldrb	r3, [r7, #1]
 8000a18:	3b01      	subs	r3, #1
 8000a1a:	429a      	cmp	r2, r3
 8000a1c:	da1c      	bge.n	8000a58 <lcd_show_int_num+0xac>
			if (temp == 0) {
 8000a1e:	7b3b      	ldrb	r3, [r7, #12]
 8000a20:	2b00      	cmp	r3, #0
 8000a22:	d117      	bne.n	8000a54 <lcd_show_int_num+0xa8>
				lcd_show_char(x + t * sizex, y, ' ', fc, bc, sizey, 0);
 8000a24:	7bfb      	ldrb	r3, [r7, #15]
 8000a26:	b29a      	uxth	r2, r3
 8000a28:	7b7b      	ldrb	r3, [r7, #13]
 8000a2a:	b29b      	uxth	r3, r3
 8000a2c:	fb12 f303 	smulbb	r3, r2, r3
 8000a30:	b29a      	uxth	r2, r3
 8000a32:	88fb      	ldrh	r3, [r7, #6]
 8000a34:	4413      	add	r3, r2
 8000a36:	b298      	uxth	r0, r3
 8000a38:	8c3a      	ldrh	r2, [r7, #32]
 8000a3a:	88b9      	ldrh	r1, [r7, #4]
 8000a3c:	2300      	movs	r3, #0
 8000a3e:	9302      	str	r3, [sp, #8]
 8000a40:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000a44:	9301      	str	r3, [sp, #4]
 8000a46:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000a48:	9300      	str	r3, [sp, #0]
 8000a4a:	4613      	mov	r3, r2
 8000a4c:	2220      	movs	r2, #32
 8000a4e:	f7ff fec1 	bl	80007d4 <lcd_show_char>
				continue;
 8000a52:	e01a      	b.n	8000a8a <lcd_show_int_num+0xde>
			} else
				enshow = 1;
 8000a54:	2301      	movs	r3, #1
 8000a56:	73bb      	strb	r3, [r7, #14]

		}
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
 8000a58:	7bfb      	ldrb	r3, [r7, #15]
 8000a5a:	b29a      	uxth	r2, r3
 8000a5c:	7b7b      	ldrb	r3, [r7, #13]
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	fb12 f303 	smulbb	r3, r2, r3
 8000a64:	b29a      	uxth	r2, r3
 8000a66:	88fb      	ldrh	r3, [r7, #6]
 8000a68:	4413      	add	r3, r2
 8000a6a:	b298      	uxth	r0, r3
 8000a6c:	7b3b      	ldrb	r3, [r7, #12]
 8000a6e:	3330      	adds	r3, #48	@ 0x30
 8000a70:	b2da      	uxtb	r2, r3
 8000a72:	8c3c      	ldrh	r4, [r7, #32]
 8000a74:	88b9      	ldrh	r1, [r7, #4]
 8000a76:	2300      	movs	r3, #0
 8000a78:	9302      	str	r3, [sp, #8]
 8000a7a:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8000a7e:	9301      	str	r3, [sp, #4]
 8000a80:	8cbb      	ldrh	r3, [r7, #36]	@ 0x24
 8000a82:	9300      	str	r3, [sp, #0]
 8000a84:	4623      	mov	r3, r4
 8000a86:	f7ff fea5 	bl	80007d4 <lcd_show_char>
	for (t = 0; t < len; t++) {
 8000a8a:	7bfb      	ldrb	r3, [r7, #15]
 8000a8c:	3301      	adds	r3, #1
 8000a8e:	73fb      	strb	r3, [r7, #15]
 8000a90:	7bfa      	ldrb	r2, [r7, #15]
 8000a92:	787b      	ldrb	r3, [r7, #1]
 8000a94:	429a      	cmp	r2, r3
 8000a96:	d3a1      	bcc.n	80009dc <lcd_show_int_num+0x30>
	}
}
 8000a98:	bf00      	nop
 8000a9a:	bf00      	nop
 8000a9c:	3714      	adds	r7, #20
 8000a9e:	46bd      	mov	sp, r7
 8000aa0:	bd90      	pop	{r4, r7, pc}
 8000aa2:	bf00      	nop
 8000aa4:	cccccccd 	.word	0xcccccccd

08000aa8 <lcd_show_picture>:
		lcd_show_char(x + t * sizex, y, temp + 48, fc, bc, sizey, 0);
	}
}

void lcd_show_picture(uint16_t x, uint16_t y, uint16_t length, uint16_t width,
		const uint8_t pic[]) {
 8000aa8:	b590      	push	{r4, r7, lr}
 8000aaa:	b087      	sub	sp, #28
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	4604      	mov	r4, r0
 8000ab0:	4608      	mov	r0, r1
 8000ab2:	4611      	mov	r1, r2
 8000ab4:	461a      	mov	r2, r3
 8000ab6:	4623      	mov	r3, r4
 8000ab8:	80fb      	strh	r3, [r7, #6]
 8000aba:	4603      	mov	r3, r0
 8000abc:	80bb      	strh	r3, [r7, #4]
 8000abe:	460b      	mov	r3, r1
 8000ac0:	807b      	strh	r3, [r7, #2]
 8000ac2:	4613      	mov	r3, r2
 8000ac4:	803b      	strh	r3, [r7, #0]
	uint8_t picH, picL;
	uint16_t i, j;
	uint32_t k = 0;
 8000ac6:	2300      	movs	r3, #0
 8000ac8:	613b      	str	r3, [r7, #16]
	lcd_set_address(x, y, x + length - 1, y + width - 1);
 8000aca:	88fa      	ldrh	r2, [r7, #6]
 8000acc:	887b      	ldrh	r3, [r7, #2]
 8000ace:	4413      	add	r3, r2
 8000ad0:	b29b      	uxth	r3, r3
 8000ad2:	3b01      	subs	r3, #1
 8000ad4:	b29c      	uxth	r4, r3
 8000ad6:	88ba      	ldrh	r2, [r7, #4]
 8000ad8:	883b      	ldrh	r3, [r7, #0]
 8000ada:	4413      	add	r3, r2
 8000adc:	b29b      	uxth	r3, r3
 8000ade:	3b01      	subs	r3, #1
 8000ae0:	b29b      	uxth	r3, r3
 8000ae2:	88b9      	ldrh	r1, [r7, #4]
 8000ae4:	88f8      	ldrh	r0, [r7, #6]
 8000ae6:	4622      	mov	r2, r4
 8000ae8:	f7ff fd20 	bl	800052c <lcd_set_address>
	for (i = 0; i < length; i++) {
 8000aec:	2300      	movs	r3, #0
 8000aee:	82fb      	strh	r3, [r7, #22]
 8000af0:	e027      	b.n	8000b42 <lcd_show_picture+0x9a>
		for (j = 0; j < width; j++) {
 8000af2:	2300      	movs	r3, #0
 8000af4:	82bb      	strh	r3, [r7, #20]
 8000af6:	e01d      	b.n	8000b34 <lcd_show_picture+0x8c>
			picH = pic[k * 2];
 8000af8:	693b      	ldr	r3, [r7, #16]
 8000afa:	005b      	lsls	r3, r3, #1
 8000afc:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000afe:	4413      	add	r3, r2
 8000b00:	781b      	ldrb	r3, [r3, #0]
 8000b02:	73fb      	strb	r3, [r7, #15]
			picL = pic[k * 2 + 1];
 8000b04:	693b      	ldr	r3, [r7, #16]
 8000b06:	005b      	lsls	r3, r3, #1
 8000b08:	3301      	adds	r3, #1
 8000b0a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8000b0c:	4413      	add	r3, r2
 8000b0e:	781b      	ldrb	r3, [r3, #0]
 8000b10:	73bb      	strb	r3, [r7, #14]
			LCD_WR_DATA(picH << 8 | picL);
 8000b12:	7bfb      	ldrb	r3, [r7, #15]
 8000b14:	021b      	lsls	r3, r3, #8
 8000b16:	b21a      	sxth	r2, r3
 8000b18:	7bbb      	ldrb	r3, [r7, #14]
 8000b1a:	b21b      	sxth	r3, r3
 8000b1c:	4313      	orrs	r3, r2
 8000b1e:	b21b      	sxth	r3, r3
 8000b20:	b29b      	uxth	r3, r3
 8000b22:	4618      	mov	r0, r3
 8000b24:	f7ff fce0 	bl	80004e8 <LCD_WR_DATA>
			k++;
 8000b28:	693b      	ldr	r3, [r7, #16]
 8000b2a:	3301      	adds	r3, #1
 8000b2c:	613b      	str	r3, [r7, #16]
		for (j = 0; j < width; j++) {
 8000b2e:	8abb      	ldrh	r3, [r7, #20]
 8000b30:	3301      	adds	r3, #1
 8000b32:	82bb      	strh	r3, [r7, #20]
 8000b34:	8aba      	ldrh	r2, [r7, #20]
 8000b36:	883b      	ldrh	r3, [r7, #0]
 8000b38:	429a      	cmp	r2, r3
 8000b3a:	d3dd      	bcc.n	8000af8 <lcd_show_picture+0x50>
	for (i = 0; i < length; i++) {
 8000b3c:	8afb      	ldrh	r3, [r7, #22]
 8000b3e:	3301      	adds	r3, #1
 8000b40:	82fb      	strh	r3, [r7, #22]
 8000b42:	8afa      	ldrh	r2, [r7, #22]
 8000b44:	887b      	ldrh	r3, [r7, #2]
 8000b46:	429a      	cmp	r2, r3
 8000b48:	d3d3      	bcc.n	8000af2 <lcd_show_picture+0x4a>
		}
	}
}
 8000b4a:	bf00      	nop
 8000b4c:	bf00      	nop
 8000b4e:	371c      	adds	r7, #28
 8000b50:	46bd      	mov	sp, r7
 8000b52:	bd90      	pop	{r4, r7, pc}

08000b54 <lcd_set_direction>:

void lcd_set_direction(uint8_t dir) {
 8000b54:	b480      	push	{r7}
 8000b56:	b083      	sub	sp, #12
 8000b58:	af00      	add	r7, sp, #0
 8000b5a:	4603      	mov	r3, r0
 8000b5c:	71fb      	strb	r3, [r7, #7]
	if ((dir >> 4) % 4) {
 8000b5e:	79fb      	ldrb	r3, [r7, #7]
 8000b60:	091b      	lsrs	r3, r3, #4
 8000b62:	b2db      	uxtb	r3, r3
 8000b64:	f003 0303 	and.w	r3, r3, #3
 8000b68:	b2db      	uxtb	r3, r3
 8000b6a:	2b00      	cmp	r3, #0
 8000b6c:	d007      	beq.n	8000b7e <lcd_set_direction+0x2a>
		lcddev.width = 320;
 8000b6e:	4b0a      	ldr	r3, [pc, #40]	@ (8000b98 <lcd_set_direction+0x44>)
 8000b70:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000b74:	801a      	strh	r2, [r3, #0]
		lcddev.height = 240;
 8000b76:	4b08      	ldr	r3, [pc, #32]	@ (8000b98 <lcd_set_direction+0x44>)
 8000b78:	22f0      	movs	r2, #240	@ 0xf0
 8000b7a:	805a      	strh	r2, [r3, #2]
	} else {
		lcddev.width = 240;
		lcddev.height = 320;
	}
}
 8000b7c:	e006      	b.n	8000b8c <lcd_set_direction+0x38>
		lcddev.width = 240;
 8000b7e:	4b06      	ldr	r3, [pc, #24]	@ (8000b98 <lcd_set_direction+0x44>)
 8000b80:	22f0      	movs	r2, #240	@ 0xf0
 8000b82:	801a      	strh	r2, [r3, #0]
		lcddev.height = 320;
 8000b84:	4b04      	ldr	r3, [pc, #16]	@ (8000b98 <lcd_set_direction+0x44>)
 8000b86:	f44f 72a0 	mov.w	r2, #320	@ 0x140
 8000b8a:	805a      	strh	r2, [r3, #2]
}
 8000b8c:	bf00      	nop
 8000b8e:	370c      	adds	r7, #12
 8000b90:	46bd      	mov	sp, r7
 8000b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b96:	4770      	bx	lr
 8000b98:	20000028 	.word	0x20000028

08000b9c <initializeLCD>:

void initializeLCD(void) {
 8000b9c:	b580      	push	{r7, lr}
 8000b9e:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 8000ba0:	2200      	movs	r2, #0
 8000ba2:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000ba6:	48aa      	ldr	r0, [pc, #680]	@ (8000e50 <initializeLCD+0x2b4>)
 8000ba8:	f001 fb6c 	bl	8002284 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000bac:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bb0:	f001 f896 	bl	8001ce0 <HAL_Delay>
	HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_SET);
 8000bb4:	2201      	movs	r2, #1
 8000bb6:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 8000bba:	48a5      	ldr	r0, [pc, #660]	@ (8000e50 <initializeLCD+0x2b4>)
 8000bbc:	f001 fb62 	bl	8002284 <HAL_GPIO_WritePin>
	HAL_Delay(500);
 8000bc0:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8000bc4:	f001 f88c 	bl	8001ce0 <HAL_Delay>
	lcd_set_direction(DFT_SCAN_DIR);
 8000bc8:	2000      	movs	r0, #0
 8000bca:	f7ff ffc3 	bl	8000b54 <lcd_set_direction>
	LCD_WR_REG(0XD3);
 8000bce:	20d3      	movs	r0, #211	@ 0xd3
 8000bd0:	f7ff fc7a 	bl	80004c8 <LCD_WR_REG>
	lcddev.id = LCD_RD_DATA();
 8000bd4:	f7ff fc98 	bl	8000508 <LCD_RD_DATA>
 8000bd8:	4603      	mov	r3, r0
 8000bda:	461a      	mov	r2, r3
 8000bdc:	4b9d      	ldr	r3, [pc, #628]	@ (8000e54 <initializeLCD+0x2b8>)
 8000bde:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8000be0:	f7ff fc92 	bl	8000508 <LCD_RD_DATA>
 8000be4:	4603      	mov	r3, r0
 8000be6:	461a      	mov	r2, r3
 8000be8:	4b9a      	ldr	r3, [pc, #616]	@ (8000e54 <initializeLCD+0x2b8>)
 8000bea:	809a      	strh	r2, [r3, #4]
	lcddev.id = LCD_RD_DATA();
 8000bec:	f7ff fc8c 	bl	8000508 <LCD_RD_DATA>
 8000bf0:	4603      	mov	r3, r0
 8000bf2:	461a      	mov	r2, r3
 8000bf4:	4b97      	ldr	r3, [pc, #604]	@ (8000e54 <initializeLCD+0x2b8>)
 8000bf6:	809a      	strh	r2, [r3, #4]
	lcddev.id <<= 8;
 8000bf8:	4b96      	ldr	r3, [pc, #600]	@ (8000e54 <initializeLCD+0x2b8>)
 8000bfa:	889b      	ldrh	r3, [r3, #4]
 8000bfc:	021b      	lsls	r3, r3, #8
 8000bfe:	b29a      	uxth	r2, r3
 8000c00:	4b94      	ldr	r3, [pc, #592]	@ (8000e54 <initializeLCD+0x2b8>)
 8000c02:	809a      	strh	r2, [r3, #4]
	lcddev.id |= LCD_RD_DATA();
 8000c04:	f7ff fc80 	bl	8000508 <LCD_RD_DATA>
 8000c08:	4603      	mov	r3, r0
 8000c0a:	461a      	mov	r2, r3
 8000c0c:	4b91      	ldr	r3, [pc, #580]	@ (8000e54 <initializeLCD+0x2b8>)
 8000c0e:	889b      	ldrh	r3, [r3, #4]
 8000c10:	4313      	orrs	r3, r2
 8000c12:	b29a      	uxth	r2, r3
 8000c14:	4b8f      	ldr	r3, [pc, #572]	@ (8000e54 <initializeLCD+0x2b8>)
 8000c16:	809a      	strh	r2, [r3, #4]

	LCD_WR_REG(0xCF);
 8000c18:	20cf      	movs	r0, #207	@ 0xcf
 8000c1a:	f7ff fc55 	bl	80004c8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000c1e:	2000      	movs	r0, #0
 8000c20:	f7ff fc62 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0xC1);
 8000c24:	20c1      	movs	r0, #193	@ 0xc1
 8000c26:	f7ff fc5f 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0X30);
 8000c2a:	2030      	movs	r0, #48	@ 0x30
 8000c2c:	f7ff fc5c 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_REG(0xED);
 8000c30:	20ed      	movs	r0, #237	@ 0xed
 8000c32:	f7ff fc49 	bl	80004c8 <LCD_WR_REG>
	LCD_WR_DATA(0x64);
 8000c36:	2064      	movs	r0, #100	@ 0x64
 8000c38:	f7ff fc56 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x03);
 8000c3c:	2003      	movs	r0, #3
 8000c3e:	f7ff fc53 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0X12);
 8000c42:	2012      	movs	r0, #18
 8000c44:	f7ff fc50 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0X81);
 8000c48:	2081      	movs	r0, #129	@ 0x81
 8000c4a:	f7ff fc4d 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_REG(0xE8);
 8000c4e:	20e8      	movs	r0, #232	@ 0xe8
 8000c50:	f7ff fc3a 	bl	80004c8 <LCD_WR_REG>
	LCD_WR_DATA(0x85);
 8000c54:	2085      	movs	r0, #133	@ 0x85
 8000c56:	f7ff fc47 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000c5a:	2010      	movs	r0, #16
 8000c5c:	f7ff fc44 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x7A);
 8000c60:	207a      	movs	r0, #122	@ 0x7a
 8000c62:	f7ff fc41 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_REG(0xCB);
 8000c66:	20cb      	movs	r0, #203	@ 0xcb
 8000c68:	f7ff fc2e 	bl	80004c8 <LCD_WR_REG>
	LCD_WR_DATA(0x39);
 8000c6c:	2039      	movs	r0, #57	@ 0x39
 8000c6e:	f7ff fc3b 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2C);
 8000c72:	202c      	movs	r0, #44	@ 0x2c
 8000c74:	f7ff fc38 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000c78:	2000      	movs	r0, #0
 8000c7a:	f7ff fc35 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x34);
 8000c7e:	2034      	movs	r0, #52	@ 0x34
 8000c80:	f7ff fc32 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x02);
 8000c84:	2002      	movs	r0, #2
 8000c86:	f7ff fc2f 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_REG(0xF7);
 8000c8a:	20f7      	movs	r0, #247	@ 0xf7
 8000c8c:	f7ff fc1c 	bl	80004c8 <LCD_WR_REG>
	LCD_WR_DATA(0x20);
 8000c90:	2020      	movs	r0, #32
 8000c92:	f7ff fc29 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_REG(0xEA);
 8000c96:	20ea      	movs	r0, #234	@ 0xea
 8000c98:	f7ff fc16 	bl	80004c8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000c9c:	2000      	movs	r0, #0
 8000c9e:	f7ff fc23 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000ca2:	2000      	movs	r0, #0
 8000ca4:	f7ff fc20 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_REG(0xC0);    //Power control
 8000ca8:	20c0      	movs	r0, #192	@ 0xc0
 8000caa:	f7ff fc0d 	bl	80004c8 <LCD_WR_REG>
	LCD_WR_DATA(0x1B);   //VRH[5:0]
 8000cae:	201b      	movs	r0, #27
 8000cb0:	f7ff fc1a 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_REG(0xC1);    //Power control
 8000cb4:	20c1      	movs	r0, #193	@ 0xc1
 8000cb6:	f7ff fc07 	bl	80004c8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);   //SAP[2:0];BT[3:0]
 8000cba:	2001      	movs	r0, #1
 8000cbc:	f7ff fc14 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_REG(0xC5);    //VCM control
 8000cc0:	20c5      	movs	r0, #197	@ 0xc5
 8000cc2:	f7ff fc01 	bl	80004c8 <LCD_WR_REG>
	LCD_WR_DATA(0x30); 	 //3F
 8000cc6:	2030      	movs	r0, #48	@ 0x30
 8000cc8:	f7ff fc0e 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x30); 	 //3C
 8000ccc:	2030      	movs	r0, #48	@ 0x30
 8000cce:	f7ff fc0b 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_REG(0xC7);    //VCM control2
 8000cd2:	20c7      	movs	r0, #199	@ 0xc7
 8000cd4:	f7ff fbf8 	bl	80004c8 <LCD_WR_REG>
	LCD_WR_DATA(0XB7);
 8000cd8:	20b7      	movs	r0, #183	@ 0xb7
 8000cda:	f7ff fc05 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_REG(0x36);    // Memory Access Control
 8000cde:	2036      	movs	r0, #54	@ 0x36
 8000ce0:	f7ff fbf2 	bl	80004c8 <LCD_WR_REG>

	LCD_WR_DATA(0x08 | DFT_SCAN_DIR);
 8000ce4:	2008      	movs	r0, #8
 8000ce6:	f7ff fbff 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_REG(0x3A);
 8000cea:	203a      	movs	r0, #58	@ 0x3a
 8000cec:	f7ff fbec 	bl	80004c8 <LCD_WR_REG>
	LCD_WR_DATA(0x55);
 8000cf0:	2055      	movs	r0, #85	@ 0x55
 8000cf2:	f7ff fbf9 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_REG(0xB1);
 8000cf6:	20b1      	movs	r0, #177	@ 0xb1
 8000cf8:	f7ff fbe6 	bl	80004c8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000cfc:	2000      	movs	r0, #0
 8000cfe:	f7ff fbf3 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x1A);
 8000d02:	201a      	movs	r0, #26
 8000d04:	f7ff fbf0 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_REG(0xB6);    // Display Function Control
 8000d08:	20b6      	movs	r0, #182	@ 0xb6
 8000d0a:	f7ff fbdd 	bl	80004c8 <LCD_WR_REG>
	LCD_WR_DATA(0x0A);
 8000d0e:	200a      	movs	r0, #10
 8000d10:	f7ff fbea 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0xA2);
 8000d14:	20a2      	movs	r0, #162	@ 0xa2
 8000d16:	f7ff fbe7 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_REG(0xF2);    // 3Gamma Function Disable
 8000d1a:	20f2      	movs	r0, #242	@ 0xf2
 8000d1c:	f7ff fbd4 	bl	80004c8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000d20:	2000      	movs	r0, #0
 8000d22:	f7ff fbe1 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_REG(0x26);    //Gamma curve selected
 8000d26:	2026      	movs	r0, #38	@ 0x26
 8000d28:	f7ff fbce 	bl	80004c8 <LCD_WR_REG>
	LCD_WR_DATA(0x01);
 8000d2c:	2001      	movs	r0, #1
 8000d2e:	f7ff fbdb 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_REG(0xE0);    //Set Gamma
 8000d32:	20e0      	movs	r0, #224	@ 0xe0
 8000d34:	f7ff fbc8 	bl	80004c8 <LCD_WR_REG>
	LCD_WR_DATA(0x0F);
 8000d38:	200f      	movs	r0, #15
 8000d3a:	f7ff fbd5 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2A);
 8000d3e:	202a      	movs	r0, #42	@ 0x2a
 8000d40:	f7ff fbd2 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x28);
 8000d44:	2028      	movs	r0, #40	@ 0x28
 8000d46:	f7ff fbcf 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000d4a:	2008      	movs	r0, #8
 8000d4c:	f7ff fbcc 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0E);
 8000d50:	200e      	movs	r0, #14
 8000d52:	f7ff fbc9 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x08);
 8000d56:	2008      	movs	r0, #8
 8000d58:	f7ff fbc6 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x54);
 8000d5c:	2054      	movs	r0, #84	@ 0x54
 8000d5e:	f7ff fbc3 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0XA9);
 8000d62:	20a9      	movs	r0, #169	@ 0xa9
 8000d64:	f7ff fbc0 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x43);
 8000d68:	2043      	movs	r0, #67	@ 0x43
 8000d6a:	f7ff fbbd 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0A);
 8000d6e:	200a      	movs	r0, #10
 8000d70:	f7ff fbba 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000d74:	200f      	movs	r0, #15
 8000d76:	f7ff fbb7 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000d7a:	2000      	movs	r0, #0
 8000d7c:	f7ff fbb4 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000d80:	2000      	movs	r0, #0
 8000d82:	f7ff fbb1 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000d86:	2000      	movs	r0, #0
 8000d88:	f7ff fbae 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000d8c:	2000      	movs	r0, #0
 8000d8e:	f7ff fbab 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_REG(0XE1);    //Set Gamma
 8000d92:	20e1      	movs	r0, #225	@ 0xe1
 8000d94:	f7ff fb98 	bl	80004c8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000d98:	2000      	movs	r0, #0
 8000d9a:	f7ff fba5 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x15);
 8000d9e:	2015      	movs	r0, #21
 8000da0:	f7ff fba2 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x17);
 8000da4:	2017      	movs	r0, #23
 8000da6:	f7ff fb9f 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x07);
 8000daa:	2007      	movs	r0, #7
 8000dac:	f7ff fb9c 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x11);
 8000db0:	2011      	movs	r0, #17
 8000db2:	f7ff fb99 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x06);
 8000db6:	2006      	movs	r0, #6
 8000db8:	f7ff fb96 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x2B);
 8000dbc:	202b      	movs	r0, #43	@ 0x2b
 8000dbe:	f7ff fb93 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x56);
 8000dc2:	2056      	movs	r0, #86	@ 0x56
 8000dc4:	f7ff fb90 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3C);
 8000dc8:	203c      	movs	r0, #60	@ 0x3c
 8000dca:	f7ff fb8d 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x05);
 8000dce:	2005      	movs	r0, #5
 8000dd0:	f7ff fb8a 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x10);
 8000dd4:	2010      	movs	r0, #16
 8000dd6:	f7ff fb87 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000dda:	200f      	movs	r0, #15
 8000ddc:	f7ff fb84 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8000de0:	203f      	movs	r0, #63	@ 0x3f
 8000de2:	f7ff fb81 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3F);
 8000de6:	203f      	movs	r0, #63	@ 0x3f
 8000de8:	f7ff fb7e 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x0F);
 8000dec:	200f      	movs	r0, #15
 8000dee:	f7ff fb7b 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_REG(0x2B);
 8000df2:	202b      	movs	r0, #43	@ 0x2b
 8000df4:	f7ff fb68 	bl	80004c8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000df8:	2000      	movs	r0, #0
 8000dfa:	f7ff fb75 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000dfe:	2000      	movs	r0, #0
 8000e00:	f7ff fb72 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x01);
 8000e04:	2001      	movs	r0, #1
 8000e06:	f7ff fb6f 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x3f);
 8000e0a:	203f      	movs	r0, #63	@ 0x3f
 8000e0c:	f7ff fb6c 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_REG(0x2A);
 8000e10:	202a      	movs	r0, #42	@ 0x2a
 8000e12:	f7ff fb59 	bl	80004c8 <LCD_WR_REG>
	LCD_WR_DATA(0x00);
 8000e16:	2000      	movs	r0, #0
 8000e18:	f7ff fb66 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000e1c:	2000      	movs	r0, #0
 8000e1e:	f7ff fb63 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0x00);
 8000e22:	2000      	movs	r0, #0
 8000e24:	f7ff fb60 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_DATA(0xef);
 8000e28:	20ef      	movs	r0, #239	@ 0xef
 8000e2a:	f7ff fb5d 	bl	80004e8 <LCD_WR_DATA>
	LCD_WR_REG(0x11); // Exit Sleep
 8000e2e:	2011      	movs	r0, #17
 8000e30:	f7ff fb4a 	bl	80004c8 <LCD_WR_REG>
	HAL_Delay(120);
 8000e34:	2078      	movs	r0, #120	@ 0x78
 8000e36:	f000 ff53 	bl	8001ce0 <HAL_Delay>
	LCD_WR_REG(0x29); // Display on
 8000e3a:	2029      	movs	r0, #41	@ 0x29
 8000e3c:	f7ff fb44 	bl	80004c8 <LCD_WR_REG>
	HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, 1);
 8000e40:	2201      	movs	r2, #1
 8000e42:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8000e46:	4804      	ldr	r0, [pc, #16]	@ (8000e58 <initializeLCD+0x2bc>)
 8000e48:	f001 fa1c 	bl	8002284 <HAL_GPIO_WritePin>
}
 8000e4c:	bf00      	nop
 8000e4e:	bd80      	pop	{r7, pc}
 8000e50:	40020800 	.word	0x40020800
 8000e54:	20000028 	.word	0x20000028
 8000e58:	40020000 	.word	0x40020000

08000e5c <_draw_circle_8>:

static void _draw_circle_8(int xc, int yc, int x, int y, uint16_t c) {
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b084      	sub	sp, #16
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
 8000e68:	603b      	str	r3, [r7, #0]
	lcd_draw_point(xc + x, yc + y, c);
 8000e6a:	68fb      	ldr	r3, [r7, #12]
 8000e6c:	b29a      	uxth	r2, r3
 8000e6e:	687b      	ldr	r3, [r7, #4]
 8000e70:	b29b      	uxth	r3, r3
 8000e72:	4413      	add	r3, r2
 8000e74:	b298      	uxth	r0, r3
 8000e76:	68bb      	ldr	r3, [r7, #8]
 8000e78:	b29a      	uxth	r2, r3
 8000e7a:	683b      	ldr	r3, [r7, #0]
 8000e7c:	b29b      	uxth	r3, r3
 8000e7e:	4413      	add	r3, r2
 8000e80:	b29b      	uxth	r3, r3
 8000e82:	8b3a      	ldrh	r2, [r7, #24]
 8000e84:	4619      	mov	r1, r3
 8000e86:	f7ff fbd3 	bl	8000630 <lcd_draw_point>

	lcd_draw_point(xc - x, yc + y, c);
 8000e8a:	68fb      	ldr	r3, [r7, #12]
 8000e8c:	b29a      	uxth	r2, r3
 8000e8e:	687b      	ldr	r3, [r7, #4]
 8000e90:	b29b      	uxth	r3, r3
 8000e92:	1ad3      	subs	r3, r2, r3
 8000e94:	b298      	uxth	r0, r3
 8000e96:	68bb      	ldr	r3, [r7, #8]
 8000e98:	b29a      	uxth	r2, r3
 8000e9a:	683b      	ldr	r3, [r7, #0]
 8000e9c:	b29b      	uxth	r3, r3
 8000e9e:	4413      	add	r3, r2
 8000ea0:	b29b      	uxth	r3, r3
 8000ea2:	8b3a      	ldrh	r2, [r7, #24]
 8000ea4:	4619      	mov	r1, r3
 8000ea6:	f7ff fbc3 	bl	8000630 <lcd_draw_point>

	lcd_draw_point(xc + x, yc - y, c);
 8000eaa:	68fb      	ldr	r3, [r7, #12]
 8000eac:	b29a      	uxth	r2, r3
 8000eae:	687b      	ldr	r3, [r7, #4]
 8000eb0:	b29b      	uxth	r3, r3
 8000eb2:	4413      	add	r3, r2
 8000eb4:	b298      	uxth	r0, r3
 8000eb6:	68bb      	ldr	r3, [r7, #8]
 8000eb8:	b29a      	uxth	r2, r3
 8000eba:	683b      	ldr	r3, [r7, #0]
 8000ebc:	b29b      	uxth	r3, r3
 8000ebe:	1ad3      	subs	r3, r2, r3
 8000ec0:	b29b      	uxth	r3, r3
 8000ec2:	8b3a      	ldrh	r2, [r7, #24]
 8000ec4:	4619      	mov	r1, r3
 8000ec6:	f7ff fbb3 	bl	8000630 <lcd_draw_point>

	lcd_draw_point(xc - x, yc - y, c);
 8000eca:	68fb      	ldr	r3, [r7, #12]
 8000ecc:	b29a      	uxth	r2, r3
 8000ece:	687b      	ldr	r3, [r7, #4]
 8000ed0:	b29b      	uxth	r3, r3
 8000ed2:	1ad3      	subs	r3, r2, r3
 8000ed4:	b298      	uxth	r0, r3
 8000ed6:	68bb      	ldr	r3, [r7, #8]
 8000ed8:	b29a      	uxth	r2, r3
 8000eda:	683b      	ldr	r3, [r7, #0]
 8000edc:	b29b      	uxth	r3, r3
 8000ede:	1ad3      	subs	r3, r2, r3
 8000ee0:	b29b      	uxth	r3, r3
 8000ee2:	8b3a      	ldrh	r2, [r7, #24]
 8000ee4:	4619      	mov	r1, r3
 8000ee6:	f7ff fba3 	bl	8000630 <lcd_draw_point>

	lcd_draw_point(xc + y, yc + x, c);
 8000eea:	68fb      	ldr	r3, [r7, #12]
 8000eec:	b29a      	uxth	r2, r3
 8000eee:	683b      	ldr	r3, [r7, #0]
 8000ef0:	b29b      	uxth	r3, r3
 8000ef2:	4413      	add	r3, r2
 8000ef4:	b298      	uxth	r0, r3
 8000ef6:	68bb      	ldr	r3, [r7, #8]
 8000ef8:	b29a      	uxth	r2, r3
 8000efa:	687b      	ldr	r3, [r7, #4]
 8000efc:	b29b      	uxth	r3, r3
 8000efe:	4413      	add	r3, r2
 8000f00:	b29b      	uxth	r3, r3
 8000f02:	8b3a      	ldrh	r2, [r7, #24]
 8000f04:	4619      	mov	r1, r3
 8000f06:	f7ff fb93 	bl	8000630 <lcd_draw_point>

	lcd_draw_point(xc - y, yc + x, c);
 8000f0a:	68fb      	ldr	r3, [r7, #12]
 8000f0c:	b29a      	uxth	r2, r3
 8000f0e:	683b      	ldr	r3, [r7, #0]
 8000f10:	b29b      	uxth	r3, r3
 8000f12:	1ad3      	subs	r3, r2, r3
 8000f14:	b298      	uxth	r0, r3
 8000f16:	68bb      	ldr	r3, [r7, #8]
 8000f18:	b29a      	uxth	r2, r3
 8000f1a:	687b      	ldr	r3, [r7, #4]
 8000f1c:	b29b      	uxth	r3, r3
 8000f1e:	4413      	add	r3, r2
 8000f20:	b29b      	uxth	r3, r3
 8000f22:	8b3a      	ldrh	r2, [r7, #24]
 8000f24:	4619      	mov	r1, r3
 8000f26:	f7ff fb83 	bl	8000630 <lcd_draw_point>

	lcd_draw_point(xc + y, yc - x, c);
 8000f2a:	68fb      	ldr	r3, [r7, #12]
 8000f2c:	b29a      	uxth	r2, r3
 8000f2e:	683b      	ldr	r3, [r7, #0]
 8000f30:	b29b      	uxth	r3, r3
 8000f32:	4413      	add	r3, r2
 8000f34:	b298      	uxth	r0, r3
 8000f36:	68bb      	ldr	r3, [r7, #8]
 8000f38:	b29a      	uxth	r2, r3
 8000f3a:	687b      	ldr	r3, [r7, #4]
 8000f3c:	b29b      	uxth	r3, r3
 8000f3e:	1ad3      	subs	r3, r2, r3
 8000f40:	b29b      	uxth	r3, r3
 8000f42:	8b3a      	ldrh	r2, [r7, #24]
 8000f44:	4619      	mov	r1, r3
 8000f46:	f7ff fb73 	bl	8000630 <lcd_draw_point>

	lcd_draw_point(xc - y, yc - x, c);
 8000f4a:	68fb      	ldr	r3, [r7, #12]
 8000f4c:	b29a      	uxth	r2, r3
 8000f4e:	683b      	ldr	r3, [r7, #0]
 8000f50:	b29b      	uxth	r3, r3
 8000f52:	1ad3      	subs	r3, r2, r3
 8000f54:	b298      	uxth	r0, r3
 8000f56:	68bb      	ldr	r3, [r7, #8]
 8000f58:	b29a      	uxth	r2, r3
 8000f5a:	687b      	ldr	r3, [r7, #4]
 8000f5c:	b29b      	uxth	r3, r3
 8000f5e:	1ad3      	subs	r3, r2, r3
 8000f60:	b29b      	uxth	r3, r3
 8000f62:	8b3a      	ldrh	r2, [r7, #24]
 8000f64:	4619      	mov	r1, r3
 8000f66:	f7ff fb63 	bl	8000630 <lcd_draw_point>
}
 8000f6a:	bf00      	nop
 8000f6c:	3710      	adds	r7, #16
 8000f6e:	46bd      	mov	sp, r7
 8000f70:	bd80      	pop	{r7, pc}

08000f72 <lcd_draw_circle>:

void lcd_draw_circle(int xc, int yc, uint16_t c, int r, int fill)
{
 8000f72:	b580      	push	{r7, lr}
 8000f74:	b08a      	sub	sp, #40	@ 0x28
 8000f76:	af02      	add	r7, sp, #8
 8000f78:	60f8      	str	r0, [r7, #12]
 8000f7a:	60b9      	str	r1, [r7, #8]
 8000f7c:	603b      	str	r3, [r7, #0]
 8000f7e:	4613      	mov	r3, r2
 8000f80:	80fb      	strh	r3, [r7, #6]
	int x = 0, y = r, yi, d;
 8000f82:	2300      	movs	r3, #0
 8000f84:	61fb      	str	r3, [r7, #28]
 8000f86:	683b      	ldr	r3, [r7, #0]
 8000f88:	61bb      	str	r3, [r7, #24]

	d = 3 - 2 * r;
 8000f8a:	683b      	ldr	r3, [r7, #0]
 8000f8c:	005b      	lsls	r3, r3, #1
 8000f8e:	f1c3 0303 	rsb	r3, r3, #3
 8000f92:	613b      	str	r3, [r7, #16]

	if (fill) {
 8000f94:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8000f96:	2b00      	cmp	r3, #0
 8000f98:	d04f      	beq.n	800103a <lcd_draw_circle+0xc8>
		while (x <= y) {
 8000f9a:	e029      	b.n	8000ff0 <lcd_draw_circle+0x7e>
			for (yi = x; yi <= y; yi++)
 8000f9c:	69fb      	ldr	r3, [r7, #28]
 8000f9e:	617b      	str	r3, [r7, #20]
 8000fa0:	e00a      	b.n	8000fb8 <lcd_draw_circle+0x46>
				_draw_circle_8(xc, yc, x, yi, c);
 8000fa2:	88fb      	ldrh	r3, [r7, #6]
 8000fa4:	9300      	str	r3, [sp, #0]
 8000fa6:	697b      	ldr	r3, [r7, #20]
 8000fa8:	69fa      	ldr	r2, [r7, #28]
 8000faa:	68b9      	ldr	r1, [r7, #8]
 8000fac:	68f8      	ldr	r0, [r7, #12]
 8000fae:	f7ff ff55 	bl	8000e5c <_draw_circle_8>
			for (yi = x; yi <= y; yi++)
 8000fb2:	697b      	ldr	r3, [r7, #20]
 8000fb4:	3301      	adds	r3, #1
 8000fb6:	617b      	str	r3, [r7, #20]
 8000fb8:	697a      	ldr	r2, [r7, #20]
 8000fba:	69bb      	ldr	r3, [r7, #24]
 8000fbc:	429a      	cmp	r2, r3
 8000fbe:	ddf0      	ble.n	8000fa2 <lcd_draw_circle+0x30>

			if (d < 0) {
 8000fc0:	693b      	ldr	r3, [r7, #16]
 8000fc2:	2b00      	cmp	r3, #0
 8000fc4:	da06      	bge.n	8000fd4 <lcd_draw_circle+0x62>
				d = d + 4 * x + 6;
 8000fc6:	69fb      	ldr	r3, [r7, #28]
 8000fc8:	009a      	lsls	r2, r3, #2
 8000fca:	693b      	ldr	r3, [r7, #16]
 8000fcc:	4413      	add	r3, r2
 8000fce:	3306      	adds	r3, #6
 8000fd0:	613b      	str	r3, [r7, #16]
 8000fd2:	e00a      	b.n	8000fea <lcd_draw_circle+0x78>
			} else {
				d = d + 4 * (x - y) + 10;
 8000fd4:	69fa      	ldr	r2, [r7, #28]
 8000fd6:	69bb      	ldr	r3, [r7, #24]
 8000fd8:	1ad3      	subs	r3, r2, r3
 8000fda:	009a      	lsls	r2, r3, #2
 8000fdc:	693b      	ldr	r3, [r7, #16]
 8000fde:	4413      	add	r3, r2
 8000fe0:	330a      	adds	r3, #10
 8000fe2:	613b      	str	r3, [r7, #16]
				y--;
 8000fe4:	69bb      	ldr	r3, [r7, #24]
 8000fe6:	3b01      	subs	r3, #1
 8000fe8:	61bb      	str	r3, [r7, #24]
			}
			x++;
 8000fea:	69fb      	ldr	r3, [r7, #28]
 8000fec:	3301      	adds	r3, #1
 8000fee:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 8000ff0:	69fa      	ldr	r2, [r7, #28]
 8000ff2:	69bb      	ldr	r3, [r7, #24]
 8000ff4:	429a      	cmp	r2, r3
 8000ff6:	ddd1      	ble.n	8000f9c <lcd_draw_circle+0x2a>
				y--;
			}
			x++;
		}
	}
}
 8000ff8:	e023      	b.n	8001042 <lcd_draw_circle+0xd0>
			_draw_circle_8(xc, yc, x, y, c);
 8000ffa:	88fb      	ldrh	r3, [r7, #6]
 8000ffc:	9300      	str	r3, [sp, #0]
 8000ffe:	69bb      	ldr	r3, [r7, #24]
 8001000:	69fa      	ldr	r2, [r7, #28]
 8001002:	68b9      	ldr	r1, [r7, #8]
 8001004:	68f8      	ldr	r0, [r7, #12]
 8001006:	f7ff ff29 	bl	8000e5c <_draw_circle_8>
			if (d < 0) {
 800100a:	693b      	ldr	r3, [r7, #16]
 800100c:	2b00      	cmp	r3, #0
 800100e:	da06      	bge.n	800101e <lcd_draw_circle+0xac>
				d = d + 4 * x + 6;
 8001010:	69fb      	ldr	r3, [r7, #28]
 8001012:	009a      	lsls	r2, r3, #2
 8001014:	693b      	ldr	r3, [r7, #16]
 8001016:	4413      	add	r3, r2
 8001018:	3306      	adds	r3, #6
 800101a:	613b      	str	r3, [r7, #16]
 800101c:	e00a      	b.n	8001034 <lcd_draw_circle+0xc2>
				d = d + 4 * (x - y) + 10;
 800101e:	69fa      	ldr	r2, [r7, #28]
 8001020:	69bb      	ldr	r3, [r7, #24]
 8001022:	1ad3      	subs	r3, r2, r3
 8001024:	009a      	lsls	r2, r3, #2
 8001026:	693b      	ldr	r3, [r7, #16]
 8001028:	4413      	add	r3, r2
 800102a:	330a      	adds	r3, #10
 800102c:	613b      	str	r3, [r7, #16]
				y--;
 800102e:	69bb      	ldr	r3, [r7, #24]
 8001030:	3b01      	subs	r3, #1
 8001032:	61bb      	str	r3, [r7, #24]
			x++;
 8001034:	69fb      	ldr	r3, [r7, #28]
 8001036:	3301      	adds	r3, #1
 8001038:	61fb      	str	r3, [r7, #28]
		while (x <= y) {
 800103a:	69fa      	ldr	r2, [r7, #28]
 800103c:	69bb      	ldr	r3, [r7, #24]
 800103e:	429a      	cmp	r2, r3
 8001040:	dddb      	ble.n	8000ffa <lcd_draw_circle+0x88>
}
 8001042:	bf00      	nop
 8001044:	3720      	adds	r7, #32
 8001046:	46bd      	mov	sp, r7
 8001048:	bd80      	pop	{r7, pc}
	...

0800104c <lcd_show_string>:

void lcd_show_string(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode) {
 800104c:	b590      	push	{r4, r7, lr}
 800104e:	b08b      	sub	sp, #44	@ 0x2c
 8001050:	af04      	add	r7, sp, #16
 8001052:	60ba      	str	r2, [r7, #8]
 8001054:	461a      	mov	r2, r3
 8001056:	4603      	mov	r3, r0
 8001058:	81fb      	strh	r3, [r7, #14]
 800105a:	460b      	mov	r3, r1
 800105c:	81bb      	strh	r3, [r7, #12]
 800105e:	4613      	mov	r3, r2
 8001060:	80fb      	strh	r3, [r7, #6]
	uint16_t x0 = x;
 8001062:	89fb      	ldrh	r3, [r7, #14]
 8001064:	82bb      	strh	r3, [r7, #20]
	uint8_t bHz = 0;
 8001066:	2300      	movs	r3, #0
 8001068:	75fb      	strb	r3, [r7, #23]
	while (*str != 0) {
 800106a:	e048      	b.n	80010fe <lcd_show_string+0xb2>
		if (!bHz) {
 800106c:	7dfb      	ldrb	r3, [r7, #23]
 800106e:	2b00      	cmp	r3, #0
 8001070:	d145      	bne.n	80010fe <lcd_show_string+0xb2>
			if (x > (lcddev.width - sizey / 2) || y > (lcddev.height - sizey))
 8001072:	89fa      	ldrh	r2, [r7, #14]
 8001074:	4b26      	ldr	r3, [pc, #152]	@ (8001110 <lcd_show_string+0xc4>)
 8001076:	881b      	ldrh	r3, [r3, #0]
 8001078:	4619      	mov	r1, r3
 800107a:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 800107e:	085b      	lsrs	r3, r3, #1
 8001080:	b2db      	uxtb	r3, r3
 8001082:	1acb      	subs	r3, r1, r3
 8001084:	429a      	cmp	r2, r3
 8001086:	dc3f      	bgt.n	8001108 <lcd_show_string+0xbc>
 8001088:	89ba      	ldrh	r2, [r7, #12]
 800108a:	4b21      	ldr	r3, [pc, #132]	@ (8001110 <lcd_show_string+0xc4>)
 800108c:	885b      	ldrh	r3, [r3, #2]
 800108e:	4619      	mov	r1, r3
 8001090:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 8001094:	1acb      	subs	r3, r1, r3
 8001096:	429a      	cmp	r2, r3
 8001098:	dc36      	bgt.n	8001108 <lcd_show_string+0xbc>
				return;
			if (*str > 0x80)
 800109a:	68bb      	ldr	r3, [r7, #8]
 800109c:	781b      	ldrb	r3, [r3, #0]
 800109e:	2b80      	cmp	r3, #128	@ 0x80
 80010a0:	d902      	bls.n	80010a8 <lcd_show_string+0x5c>
				bHz = 1;
 80010a2:	2301      	movs	r3, #1
 80010a4:	75fb      	strb	r3, [r7, #23]
 80010a6:	e02a      	b.n	80010fe <lcd_show_string+0xb2>
			else {
				if (*str == 0x0D) {
 80010a8:	68bb      	ldr	r3, [r7, #8]
 80010aa:	781b      	ldrb	r3, [r3, #0]
 80010ac:	2b0d      	cmp	r3, #13
 80010ae:	d10b      	bne.n	80010c8 <lcd_show_string+0x7c>
					y += sizey;
 80010b0:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80010b4:	b29a      	uxth	r2, r3
 80010b6:	89bb      	ldrh	r3, [r7, #12]
 80010b8:	4413      	add	r3, r2
 80010ba:	81bb      	strh	r3, [r7, #12]
					x = x0;
 80010bc:	8abb      	ldrh	r3, [r7, #20]
 80010be:	81fb      	strh	r3, [r7, #14]
					str++;
 80010c0:	68bb      	ldr	r3, [r7, #8]
 80010c2:	3301      	adds	r3, #1
 80010c4:	60bb      	str	r3, [r7, #8]
 80010c6:	e017      	b.n	80010f8 <lcd_show_string+0xac>
				} else {
					lcd_show_char(x, y, *str, fc, bc, sizey, mode);
 80010c8:	68bb      	ldr	r3, [r7, #8]
 80010ca:	781a      	ldrb	r2, [r3, #0]
 80010cc:	88fc      	ldrh	r4, [r7, #6]
 80010ce:	89b9      	ldrh	r1, [r7, #12]
 80010d0:	89f8      	ldrh	r0, [r7, #14]
 80010d2:	f897 3030 	ldrb.w	r3, [r7, #48]	@ 0x30
 80010d6:	9302      	str	r3, [sp, #8]
 80010d8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80010dc:	9301      	str	r3, [sp, #4]
 80010de:	8d3b      	ldrh	r3, [r7, #40]	@ 0x28
 80010e0:	9300      	str	r3, [sp, #0]
 80010e2:	4623      	mov	r3, r4
 80010e4:	f7ff fb76 	bl	80007d4 <lcd_show_char>
					x += sizey / 2;
 80010e8:	f897 302c 	ldrb.w	r3, [r7, #44]	@ 0x2c
 80010ec:	085b      	lsrs	r3, r3, #1
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	461a      	mov	r2, r3
 80010f2:	89fb      	ldrh	r3, [r7, #14]
 80010f4:	4413      	add	r3, r2
 80010f6:	81fb      	strh	r3, [r7, #14]
				}
				str++;
 80010f8:	68bb      	ldr	r3, [r7, #8]
 80010fa:	3301      	adds	r3, #1
 80010fc:	60bb      	str	r3, [r7, #8]
	while (*str != 0) {
 80010fe:	68bb      	ldr	r3, [r7, #8]
 8001100:	781b      	ldrb	r3, [r3, #0]
 8001102:	2b00      	cmp	r3, #0
 8001104:	d1b2      	bne.n	800106c <lcd_show_string+0x20>
 8001106:	e000      	b.n	800110a <lcd_show_string+0xbe>
				return;
 8001108:	bf00      	nop
			}
		}
	}
}
 800110a:	371c      	adds	r7, #28
 800110c:	46bd      	mov	sp, r7
 800110e:	bd90      	pop	{r4, r7, pc}
 8001110:	20000028 	.word	0x20000028

08001114 <lcd_show_string_center>:

void lcd_show_string_center(uint16_t x, uint16_t y, char *str, uint16_t fc, uint16_t bc,
		uint8_t sizey, uint8_t mode) {
 8001114:	b580      	push	{r7, lr}
 8001116:	b08a      	sub	sp, #40	@ 0x28
 8001118:	af04      	add	r7, sp, #16
 800111a:	60ba      	str	r2, [r7, #8]
 800111c:	461a      	mov	r2, r3
 800111e:	4603      	mov	r3, r0
 8001120:	81fb      	strh	r3, [r7, #14]
 8001122:	460b      	mov	r3, r1
 8001124:	81bb      	strh	r3, [r7, #12]
 8001126:	4613      	mov	r3, r2
 8001128:	80fb      	strh	r3, [r7, #6]
	uint16_t len = strlen((const char*) str);
 800112a:	68b8      	ldr	r0, [r7, #8]
 800112c:	f7ff f84c 	bl	80001c8 <strlen>
 8001130:	4603      	mov	r3, r0
 8001132:	82fb      	strh	r3, [r7, #22]
	uint16_t x1 = (lcddev.width - len * 8) / 2;
 8001134:	4b0f      	ldr	r3, [pc, #60]	@ (8001174 <lcd_show_string_center+0x60>)
 8001136:	881b      	ldrh	r3, [r3, #0]
 8001138:	461a      	mov	r2, r3
 800113a:	8afb      	ldrh	r3, [r7, #22]
 800113c:	00db      	lsls	r3, r3, #3
 800113e:	1ad3      	subs	r3, r2, r3
 8001140:	0fda      	lsrs	r2, r3, #31
 8001142:	4413      	add	r3, r2
 8001144:	105b      	asrs	r3, r3, #1
 8001146:	82bb      	strh	r3, [r7, #20]
	lcd_show_string(x + x1, y, str, fc, bc, sizey, mode);
 8001148:	89fa      	ldrh	r2, [r7, #14]
 800114a:	8abb      	ldrh	r3, [r7, #20]
 800114c:	4413      	add	r3, r2
 800114e:	b298      	uxth	r0, r3
 8001150:	88fa      	ldrh	r2, [r7, #6]
 8001152:	89b9      	ldrh	r1, [r7, #12]
 8001154:	f897 3028 	ldrb.w	r3, [r7, #40]	@ 0x28
 8001158:	9302      	str	r3, [sp, #8]
 800115a:	f897 3024 	ldrb.w	r3, [r7, #36]	@ 0x24
 800115e:	9301      	str	r3, [sp, #4]
 8001160:	8c3b      	ldrh	r3, [r7, #32]
 8001162:	9300      	str	r3, [sp, #0]
 8001164:	4613      	mov	r3, r2
 8001166:	68ba      	ldr	r2, [r7, #8]
 8001168:	f7ff ff70 	bl	800104c <lcd_show_string>
}
 800116c:	bf00      	nop
 800116e:	3718      	adds	r7, #24
 8001170:	46bd      	mov	sp, r7
 8001172:	bd80      	pop	{r7, pc}
 8001174:	20000028 	.word	0x20000028

08001178 <initializeButton>:
/**
 * @brief  	Init matrix button
 * @param  	None
 * @retval 	None
 */
void initializeButton() {
 8001178:	b580      	push	{r7, lr}
 800117a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 800117c:	2201      	movs	r2, #1
 800117e:	2108      	movs	r1, #8
 8001180:	4802      	ldr	r0, [pc, #8]	@ (800118c <initializeButton+0x14>)
 8001182:	f001 f87f 	bl	8002284 <HAL_GPIO_WritePin>
}
 8001186:	bf00      	nop
 8001188:	bd80      	pop	{r7, pc}
 800118a:	bf00      	nop
 800118c:	40020c00 	.word	0x40020c00

08001190 <button_scan>:
 * @brief  	Scan matrix button
 * @param  	None
 * @note  	Call every 50ms
 * @retval 	None
 */
void button_scan() {
 8001190:	b580      	push	{r7, lr}
 8001192:	b084      	sub	sp, #16
 8001194:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 0);
 8001196:	2200      	movs	r2, #0
 8001198:	2108      	movs	r1, #8
 800119a:	482f      	ldr	r0, [pc, #188]	@ (8001258 <button_scan+0xc8>)
 800119c:	f001 f872 	bl	8002284 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, 1);
 80011a0:	2201      	movs	r2, #1
 80011a2:	2108      	movs	r1, #8
 80011a4:	482c      	ldr	r0, [pc, #176]	@ (8001258 <button_scan+0xc8>)
 80011a6:	f001 f86d 	bl	8002284 <HAL_GPIO_WritePin>
	HAL_SPI_Receive(&hspi1, (void*) &button_spi_buffer, 2, 10);
 80011aa:	230a      	movs	r3, #10
 80011ac:	2202      	movs	r2, #2
 80011ae:	492b      	ldr	r1, [pc, #172]	@ (800125c <button_scan+0xcc>)
 80011b0:	482b      	ldr	r0, [pc, #172]	@ (8001260 <button_scan+0xd0>)
 80011b2:	f001 fd48 	bl	8002c46 <HAL_SPI_Receive>

	int button_index = 0;
 80011b6:	2300      	movs	r3, #0
 80011b8:	60fb      	str	r3, [r7, #12]
	uint16_t mask = 0x8000;
 80011ba:	f44f 4300 	mov.w	r3, #32768	@ 0x8000
 80011be:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 16; i++) {
 80011c0:	2300      	movs	r3, #0
 80011c2:	607b      	str	r3, [r7, #4]
 80011c4:	e03f      	b.n	8001246 <button_scan+0xb6>
		if (i >= 0 && i <= 3) {
 80011c6:	687b      	ldr	r3, [r7, #4]
 80011c8:	2b00      	cmp	r3, #0
 80011ca:	db06      	blt.n	80011da <button_scan+0x4a>
 80011cc:	687b      	ldr	r3, [r7, #4]
 80011ce:	2b03      	cmp	r3, #3
 80011d0:	dc03      	bgt.n	80011da <button_scan+0x4a>
			button_index = i + 4;
 80011d2:	687b      	ldr	r3, [r7, #4]
 80011d4:	3304      	adds	r3, #4
 80011d6:	60fb      	str	r3, [r7, #12]
 80011d8:	e018      	b.n	800120c <button_scan+0x7c>
		} else if (i >= 4 && i <= 7) {
 80011da:	687b      	ldr	r3, [r7, #4]
 80011dc:	2b03      	cmp	r3, #3
 80011de:	dd07      	ble.n	80011f0 <button_scan+0x60>
 80011e0:	687b      	ldr	r3, [r7, #4]
 80011e2:	2b07      	cmp	r3, #7
 80011e4:	dc04      	bgt.n	80011f0 <button_scan+0x60>
			button_index = 7 - i;
 80011e6:	687b      	ldr	r3, [r7, #4]
 80011e8:	f1c3 0307 	rsb	r3, r3, #7
 80011ec:	60fb      	str	r3, [r7, #12]
 80011ee:	e00d      	b.n	800120c <button_scan+0x7c>
		} else if (i >= 8 && i <= 11) {
 80011f0:	687b      	ldr	r3, [r7, #4]
 80011f2:	2b07      	cmp	r3, #7
 80011f4:	dd06      	ble.n	8001204 <button_scan+0x74>
 80011f6:	687b      	ldr	r3, [r7, #4]
 80011f8:	2b0b      	cmp	r3, #11
 80011fa:	dc03      	bgt.n	8001204 <button_scan+0x74>
			button_index = i + 4;
 80011fc:	687b      	ldr	r3, [r7, #4]
 80011fe:	3304      	adds	r3, #4
 8001200:	60fb      	str	r3, [r7, #12]
 8001202:	e003      	b.n	800120c <button_scan+0x7c>
		} else {
			button_index = 23 - i;
 8001204:	687b      	ldr	r3, [r7, #4]
 8001206:	f1c3 0317 	rsb	r3, r3, #23
 800120a:	60fb      	str	r3, [r7, #12]
		}
		if (button_spi_buffer & mask)
 800120c:	4b13      	ldr	r3, [pc, #76]	@ (800125c <button_scan+0xcc>)
 800120e:	881a      	ldrh	r2, [r3, #0]
 8001210:	897b      	ldrh	r3, [r7, #10]
 8001212:	4013      	ands	r3, r2
 8001214:	b29b      	uxth	r3, r3
 8001216:	2b00      	cmp	r3, #0
 8001218:	d005      	beq.n	8001226 <button_scan+0x96>
			button_count[button_index] = 0;
 800121a:	4a12      	ldr	r2, [pc, #72]	@ (8001264 <button_scan+0xd4>)
 800121c:	68fb      	ldr	r3, [r7, #12]
 800121e:	2100      	movs	r1, #0
 8001220:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
 8001224:	e009      	b.n	800123a <button_scan+0xaa>
		else
			button_count[button_index]++;
 8001226:	4a0f      	ldr	r2, [pc, #60]	@ (8001264 <button_scan+0xd4>)
 8001228:	68fb      	ldr	r3, [r7, #12]
 800122a:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 800122e:	3301      	adds	r3, #1
 8001230:	b299      	uxth	r1, r3
 8001232:	4a0c      	ldr	r2, [pc, #48]	@ (8001264 <button_scan+0xd4>)
 8001234:	68fb      	ldr	r3, [r7, #12]
 8001236:	f822 1013 	strh.w	r1, [r2, r3, lsl #1]
		mask = mask >> 1;
 800123a:	897b      	ldrh	r3, [r7, #10]
 800123c:	085b      	lsrs	r3, r3, #1
 800123e:	817b      	strh	r3, [r7, #10]
	for (int i = 0; i < 16; i++) {
 8001240:	687b      	ldr	r3, [r7, #4]
 8001242:	3301      	adds	r3, #1
 8001244:	607b      	str	r3, [r7, #4]
 8001246:	687b      	ldr	r3, [r7, #4]
 8001248:	2b0f      	cmp	r3, #15
 800124a:	ddbc      	ble.n	80011c6 <button_scan+0x36>
	}
}
 800124c:	bf00      	nop
 800124e:	bf00      	nop
 8001250:	3710      	adds	r7, #16
 8001252:	46bd      	mov	sp, r7
 8001254:	bd80      	pop	{r7, pc}
 8001256:	bf00      	nop
 8001258:	40020c00 	.word	0x40020c00
 800125c:	20000050 	.word	0x20000050
 8001260:	200000b0 	.word	0x200000b0
 8001264:	20000030 	.word	0x20000030

08001268 <MX_FSMC_Init>:

SRAM_HandleTypeDef hsram1;

/* FSMC initialization function */
void MX_FSMC_Init(void)
{
 8001268:	b580      	push	{r7, lr}
 800126a:	b08e      	sub	sp, #56	@ 0x38
 800126c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_Init 0 */

  /* USER CODE END FSMC_Init 0 */

  FSMC_NORSRAM_TimingTypeDef Timing = {0};
 800126e:	f107 031c 	add.w	r3, r7, #28
 8001272:	2200      	movs	r2, #0
 8001274:	601a      	str	r2, [r3, #0]
 8001276:	605a      	str	r2, [r3, #4]
 8001278:	609a      	str	r2, [r3, #8]
 800127a:	60da      	str	r2, [r3, #12]
 800127c:	611a      	str	r2, [r3, #16]
 800127e:	615a      	str	r2, [r3, #20]
 8001280:	619a      	str	r2, [r3, #24]
  FSMC_NORSRAM_TimingTypeDef ExtTiming = {0};
 8001282:	463b      	mov	r3, r7
 8001284:	2200      	movs	r2, #0
 8001286:	601a      	str	r2, [r3, #0]
 8001288:	605a      	str	r2, [r3, #4]
 800128a:	609a      	str	r2, [r3, #8]
 800128c:	60da      	str	r2, [r3, #12]
 800128e:	611a      	str	r2, [r3, #16]
 8001290:	615a      	str	r2, [r3, #20]
 8001292:	619a      	str	r2, [r3, #24]

  /* USER CODE END FSMC_Init 1 */

  /** Perform the SRAM1 memory initialization sequence
  */
  hsram1.Instance = FSMC_NORSRAM_DEVICE;
 8001294:	4b2f      	ldr	r3, [pc, #188]	@ (8001354 <MX_FSMC_Init+0xec>)
 8001296:	f04f 4220 	mov.w	r2, #2684354560	@ 0xa0000000
 800129a:	601a      	str	r2, [r3, #0]
  hsram1.Extended = FSMC_NORSRAM_EXTENDED_DEVICE;
 800129c:	4b2d      	ldr	r3, [pc, #180]	@ (8001354 <MX_FSMC_Init+0xec>)
 800129e:	4a2e      	ldr	r2, [pc, #184]	@ (8001358 <MX_FSMC_Init+0xf0>)
 80012a0:	605a      	str	r2, [r3, #4]
  /* hsram1.Init */
  hsram1.Init.NSBank = FSMC_NORSRAM_BANK1;
 80012a2:	4b2c      	ldr	r3, [pc, #176]	@ (8001354 <MX_FSMC_Init+0xec>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	609a      	str	r2, [r3, #8]
  hsram1.Init.DataAddressMux = FSMC_DATA_ADDRESS_MUX_DISABLE;
 80012a8:	4b2a      	ldr	r3, [pc, #168]	@ (8001354 <MX_FSMC_Init+0xec>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	60da      	str	r2, [r3, #12]
  hsram1.Init.MemoryType = FSMC_MEMORY_TYPE_SRAM;
 80012ae:	4b29      	ldr	r3, [pc, #164]	@ (8001354 <MX_FSMC_Init+0xec>)
 80012b0:	2200      	movs	r2, #0
 80012b2:	611a      	str	r2, [r3, #16]
  hsram1.Init.MemoryDataWidth = FSMC_NORSRAM_MEM_BUS_WIDTH_16;
 80012b4:	4b27      	ldr	r3, [pc, #156]	@ (8001354 <MX_FSMC_Init+0xec>)
 80012b6:	2210      	movs	r2, #16
 80012b8:	615a      	str	r2, [r3, #20]
  hsram1.Init.BurstAccessMode = FSMC_BURST_ACCESS_MODE_DISABLE;
 80012ba:	4b26      	ldr	r3, [pc, #152]	@ (8001354 <MX_FSMC_Init+0xec>)
 80012bc:	2200      	movs	r2, #0
 80012be:	619a      	str	r2, [r3, #24]
  hsram1.Init.WaitSignalPolarity = FSMC_WAIT_SIGNAL_POLARITY_LOW;
 80012c0:	4b24      	ldr	r3, [pc, #144]	@ (8001354 <MX_FSMC_Init+0xec>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	61da      	str	r2, [r3, #28]
  hsram1.Init.WrapMode = FSMC_WRAP_MODE_DISABLE;
 80012c6:	4b23      	ldr	r3, [pc, #140]	@ (8001354 <MX_FSMC_Init+0xec>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	621a      	str	r2, [r3, #32]
  hsram1.Init.WaitSignalActive = FSMC_WAIT_TIMING_BEFORE_WS;
 80012cc:	4b21      	ldr	r3, [pc, #132]	@ (8001354 <MX_FSMC_Init+0xec>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	625a      	str	r2, [r3, #36]	@ 0x24
  hsram1.Init.WriteOperation = FSMC_WRITE_OPERATION_ENABLE;
 80012d2:	4b20      	ldr	r3, [pc, #128]	@ (8001354 <MX_FSMC_Init+0xec>)
 80012d4:	f44f 5280 	mov.w	r2, #4096	@ 0x1000
 80012d8:	629a      	str	r2, [r3, #40]	@ 0x28
  hsram1.Init.WaitSignal = FSMC_WAIT_SIGNAL_DISABLE;
 80012da:	4b1e      	ldr	r3, [pc, #120]	@ (8001354 <MX_FSMC_Init+0xec>)
 80012dc:	2200      	movs	r2, #0
 80012de:	62da      	str	r2, [r3, #44]	@ 0x2c
  hsram1.Init.ExtendedMode = FSMC_EXTENDED_MODE_ENABLE;
 80012e0:	4b1c      	ldr	r3, [pc, #112]	@ (8001354 <MX_FSMC_Init+0xec>)
 80012e2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80012e6:	631a      	str	r2, [r3, #48]	@ 0x30
  hsram1.Init.AsynchronousWait = FSMC_ASYNCHRONOUS_WAIT_DISABLE;
 80012e8:	4b1a      	ldr	r3, [pc, #104]	@ (8001354 <MX_FSMC_Init+0xec>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	635a      	str	r2, [r3, #52]	@ 0x34
  hsram1.Init.WriteBurst = FSMC_WRITE_BURST_DISABLE;
 80012ee:	4b19      	ldr	r3, [pc, #100]	@ (8001354 <MX_FSMC_Init+0xec>)
 80012f0:	2200      	movs	r2, #0
 80012f2:	639a      	str	r2, [r3, #56]	@ 0x38
  hsram1.Init.PageSize = FSMC_PAGE_SIZE_NONE;
 80012f4:	4b17      	ldr	r3, [pc, #92]	@ (8001354 <MX_FSMC_Init+0xec>)
 80012f6:	2200      	movs	r2, #0
 80012f8:	645a      	str	r2, [r3, #68]	@ 0x44
  /* Timing */
  Timing.AddressSetupTime = 0xf;
 80012fa:	230f      	movs	r3, #15
 80012fc:	61fb      	str	r3, [r7, #28]
  Timing.AddressHoldTime = 15;
 80012fe:	230f      	movs	r3, #15
 8001300:	623b      	str	r3, [r7, #32]
  Timing.DataSetupTime = 60;
 8001302:	233c      	movs	r3, #60	@ 0x3c
 8001304:	627b      	str	r3, [r7, #36]	@ 0x24
  Timing.BusTurnAroundDuration = 0;
 8001306:	2300      	movs	r3, #0
 8001308:	62bb      	str	r3, [r7, #40]	@ 0x28
  Timing.CLKDivision = 16;
 800130a:	2310      	movs	r3, #16
 800130c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  Timing.DataLatency = 17;
 800130e:	2311      	movs	r3, #17
 8001310:	633b      	str	r3, [r7, #48]	@ 0x30
  Timing.AccessMode = FSMC_ACCESS_MODE_A;
 8001312:	2300      	movs	r3, #0
 8001314:	637b      	str	r3, [r7, #52]	@ 0x34
  /* ExtTiming */
  ExtTiming.AddressSetupTime = 8;
 8001316:	2308      	movs	r3, #8
 8001318:	603b      	str	r3, [r7, #0]
  ExtTiming.AddressHoldTime = 15;
 800131a:	230f      	movs	r3, #15
 800131c:	607b      	str	r3, [r7, #4]
  ExtTiming.DataSetupTime = 9;
 800131e:	2309      	movs	r3, #9
 8001320:	60bb      	str	r3, [r7, #8]
  ExtTiming.BusTurnAroundDuration = 0;
 8001322:	2300      	movs	r3, #0
 8001324:	60fb      	str	r3, [r7, #12]
  ExtTiming.CLKDivision = 16;
 8001326:	2310      	movs	r3, #16
 8001328:	613b      	str	r3, [r7, #16]
  ExtTiming.DataLatency = 17;
 800132a:	2311      	movs	r3, #17
 800132c:	617b      	str	r3, [r7, #20]
  ExtTiming.AccessMode = FSMC_ACCESS_MODE_A;
 800132e:	2300      	movs	r3, #0
 8001330:	61bb      	str	r3, [r7, #24]

  if (HAL_SRAM_Init(&hsram1, &Timing, &ExtTiming) != HAL_OK)
 8001332:	463a      	mov	r2, r7
 8001334:	f107 031c 	add.w	r3, r7, #28
 8001338:	4619      	mov	r1, r3
 800133a:	4806      	ldr	r0, [pc, #24]	@ (8001354 <MX_FSMC_Init+0xec>)
 800133c:	f002 f88e 	bl	800345c <HAL_SRAM_Init>
 8001340:	4603      	mov	r3, r0
 8001342:	2b00      	cmp	r3, #0
 8001344:	d001      	beq.n	800134a <MX_FSMC_Init+0xe2>
  {
    Error_Handler( );
 8001346:	f000 fa75 	bl	8001834 <Error_Handler>
  }

  /* USER CODE BEGIN FSMC_Init 2 */

  /* USER CODE END FSMC_Init 2 */
}
 800134a:	bf00      	nop
 800134c:	3738      	adds	r7, #56	@ 0x38
 800134e:	46bd      	mov	sp, r7
 8001350:	bd80      	pop	{r7, pc}
 8001352:	bf00      	nop
 8001354:	20000054 	.word	0x20000054
 8001358:	a0000104 	.word	0xa0000104

0800135c <HAL_FSMC_MspInit>:

static uint32_t FSMC_Initialized = 0;

static void HAL_FSMC_MspInit(void){
 800135c:	b580      	push	{r7, lr}
 800135e:	b086      	sub	sp, #24
 8001360:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN FSMC_MspInit 0 */

  /* USER CODE END FSMC_MspInit 0 */
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001362:	1d3b      	adds	r3, r7, #4
 8001364:	2200      	movs	r2, #0
 8001366:	601a      	str	r2, [r3, #0]
 8001368:	605a      	str	r2, [r3, #4]
 800136a:	609a      	str	r2, [r3, #8]
 800136c:	60da      	str	r2, [r3, #12]
 800136e:	611a      	str	r2, [r3, #16]
  if (FSMC_Initialized) {
 8001370:	4b1c      	ldr	r3, [pc, #112]	@ (80013e4 <HAL_FSMC_MspInit+0x88>)
 8001372:	681b      	ldr	r3, [r3, #0]
 8001374:	2b00      	cmp	r3, #0
 8001376:	d131      	bne.n	80013dc <HAL_FSMC_MspInit+0x80>
    return;
  }
  FSMC_Initialized = 1;
 8001378:	4b1a      	ldr	r3, [pc, #104]	@ (80013e4 <HAL_FSMC_MspInit+0x88>)
 800137a:	2201      	movs	r2, #1
 800137c:	601a      	str	r2, [r3, #0]

  /* Peripheral clock enable */
  __HAL_RCC_FSMC_CLK_ENABLE();
 800137e:	2300      	movs	r3, #0
 8001380:	603b      	str	r3, [r7, #0]
 8001382:	4b19      	ldr	r3, [pc, #100]	@ (80013e8 <HAL_FSMC_MspInit+0x8c>)
 8001384:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001386:	4a18      	ldr	r2, [pc, #96]	@ (80013e8 <HAL_FSMC_MspInit+0x8c>)
 8001388:	f043 0301 	orr.w	r3, r3, #1
 800138c:	6393      	str	r3, [r2, #56]	@ 0x38
 800138e:	4b16      	ldr	r3, [pc, #88]	@ (80013e8 <HAL_FSMC_MspInit+0x8c>)
 8001390:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8001392:	f003 0301 	and.w	r3, r3, #1
 8001396:	603b      	str	r3, [r7, #0]
 8001398:	683b      	ldr	r3, [r7, #0]
  PD4   ------> FSMC_NOE
  PD5   ------> FSMC_NWE
  PD7   ------> FSMC_NE1
  */
  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_7|GPIO_PIN_8|GPIO_PIN_9
 800139a:	f64f 7388 	movw	r3, #65416	@ 0xff88
 800139e:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_10|GPIO_PIN_11|GPIO_PIN_12|GPIO_PIN_13
                          |GPIO_PIN_14|GPIO_PIN_15;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013a0:	2302      	movs	r3, #2
 80013a2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013a4:	2300      	movs	r3, #0
 80013a6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013a8:	2303      	movs	r3, #3
 80013aa:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80013ac:	230c      	movs	r3, #12
 80013ae:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80013b0:	1d3b      	adds	r3, r7, #4
 80013b2:	4619      	mov	r1, r3
 80013b4:	480d      	ldr	r0, [pc, #52]	@ (80013ec <HAL_FSMC_MspInit+0x90>)
 80013b6:	f000 fdc9 	bl	8001f4c <HAL_GPIO_Init>

  /* GPIO_InitStruct */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9|GPIO_PIN_10|GPIO_PIN_14
 80013ba:	f24c 73b3 	movw	r3, #51123	@ 0xc7b3
 80013be:	607b      	str	r3, [r7, #4]
                          |GPIO_PIN_15|GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_4
                          |GPIO_PIN_5|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80013c0:	2302      	movs	r3, #2
 80013c2:	60bb      	str	r3, [r7, #8]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80013c4:	2300      	movs	r3, #0
 80013c6:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80013c8:	2303      	movs	r3, #3
 80013ca:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Alternate = GPIO_AF12_FSMC;
 80013cc:	230c      	movs	r3, #12
 80013ce:	617b      	str	r3, [r7, #20]

  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80013d0:	1d3b      	adds	r3, r7, #4
 80013d2:	4619      	mov	r1, r3
 80013d4:	4806      	ldr	r0, [pc, #24]	@ (80013f0 <HAL_FSMC_MspInit+0x94>)
 80013d6:	f000 fdb9 	bl	8001f4c <HAL_GPIO_Init>
 80013da:	e000      	b.n	80013de <HAL_FSMC_MspInit+0x82>
    return;
 80013dc:	bf00      	nop

  /* USER CODE BEGIN FSMC_MspInit 1 */

  /* USER CODE END FSMC_MspInit 1 */
}
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	200000a4 	.word	0x200000a4
 80013e8:	40023800 	.word	0x40023800
 80013ec:	40021000 	.word	0x40021000
 80013f0:	40020c00 	.word	0x40020c00

080013f4 <HAL_SRAM_MspInit>:

void HAL_SRAM_MspInit(SRAM_HandleTypeDef* sramHandle){
 80013f4:	b580      	push	{r7, lr}
 80013f6:	b082      	sub	sp, #8
 80013f8:	af00      	add	r7, sp, #0
 80013fa:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN SRAM_MspInit 0 */

  /* USER CODE END SRAM_MspInit 0 */
  HAL_FSMC_MspInit();
 80013fc:	f7ff ffae 	bl	800135c <HAL_FSMC_MspInit>
  /* USER CODE BEGIN SRAM_MspInit 1 */

  /* USER CODE END SRAM_MspInit 1 */
}
 8001400:	bf00      	nop
 8001402:	3708      	adds	r7, #8
 8001404:	46bd      	mov	sp, r7
 8001406:	bd80      	pop	{r7, pc}

08001408 <MX_GPIO_Init>:
        * Output
        * EVENT_OUT
        * EXTI
*/
void MX_GPIO_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08c      	sub	sp, #48	@ 0x30
 800140c:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800140e:	f107 031c 	add.w	r3, r7, #28
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
 800141c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800141e:	2300      	movs	r3, #0
 8001420:	61bb      	str	r3, [r7, #24]
 8001422:	4b63      	ldr	r3, [pc, #396]	@ (80015b0 <MX_GPIO_Init+0x1a8>)
 8001424:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001426:	4a62      	ldr	r2, [pc, #392]	@ (80015b0 <MX_GPIO_Init+0x1a8>)
 8001428:	f043 0310 	orr.w	r3, r3, #16
 800142c:	6313      	str	r3, [r2, #48]	@ 0x30
 800142e:	4b60      	ldr	r3, [pc, #384]	@ (80015b0 <MX_GPIO_Init+0x1a8>)
 8001430:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001432:	f003 0310 	and.w	r3, r3, #16
 8001436:	61bb      	str	r3, [r7, #24]
 8001438:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800143a:	2300      	movs	r3, #0
 800143c:	617b      	str	r3, [r7, #20]
 800143e:	4b5c      	ldr	r3, [pc, #368]	@ (80015b0 <MX_GPIO_Init+0x1a8>)
 8001440:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001442:	4a5b      	ldr	r2, [pc, #364]	@ (80015b0 <MX_GPIO_Init+0x1a8>)
 8001444:	f043 0304 	orr.w	r3, r3, #4
 8001448:	6313      	str	r3, [r2, #48]	@ 0x30
 800144a:	4b59      	ldr	r3, [pc, #356]	@ (80015b0 <MX_GPIO_Init+0x1a8>)
 800144c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800144e:	f003 0304 	and.w	r3, r3, #4
 8001452:	617b      	str	r3, [r7, #20]
 8001454:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001456:	2300      	movs	r3, #0
 8001458:	613b      	str	r3, [r7, #16]
 800145a:	4b55      	ldr	r3, [pc, #340]	@ (80015b0 <MX_GPIO_Init+0x1a8>)
 800145c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800145e:	4a54      	ldr	r2, [pc, #336]	@ (80015b0 <MX_GPIO_Init+0x1a8>)
 8001460:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001464:	6313      	str	r3, [r2, #48]	@ 0x30
 8001466:	4b52      	ldr	r3, [pc, #328]	@ (80015b0 <MX_GPIO_Init+0x1a8>)
 8001468:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800146a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800146e:	613b      	str	r3, [r7, #16]
 8001470:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001472:	2300      	movs	r3, #0
 8001474:	60fb      	str	r3, [r7, #12]
 8001476:	4b4e      	ldr	r3, [pc, #312]	@ (80015b0 <MX_GPIO_Init+0x1a8>)
 8001478:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800147a:	4a4d      	ldr	r2, [pc, #308]	@ (80015b0 <MX_GPIO_Init+0x1a8>)
 800147c:	f043 0308 	orr.w	r3, r3, #8
 8001480:	6313      	str	r3, [r2, #48]	@ 0x30
 8001482:	4b4b      	ldr	r3, [pc, #300]	@ (80015b0 <MX_GPIO_Init+0x1a8>)
 8001484:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001486:	f003 0308 	and.w	r3, r3, #8
 800148a:	60fb      	str	r3, [r7, #12]
 800148c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800148e:	2300      	movs	r3, #0
 8001490:	60bb      	str	r3, [r7, #8]
 8001492:	4b47      	ldr	r3, [pc, #284]	@ (80015b0 <MX_GPIO_Init+0x1a8>)
 8001494:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001496:	4a46      	ldr	r2, [pc, #280]	@ (80015b0 <MX_GPIO_Init+0x1a8>)
 8001498:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800149c:	6313      	str	r3, [r2, #48]	@ 0x30
 800149e:	4b44      	ldr	r3, [pc, #272]	@ (80015b0 <MX_GPIO_Init+0x1a8>)
 80014a0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014a2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80014a6:	60bb      	str	r3, [r7, #8]
 80014a8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80014aa:	2300      	movs	r3, #0
 80014ac:	607b      	str	r3, [r7, #4]
 80014ae:	4b40      	ldr	r3, [pc, #256]	@ (80015b0 <MX_GPIO_Init+0x1a8>)
 80014b0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014b2:	4a3f      	ldr	r2, [pc, #252]	@ (80015b0 <MX_GPIO_Init+0x1a8>)
 80014b4:	f043 0301 	orr.w	r3, r3, #1
 80014b8:	6313      	str	r3, [r2, #48]	@ 0x30
 80014ba:	4b3d      	ldr	r3, [pc, #244]	@ (80015b0 <MX_GPIO_Init+0x1a8>)
 80014bc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014be:	f003 0301 	and.w	r3, r3, #1
 80014c2:	607b      	str	r3, [r7, #4]
 80014c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80014c6:	2300      	movs	r3, #0
 80014c8:	603b      	str	r3, [r7, #0]
 80014ca:	4b39      	ldr	r3, [pc, #228]	@ (80015b0 <MX_GPIO_Init+0x1a8>)
 80014cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014ce:	4a38      	ldr	r2, [pc, #224]	@ (80015b0 <MX_GPIO_Init+0x1a8>)
 80014d0:	f043 0302 	orr.w	r3, r3, #2
 80014d4:	6313      	str	r3, [r2, #48]	@ 0x30
 80014d6:	4b36      	ldr	r3, [pc, #216]	@ (80015b0 <MX_GPIO_Init+0x1a8>)
 80014d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80014da:	f003 0302 	and.w	r3, r3, #2
 80014de:	603b      	str	r3, [r7, #0]
 80014e0:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, LED_DEBUG_Pin|LED_Y0_Pin|LED_Y1_Pin, GPIO_PIN_RESET);
 80014e2:	2200      	movs	r2, #0
 80014e4:	2170      	movs	r1, #112	@ 0x70
 80014e6:	4833      	ldr	r0, [pc, #204]	@ (80015b4 <MX_GPIO_Init+0x1ac>)
 80014e8:	f000 fecc 	bl	8002284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_RES_GPIO_Port, FSMC_RES_Pin, GPIO_PIN_RESET);
 80014ec:	2200      	movs	r2, #0
 80014ee:	f44f 5100 	mov.w	r1, #8192	@ 0x2000
 80014f2:	4831      	ldr	r0, [pc, #196]	@ (80015b8 <MX_GPIO_Init+0x1b0>)
 80014f4:	f000 fec6 	bl	8002284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, GPIO_PIN_RESET);
 80014f8:	2200      	movs	r2, #0
 80014fa:	2140      	movs	r1, #64	@ 0x40
 80014fc:	482f      	ldr	r0, [pc, #188]	@ (80015bc <MX_GPIO_Init+0x1b4>)
 80014fe:	f000 fec1 	bl	8002284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(FSMC_BLK_GPIO_Port, FSMC_BLK_Pin, GPIO_PIN_RESET);
 8001502:	2200      	movs	r2, #0
 8001504:	f44f 7180 	mov.w	r1, #256	@ 0x100
 8001508:	482d      	ldr	r0, [pc, #180]	@ (80015c0 <MX_GPIO_Init+0x1b8>)
 800150a:	f000 febb 	bl	8002284 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(BTN_LOAD_GPIO_Port, BTN_LOAD_Pin, GPIO_PIN_RESET);
 800150e:	2200      	movs	r2, #0
 8001510:	2108      	movs	r1, #8
 8001512:	482c      	ldr	r0, [pc, #176]	@ (80015c4 <MX_GPIO_Init+0x1bc>)
 8001514:	f000 feb6 	bl	8002284 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PEPin PEPin PEPin */
  GPIO_InitStruct.Pin = LED_DEBUG_Pin|LED_Y0_Pin|LED_Y1_Pin;
 8001518:	2370      	movs	r3, #112	@ 0x70
 800151a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800151c:	2301      	movs	r3, #1
 800151e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001520:	2300      	movs	r3, #0
 8001522:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001524:	2300      	movs	r3, #0
 8001526:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8001528:	f107 031c 	add.w	r3, r7, #28
 800152c:	4619      	mov	r1, r3
 800152e:	4821      	ldr	r0, [pc, #132]	@ (80015b4 <MX_GPIO_Init+0x1ac>)
 8001530:	f000 fd0c 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_RES_Pin;
 8001534:	f44f 5300 	mov.w	r3, #8192	@ 0x2000
 8001538:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800153a:	2301      	movs	r3, #1
 800153c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800153e:	2300      	movs	r3, #0
 8001540:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001542:	2300      	movs	r3, #0
 8001544:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_RES_GPIO_Port, &GPIO_InitStruct);
 8001546:	f107 031c 	add.w	r3, r7, #28
 800154a:	4619      	mov	r1, r3
 800154c:	481a      	ldr	r0, [pc, #104]	@ (80015b8 <MX_GPIO_Init+0x1b0>)
 800154e:	f000 fcfd 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = LD_LATCH_Pin;
 8001552:	2340      	movs	r3, #64	@ 0x40
 8001554:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001556:	2301      	movs	r3, #1
 8001558:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800155a:	2300      	movs	r3, #0
 800155c:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800155e:	2300      	movs	r3, #0
 8001560:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(LD_LATCH_GPIO_Port, &GPIO_InitStruct);
 8001562:	f107 031c 	add.w	r3, r7, #28
 8001566:	4619      	mov	r1, r3
 8001568:	4814      	ldr	r0, [pc, #80]	@ (80015bc <MX_GPIO_Init+0x1b4>)
 800156a:	f000 fcef 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = FSMC_BLK_Pin;
 800156e:	f44f 7380 	mov.w	r3, #256	@ 0x100
 8001572:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001574:	2301      	movs	r3, #1
 8001576:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001578:	2300      	movs	r3, #0
 800157a:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800157c:	2300      	movs	r3, #0
 800157e:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(FSMC_BLK_GPIO_Port, &GPIO_InitStruct);
 8001580:	f107 031c 	add.w	r3, r7, #28
 8001584:	4619      	mov	r1, r3
 8001586:	480e      	ldr	r0, [pc, #56]	@ (80015c0 <MX_GPIO_Init+0x1b8>)
 8001588:	f000 fce0 	bl	8001f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = BTN_LOAD_Pin;
 800158c:	2308      	movs	r3, #8
 800158e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001590:	2301      	movs	r3, #1
 8001592:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001594:	2300      	movs	r3, #0
 8001596:	627b      	str	r3, [r7, #36]	@ 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001598:	2300      	movs	r3, #0
 800159a:	62bb      	str	r3, [r7, #40]	@ 0x28
  HAL_GPIO_Init(BTN_LOAD_GPIO_Port, &GPIO_InitStruct);
 800159c:	f107 031c 	add.w	r3, r7, #28
 80015a0:	4619      	mov	r1, r3
 80015a2:	4808      	ldr	r0, [pc, #32]	@ (80015c4 <MX_GPIO_Init+0x1bc>)
 80015a4:	f000 fcd2 	bl	8001f4c <HAL_GPIO_Init>

}
 80015a8:	bf00      	nop
 80015aa:	3730      	adds	r7, #48	@ 0x30
 80015ac:	46bd      	mov	sp, r7
 80015ae:	bd80      	pop	{r7, pc}
 80015b0:	40023800 	.word	0x40023800
 80015b4:	40021000 	.word	0x40021000
 80015b8:	40020800 	.word	0x40020800
 80015bc:	40021800 	.word	0x40021800
 80015c0:	40020000 	.word	0x40020000
 80015c4:	40020c00 	.word	0x40020c00

080015c8 <intialize7Seg>:
/**
 * @brief  	Init led 7 segment
 * @param  	None
 * @retval 	None
 */
void intialize7Seg() {
 80015c8:	b580      	push	{r7, lr}
 80015ca:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(LD_LATCH_GPIO_Port, LD_LATCH_Pin, 1);
 80015cc:	2201      	movs	r2, #1
 80015ce:	2140      	movs	r1, #64	@ 0x40
 80015d0:	4802      	ldr	r0, [pc, #8]	@ (80015dc <intialize7Seg+0x14>)
 80015d2:	f000 fe57 	bl	8002284 <HAL_GPIO_WritePin>
}
 80015d6:	bf00      	nop
 80015d8:	bd80      	pop	{r7, pc}
 80015da:	bf00      	nop
 80015dc:	40021800 	.word	0x40021800

080015e0 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015e0:	b580      	push	{r7, lr}
 80015e2:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015e4:	f000 fb0a 	bl	8001bfc <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015e8:	f000 f82e 	bl	8001648 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015ec:	f7ff ff0c 	bl	8001408 <MX_GPIO_Init>
  MX_TIM2_Init();
 80015f0:	f000 fa68 	bl	8001ac4 <MX_TIM2_Init>
  MX_FSMC_Init();
 80015f4:	f7ff fe38 	bl	8001268 <MX_FSMC_Init>
  MX_SPI1_Init();
 80015f8:	f000 f972 	bl	80018e0 <MX_SPI1_Init>
  /* USER CODE BEGIN 2 */

  systemInit();
 80015fc:	f000 f898 	bl	8001730 <systemInit>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  if(getFlagTimer2())
 8001600:	f000 f928 	bl	8001854 <getFlagTimer2>
 8001604:	4603      	mov	r3, r0
 8001606:	2b00      	cmp	r3, #0
 8001608:	d0fa      	beq.n	8001600 <main+0x20>
	  {
		  setTimer2(50);
 800160a:	2032      	movs	r0, #50	@ 0x32
 800160c:	f000 f92e 	bl	800186c <setTimer2>

		  button_scan();
 8001610:	f7ff fdbe 	bl	8001190 <button_scan>

		  if(button_count[0] % 40 == 1)
 8001614:	4b0a      	ldr	r3, [pc, #40]	@ (8001640 <main+0x60>)
 8001616:	881a      	ldrh	r2, [r3, #0]
 8001618:	4b0a      	ldr	r3, [pc, #40]	@ (8001644 <main+0x64>)
 800161a:	fba3 1302 	umull	r1, r3, r3, r2
 800161e:	0959      	lsrs	r1, r3, #5
 8001620:	460b      	mov	r3, r1
 8001622:	009b      	lsls	r3, r3, #2
 8001624:	440b      	add	r3, r1
 8001626:	00db      	lsls	r3, r3, #3
 8001628:	1ad3      	subs	r3, r2, r3
 800162a:	b29b      	uxth	r3, r3
 800162c:	2b01      	cmp	r3, #1
 800162e:	d101      	bne.n	8001634 <main+0x54>
		  {
			  debugProgram();
 8001630:	f000 f874 	bl	800171c <debugProgram>
		  }

		  TestButtonMatrix();
 8001634:	f000 f88c 	bl	8001750 <TestButtonMatrix>
		  TestLcd();
 8001638:	f000 f8b2 	bl	80017a0 <TestLcd>
	  if(getFlagTimer2())
 800163c:	e7e0      	b.n	8001600 <main+0x20>
 800163e:	bf00      	nop
 8001640:	20000030 	.word	0x20000030
 8001644:	cccccccd 	.word	0xcccccccd

08001648 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001648:	b580      	push	{r7, lr}
 800164a:	b094      	sub	sp, #80	@ 0x50
 800164c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800164e:	f107 0320 	add.w	r3, r7, #32
 8001652:	2230      	movs	r2, #48	@ 0x30
 8001654:	2100      	movs	r1, #0
 8001656:	4618      	mov	r0, r3
 8001658:	f002 fc96 	bl	8003f88 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800165c:	f107 030c 	add.w	r3, r7, #12
 8001660:	2200      	movs	r2, #0
 8001662:	601a      	str	r2, [r3, #0]
 8001664:	605a      	str	r2, [r3, #4]
 8001666:	609a      	str	r2, [r3, #8]
 8001668:	60da      	str	r2, [r3, #12]
 800166a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800166c:	2300      	movs	r3, #0
 800166e:	60bb      	str	r3, [r7, #8]
 8001670:	4b28      	ldr	r3, [pc, #160]	@ (8001714 <SystemClock_Config+0xcc>)
 8001672:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001674:	4a27      	ldr	r2, [pc, #156]	@ (8001714 <SystemClock_Config+0xcc>)
 8001676:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800167a:	6413      	str	r3, [r2, #64]	@ 0x40
 800167c:	4b25      	ldr	r3, [pc, #148]	@ (8001714 <SystemClock_Config+0xcc>)
 800167e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001680:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001684:	60bb      	str	r3, [r7, #8]
 8001686:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001688:	2300      	movs	r3, #0
 800168a:	607b      	str	r3, [r7, #4]
 800168c:	4b22      	ldr	r3, [pc, #136]	@ (8001718 <SystemClock_Config+0xd0>)
 800168e:	681b      	ldr	r3, [r3, #0]
 8001690:	4a21      	ldr	r2, [pc, #132]	@ (8001718 <SystemClock_Config+0xd0>)
 8001692:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001696:	6013      	str	r3, [r2, #0]
 8001698:	4b1f      	ldr	r3, [pc, #124]	@ (8001718 <SystemClock_Config+0xd0>)
 800169a:	681b      	ldr	r3, [r3, #0]
 800169c:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016a0:	607b      	str	r3, [r7, #4]
 80016a2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80016a4:	2302      	movs	r3, #2
 80016a6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80016a8:	2301      	movs	r3, #1
 80016aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80016ac:	2310      	movs	r3, #16
 80016ae:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80016b0:	2302      	movs	r3, #2
 80016b2:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80016b4:	2300      	movs	r3, #0
 80016b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80016b8:	2308      	movs	r3, #8
 80016ba:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 168;
 80016bc:	23a8      	movs	r3, #168	@ 0xa8
 80016be:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80016c0:	2302      	movs	r3, #2
 80016c2:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80016c4:	2304      	movs	r3, #4
 80016c6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80016c8:	f107 0320 	add.w	r3, r7, #32
 80016cc:	4618      	mov	r0, r3
 80016ce:	f000 fe0d 	bl	80022ec <HAL_RCC_OscConfig>
 80016d2:	4603      	mov	r3, r0
 80016d4:	2b00      	cmp	r3, #0
 80016d6:	d001      	beq.n	80016dc <SystemClock_Config+0x94>
  {
    Error_Handler();
 80016d8:	f000 f8ac 	bl	8001834 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80016dc:	230f      	movs	r3, #15
 80016de:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80016e0:	2302      	movs	r3, #2
 80016e2:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80016e4:	2300      	movs	r3, #0
 80016e6:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80016e8:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016ec:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80016ee:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 80016f2:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80016f4:	f107 030c 	add.w	r3, r7, #12
 80016f8:	2105      	movs	r1, #5
 80016fa:	4618      	mov	r0, r3
 80016fc:	f001 f86e 	bl	80027dc <HAL_RCC_ClockConfig>
 8001700:	4603      	mov	r3, r0
 8001702:	2b00      	cmp	r3, #0
 8001704:	d001      	beq.n	800170a <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001706:	f000 f895 	bl	8001834 <Error_Handler>
  }
}
 800170a:	bf00      	nop
 800170c:	3750      	adds	r7, #80	@ 0x50
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	40023800 	.word	0x40023800
 8001718:	40007000 	.word	0x40007000

0800171c <debugProgram>:

/* USER CODE BEGIN 4 */

void debugProgram()
{
 800171c:	b580      	push	{r7, lr}
 800171e:	af00      	add	r7, sp, #0
	HAL_GPIO_TogglePin(LED_DEBUG_GPIO_Port, LED_DEBUG_Pin);
 8001720:	2110      	movs	r1, #16
 8001722:	4802      	ldr	r0, [pc, #8]	@ (800172c <debugProgram+0x10>)
 8001724:	f000 fdc7 	bl	80022b6 <HAL_GPIO_TogglePin>
}
 8001728:	bf00      	nop
 800172a:	bd80      	pop	{r7, pc}
 800172c:	40021000 	.word	0x40021000

08001730 <systemInit>:
void systemInit()
{
 8001730:	b580      	push	{r7, lr}
 8001732:	af00      	add	r7, sp, #0
	initializeTimer2();
 8001734:	f000 f884 	bl	8001840 <initializeTimer2>
	setTimer2(1000);
 8001738:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 800173c:	f000 f896 	bl	800186c <setTimer2>

	intialize7Seg();
 8001740:	f7ff ff42 	bl	80015c8 <intialize7Seg>
	initializeButton();
 8001744:	f7ff fd18 	bl	8001178 <initializeButton>
	initializeLCD();
 8001748:	f7ff fa28 	bl	8000b9c <initializeLCD>
}
 800174c:	bf00      	nop
 800174e:	bd80      	pop	{r7, pc}

08001750 <TestButtonMatrix>:
		return 1;
	}
	return 0;
}

void TestButtonMatrix() {
 8001750:	b580      	push	{r7, lr}
 8001752:	b086      	sub	sp, #24
 8001754:	af04      	add	r7, sp, #16
	for (int i = 0; i < 16; i++) {
 8001756:	2300      	movs	r3, #0
 8001758:	607b      	str	r3, [r7, #4]
 800175a:	e017      	b.n	800178c <TestButtonMatrix+0x3c>
		if (button_count[i] != 0) {
 800175c:	4a0f      	ldr	r2, [pc, #60]	@ (800179c <TestButtonMatrix+0x4c>)
 800175e:	687b      	ldr	r3, [r7, #4]
 8001760:	f832 3013 	ldrh.w	r3, [r2, r3, lsl #1]
 8001764:	2b00      	cmp	r3, #0
 8001766:	d00e      	beq.n	8001786 <TestButtonMatrix+0x36>
			lcd_show_int_num(140, 105, i, 2, BRED, WHITE, 32);
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	b29a      	uxth	r2, r3
 800176c:	2320      	movs	r3, #32
 800176e:	9302      	str	r3, [sp, #8]
 8001770:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8001774:	9301      	str	r3, [sp, #4]
 8001776:	f64f 031f 	movw	r3, #63519	@ 0xf81f
 800177a:	9300      	str	r3, [sp, #0]
 800177c:	2302      	movs	r3, #2
 800177e:	2169      	movs	r1, #105	@ 0x69
 8001780:	208c      	movs	r0, #140	@ 0x8c
 8001782:	f7ff f913 	bl	80009ac <lcd_show_int_num>
	for (int i = 0; i < 16; i++) {
 8001786:	687b      	ldr	r3, [r7, #4]
 8001788:	3301      	adds	r3, #1
 800178a:	607b      	str	r3, [r7, #4]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	2b0f      	cmp	r3, #15
 8001790:	dde4      	ble.n	800175c <TestButtonMatrix+0xc>
		}
	}
}
 8001792:	bf00      	nop
 8001794:	bf00      	nop
 8001796:	3708      	adds	r7, #8
 8001798:	46bd      	mov	sp, r7
 800179a:	bd80      	pop	{r7, pc}
 800179c:	20000030 	.word	0x20000030

080017a0 <TestLcd>:
void TestLcd() {
 80017a0:	b580      	push	{r7, lr}
 80017a2:	b084      	sub	sp, #16
 80017a4:	af04      	add	r7, sp, #16
	lcd_fill(0, 0, 240, 20, BLUE);
 80017a6:	231f      	movs	r3, #31
 80017a8:	9300      	str	r3, [sp, #0]
 80017aa:	2314      	movs	r3, #20
 80017ac:	22f0      	movs	r2, #240	@ 0xf0
 80017ae:	2100      	movs	r1, #0
 80017b0:	2000      	movs	r0, #0
 80017b2:	f7fe ff07 	bl	80005c4 <lcd_fill>
	lcd_show_string_center(0, 2, "Hello World !!!", RED, BLUE, 16, 1);
 80017b6:	2301      	movs	r3, #1
 80017b8:	9302      	str	r3, [sp, #8]
 80017ba:	2310      	movs	r3, #16
 80017bc:	9301      	str	r3, [sp, #4]
 80017be:	231f      	movs	r3, #31
 80017c0:	9300      	str	r3, [sp, #0]
 80017c2:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80017c6:	4a18      	ldr	r2, [pc, #96]	@ (8001828 <TestLcd+0x88>)
 80017c8:	2102      	movs	r1, #2
 80017ca:	2000      	movs	r0, #0
 80017cc:	f7ff fca2 	bl	8001114 <lcd_show_string_center>
	lcd_show_string(20, 30, "Test LCD Screen", WHITE, RED, 24, 0);
 80017d0:	2300      	movs	r3, #0
 80017d2:	9302      	str	r3, [sp, #8]
 80017d4:	2318      	movs	r3, #24
 80017d6:	9301      	str	r3, [sp, #4]
 80017d8:	f44f 4378 	mov.w	r3, #63488	@ 0xf800
 80017dc:	9300      	str	r3, [sp, #0]
 80017de:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 80017e2:	4a12      	ldr	r2, [pc, #72]	@ (800182c <TestLcd+0x8c>)
 80017e4:	211e      	movs	r1, #30
 80017e6:	2014      	movs	r0, #20
 80017e8:	f7ff fc30 	bl	800104c <lcd_show_string>
	lcd_draw_rectangle(20, 80, 100, 160, GREEN);
 80017ec:	f44f 63fc 	mov.w	r3, #2016	@ 0x7e0
 80017f0:	9300      	str	r3, [sp, #0]
 80017f2:	23a0      	movs	r3, #160	@ 0xa0
 80017f4:	2264      	movs	r2, #100	@ 0x64
 80017f6:	2150      	movs	r1, #80	@ 0x50
 80017f8:	2014      	movs	r0, #20
 80017fa:	f7fe ffb4 	bl	8000766 <lcd_draw_rectangle>
	lcd_draw_circle(160, 120, BRED, 40, 0);
 80017fe:	2300      	movs	r3, #0
 8001800:	9300      	str	r3, [sp, #0]
 8001802:	2328      	movs	r3, #40	@ 0x28
 8001804:	f64f 021f 	movw	r2, #63519	@ 0xf81f
 8001808:	2178      	movs	r1, #120	@ 0x78
 800180a:	20a0      	movs	r0, #160	@ 0xa0
 800180c:	f7ff fbb1 	bl	8000f72 <lcd_draw_circle>
	lcd_show_picture(80, 200, 90, 90, gImageLogo);
 8001810:	4b07      	ldr	r3, [pc, #28]	@ (8001830 <TestLcd+0x90>)
 8001812:	9300      	str	r3, [sp, #0]
 8001814:	235a      	movs	r3, #90	@ 0x5a
 8001816:	225a      	movs	r2, #90	@ 0x5a
 8001818:	21c8      	movs	r1, #200	@ 0xc8
 800181a:	2050      	movs	r0, #80	@ 0x50
 800181c:	f7ff f944 	bl	8000aa8 <lcd_show_picture>
}
 8001820:	bf00      	nop
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	08003ff8 	.word	0x08003ff8
 800182c:	08004008 	.word	0x08004008
 8001830:	08006f98 	.word	0x08006f98

08001834 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001838:	b672      	cpsid	i
}
 800183a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 800183c:	bf00      	nop
 800183e:	e7fd      	b.n	800183c <Error_Handler+0x8>

08001840 <initializeTimer2>:

uint32_t timer2_counter = 0;
uint8_t timer2_flag = 0;

void initializeTimer2(void)
{
 8001840:	b580      	push	{r7, lr}
 8001842:	af00      	add	r7, sp, #0
	HAL_TIM_Base_Start_IT(&htim2);
 8001844:	4802      	ldr	r0, [pc, #8]	@ (8001850 <initializeTimer2+0x10>)
 8001846:	f001 fea1 	bl	800358c <HAL_TIM_Base_Start_IT>
}
 800184a:	bf00      	nop
 800184c:	bd80      	pop	{r7, pc}
 800184e:	bf00      	nop
 8001850:	20000108 	.word	0x20000108

08001854 <getFlagTimer2>:

uint8_t getFlagTimer2(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
	return timer2_flag;
 8001858:	4b03      	ldr	r3, [pc, #12]	@ (8001868 <getFlagTimer2+0x14>)
 800185a:	781b      	ldrb	r3, [r3, #0]
}
 800185c:	4618      	mov	r0, r3
 800185e:	46bd      	mov	sp, r7
 8001860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001864:	4770      	bx	lr
 8001866:	bf00      	nop
 8001868:	200000ac 	.word	0x200000ac

0800186c <setTimer2>:

void setTimer2(uint32_t duration)
{
 800186c:	b480      	push	{r7}
 800186e:	b083      	sub	sp, #12
 8001870:	af00      	add	r7, sp, #0
 8001872:	6078      	str	r0, [r7, #4]
	timer2_counter = duration;
 8001874:	4a05      	ldr	r2, [pc, #20]	@ (800188c <setTimer2+0x20>)
 8001876:	687b      	ldr	r3, [r7, #4]
 8001878:	6013      	str	r3, [r2, #0]
	timer2_flag = 0;
 800187a:	4b05      	ldr	r3, [pc, #20]	@ (8001890 <setTimer2+0x24>)
 800187c:	2200      	movs	r2, #0
 800187e:	701a      	strb	r2, [r3, #0]
}
 8001880:	bf00      	nop
 8001882:	370c      	adds	r7, #12
 8001884:	46bd      	mov	sp, r7
 8001886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800188a:	4770      	bx	lr
 800188c:	200000a8 	.word	0x200000a8
 8001890:	200000ac 	.word	0x200000ac

08001894 <timerRun>:

void timerRun()
{
 8001894:	b480      	push	{r7}
 8001896:	af00      	add	r7, sp, #0
	if(timer2_counter > 0)
 8001898:	4b0a      	ldr	r3, [pc, #40]	@ (80018c4 <timerRun+0x30>)
 800189a:	681b      	ldr	r3, [r3, #0]
 800189c:	2b00      	cmp	r3, #0
 800189e:	d004      	beq.n	80018aa <timerRun+0x16>
	{
		--timer2_counter;
 80018a0:	4b08      	ldr	r3, [pc, #32]	@ (80018c4 <timerRun+0x30>)
 80018a2:	681b      	ldr	r3, [r3, #0]
 80018a4:	3b01      	subs	r3, #1
 80018a6:	4a07      	ldr	r2, [pc, #28]	@ (80018c4 <timerRun+0x30>)
 80018a8:	6013      	str	r3, [r2, #0]
	}
	if(timer2_counter <= 0)
 80018aa:	4b06      	ldr	r3, [pc, #24]	@ (80018c4 <timerRun+0x30>)
 80018ac:	681b      	ldr	r3, [r3, #0]
 80018ae:	2b00      	cmp	r3, #0
 80018b0:	d102      	bne.n	80018b8 <timerRun+0x24>
	{
		timer2_flag = 1;
 80018b2:	4b05      	ldr	r3, [pc, #20]	@ (80018c8 <timerRun+0x34>)
 80018b4:	2201      	movs	r2, #1
 80018b6:	701a      	strb	r2, [r3, #0]
	}
}
 80018b8:	bf00      	nop
 80018ba:	46bd      	mov	sp, r7
 80018bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018c0:	4770      	bx	lr
 80018c2:	bf00      	nop
 80018c4:	200000a8 	.word	0x200000a8
 80018c8:	200000ac 	.word	0x200000ac

080018cc <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80018cc:	b580      	push	{r7, lr}
 80018ce:	b082      	sub	sp, #8
 80018d0:	af00      	add	r7, sp, #0
 80018d2:	6078      	str	r0, [r7, #4]
	timerRun();
 80018d4:	f7ff ffde 	bl	8001894 <timerRun>
}
 80018d8:	bf00      	nop
 80018da:	3708      	adds	r7, #8
 80018dc:	46bd      	mov	sp, r7
 80018de:	bd80      	pop	{r7, pc}

080018e0 <MX_SPI1_Init>:

SPI_HandleTypeDef hspi1;

/* SPI1 init function */
void MX_SPI1_Init(void)
{
 80018e0:	b580      	push	{r7, lr}
 80018e2:	af00      	add	r7, sp, #0
  /* USER CODE END SPI1_Init 0 */

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  hspi1.Instance = SPI1;
 80018e4:	4b17      	ldr	r3, [pc, #92]	@ (8001944 <MX_SPI1_Init+0x64>)
 80018e6:	4a18      	ldr	r2, [pc, #96]	@ (8001948 <MX_SPI1_Init+0x68>)
 80018e8:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80018ea:	4b16      	ldr	r3, [pc, #88]	@ (8001944 <MX_SPI1_Init+0x64>)
 80018ec:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80018f0:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80018f2:	4b14      	ldr	r3, [pc, #80]	@ (8001944 <MX_SPI1_Init+0x64>)
 80018f4:	2200      	movs	r2, #0
 80018f6:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 80018f8:	4b12      	ldr	r3, [pc, #72]	@ (8001944 <MX_SPI1_Init+0x64>)
 80018fa:	2200      	movs	r2, #0
 80018fc:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 80018fe:	4b11      	ldr	r3, [pc, #68]	@ (8001944 <MX_SPI1_Init+0x64>)
 8001900:	2200      	movs	r2, #0
 8001902:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001904:	4b0f      	ldr	r3, [pc, #60]	@ (8001944 <MX_SPI1_Init+0x64>)
 8001906:	2200      	movs	r2, #0
 8001908:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 800190a:	4b0e      	ldr	r3, [pc, #56]	@ (8001944 <MX_SPI1_Init+0x64>)
 800190c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001910:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8001912:	4b0c      	ldr	r3, [pc, #48]	@ (8001944 <MX_SPI1_Init+0x64>)
 8001914:	2200      	movs	r2, #0
 8001916:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001918:	4b0a      	ldr	r3, [pc, #40]	@ (8001944 <MX_SPI1_Init+0x64>)
 800191a:	2200      	movs	r2, #0
 800191c:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 800191e:	4b09      	ldr	r3, [pc, #36]	@ (8001944 <MX_SPI1_Init+0x64>)
 8001920:	2200      	movs	r2, #0
 8001922:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001924:	4b07      	ldr	r3, [pc, #28]	@ (8001944 <MX_SPI1_Init+0x64>)
 8001926:	2200      	movs	r2, #0
 8001928:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 800192a:	4b06      	ldr	r3, [pc, #24]	@ (8001944 <MX_SPI1_Init+0x64>)
 800192c:	220a      	movs	r2, #10
 800192e:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001930:	4804      	ldr	r0, [pc, #16]	@ (8001944 <MX_SPI1_Init+0x64>)
 8001932:	f001 f8ff 	bl	8002b34 <HAL_SPI_Init>
 8001936:	4603      	mov	r3, r0
 8001938:	2b00      	cmp	r3, #0
 800193a:	d001      	beq.n	8001940 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 800193c:	f7ff ff7a 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001940:	bf00      	nop
 8001942:	bd80      	pop	{r7, pc}
 8001944:	200000b0 	.word	0x200000b0
 8001948:	40013000 	.word	0x40013000

0800194c <HAL_SPI_MspInit>:

void HAL_SPI_MspInit(SPI_HandleTypeDef* spiHandle)
{
 800194c:	b580      	push	{r7, lr}
 800194e:	b08a      	sub	sp, #40	@ 0x28
 8001950:	af00      	add	r7, sp, #0
 8001952:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001954:	f107 0314 	add.w	r3, r7, #20
 8001958:	2200      	movs	r2, #0
 800195a:	601a      	str	r2, [r3, #0]
 800195c:	605a      	str	r2, [r3, #4]
 800195e:	609a      	str	r2, [r3, #8]
 8001960:	60da      	str	r2, [r3, #12]
 8001962:	611a      	str	r2, [r3, #16]
  if(spiHandle->Instance==SPI1)
 8001964:	687b      	ldr	r3, [r7, #4]
 8001966:	681b      	ldr	r3, [r3, #0]
 8001968:	4a19      	ldr	r2, [pc, #100]	@ (80019d0 <HAL_SPI_MspInit+0x84>)
 800196a:	4293      	cmp	r3, r2
 800196c:	d12b      	bne.n	80019c6 <HAL_SPI_MspInit+0x7a>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* SPI1 clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800196e:	2300      	movs	r3, #0
 8001970:	613b      	str	r3, [r7, #16]
 8001972:	4b18      	ldr	r3, [pc, #96]	@ (80019d4 <HAL_SPI_MspInit+0x88>)
 8001974:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001976:	4a17      	ldr	r2, [pc, #92]	@ (80019d4 <HAL_SPI_MspInit+0x88>)
 8001978:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800197c:	6453      	str	r3, [r2, #68]	@ 0x44
 800197e:	4b15      	ldr	r3, [pc, #84]	@ (80019d4 <HAL_SPI_MspInit+0x88>)
 8001980:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001982:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8001986:	613b      	str	r3, [r7, #16]
 8001988:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800198a:	2300      	movs	r3, #0
 800198c:	60fb      	str	r3, [r7, #12]
 800198e:	4b11      	ldr	r3, [pc, #68]	@ (80019d4 <HAL_SPI_MspInit+0x88>)
 8001990:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001992:	4a10      	ldr	r2, [pc, #64]	@ (80019d4 <HAL_SPI_MspInit+0x88>)
 8001994:	f043 0302 	orr.w	r3, r3, #2
 8001998:	6313      	str	r3, [r2, #48]	@ 0x30
 800199a:	4b0e      	ldr	r3, [pc, #56]	@ (80019d4 <HAL_SPI_MspInit+0x88>)
 800199c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800199e:	f003 0302 	and.w	r3, r3, #2
 80019a2:	60fb      	str	r3, [r7, #12]
 80019a4:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PB3     ------> SPI1_SCK
    PB4     ------> SPI1_MISO
    PB5     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_3|GPIO_PIN_4|GPIO_PIN_5;
 80019a6:	2338      	movs	r3, #56	@ 0x38
 80019a8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80019aa:	2302      	movs	r3, #2
 80019ac:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80019ae:	2300      	movs	r3, #0
 80019b0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80019b2:	2303      	movs	r3, #3
 80019b4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 80019b6:	2305      	movs	r3, #5
 80019b8:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80019ba:	f107 0314 	add.w	r3, r7, #20
 80019be:	4619      	mov	r1, r3
 80019c0:	4805      	ldr	r0, [pc, #20]	@ (80019d8 <HAL_SPI_MspInit+0x8c>)
 80019c2:	f000 fac3 	bl	8001f4c <HAL_GPIO_Init>

  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }
}
 80019c6:	bf00      	nop
 80019c8:	3728      	adds	r7, #40	@ 0x28
 80019ca:	46bd      	mov	sp, r7
 80019cc:	bd80      	pop	{r7, pc}
 80019ce:	bf00      	nop
 80019d0:	40013000 	.word	0x40013000
 80019d4:	40023800 	.word	0x40023800
 80019d8:	40020400 	.word	0x40020400

080019dc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80019dc:	b480      	push	{r7}
 80019de:	b083      	sub	sp, #12
 80019e0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80019e2:	2300      	movs	r3, #0
 80019e4:	607b      	str	r3, [r7, #4]
 80019e6:	4b10      	ldr	r3, [pc, #64]	@ (8001a28 <HAL_MspInit+0x4c>)
 80019e8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019ea:	4a0f      	ldr	r2, [pc, #60]	@ (8001a28 <HAL_MspInit+0x4c>)
 80019ec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80019f0:	6453      	str	r3, [r2, #68]	@ 0x44
 80019f2:	4b0d      	ldr	r3, [pc, #52]	@ (8001a28 <HAL_MspInit+0x4c>)
 80019f4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80019f6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80019fa:	607b      	str	r3, [r7, #4]
 80019fc:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80019fe:	2300      	movs	r3, #0
 8001a00:	603b      	str	r3, [r7, #0]
 8001a02:	4b09      	ldr	r3, [pc, #36]	@ (8001a28 <HAL_MspInit+0x4c>)
 8001a04:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a06:	4a08      	ldr	r2, [pc, #32]	@ (8001a28 <HAL_MspInit+0x4c>)
 8001a08:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001a0c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001a0e:	4b06      	ldr	r3, [pc, #24]	@ (8001a28 <HAL_MspInit+0x4c>)
 8001a10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001a12:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001a16:	603b      	str	r3, [r7, #0]
 8001a18:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001a1a:	bf00      	nop
 8001a1c:	370c      	adds	r7, #12
 8001a1e:	46bd      	mov	sp, r7
 8001a20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a24:	4770      	bx	lr
 8001a26:	bf00      	nop
 8001a28:	40023800 	.word	0x40023800

08001a2c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001a2c:	b480      	push	{r7}
 8001a2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001a30:	bf00      	nop
 8001a32:	e7fd      	b.n	8001a30 <NMI_Handler+0x4>

08001a34 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001a38:	bf00      	nop
 8001a3a:	e7fd      	b.n	8001a38 <HardFault_Handler+0x4>

08001a3c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001a3c:	b480      	push	{r7}
 8001a3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001a40:	bf00      	nop
 8001a42:	e7fd      	b.n	8001a40 <MemManage_Handler+0x4>

08001a44 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001a44:	b480      	push	{r7}
 8001a46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001a48:	bf00      	nop
 8001a4a:	e7fd      	b.n	8001a48 <BusFault_Handler+0x4>

08001a4c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001a4c:	b480      	push	{r7}
 8001a4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001a50:	bf00      	nop
 8001a52:	e7fd      	b.n	8001a50 <UsageFault_Handler+0x4>

08001a54 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8001a54:	b480      	push	{r7}
 8001a56:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001a58:	bf00      	nop
 8001a5a:	46bd      	mov	sp, r7
 8001a5c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a60:	4770      	bx	lr

08001a62 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8001a62:	b480      	push	{r7}
 8001a64:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8001a66:	bf00      	nop
 8001a68:	46bd      	mov	sp, r7
 8001a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a6e:	4770      	bx	lr

08001a70 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001a70:	b480      	push	{r7}
 8001a72:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8001a74:	bf00      	nop
 8001a76:	46bd      	mov	sp, r7
 8001a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a7c:	4770      	bx	lr

08001a7e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001a7e:	b580      	push	{r7, lr}
 8001a80:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8001a82:	f000 f90d 	bl	8001ca0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8001a86:	bf00      	nop
 8001a88:	bd80      	pop	{r7, pc}
	...

08001a8c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8001a8c:	b580      	push	{r7, lr}
 8001a8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8001a90:	4802      	ldr	r0, [pc, #8]	@ (8001a9c <TIM2_IRQHandler+0x10>)
 8001a92:	f001 fdeb 	bl	800366c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8001a96:	bf00      	nop
 8001a98:	bd80      	pop	{r7, pc}
 8001a9a:	bf00      	nop
 8001a9c:	20000108 	.word	0x20000108

08001aa0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001aa0:	b480      	push	{r7}
 8001aa2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001aa4:	4b06      	ldr	r3, [pc, #24]	@ (8001ac0 <SystemInit+0x20>)
 8001aa6:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001aaa:	4a05      	ldr	r2, [pc, #20]	@ (8001ac0 <SystemInit+0x20>)
 8001aac:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001ab0:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001ab4:	bf00      	nop
 8001ab6:	46bd      	mov	sp, r7
 8001ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001abc:	4770      	bx	lr
 8001abe:	bf00      	nop
 8001ac0:	e000ed00 	.word	0xe000ed00

08001ac4 <MX_TIM2_Init>:

TIM_HandleTypeDef htim2;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 8001ac4:	b580      	push	{r7, lr}
 8001ac6:	b086      	sub	sp, #24
 8001ac8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001aca:	f107 0308 	add.w	r3, r7, #8
 8001ace:	2200      	movs	r2, #0
 8001ad0:	601a      	str	r2, [r3, #0]
 8001ad2:	605a      	str	r2, [r3, #4]
 8001ad4:	609a      	str	r2, [r3, #8]
 8001ad6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001ad8:	463b      	mov	r3, r7
 8001ada:	2200      	movs	r2, #0
 8001adc:	601a      	str	r2, [r3, #0]
 8001ade:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001ae0:	4b1d      	ldr	r3, [pc, #116]	@ (8001b58 <MX_TIM2_Init+0x94>)
 8001ae2:	f04f 4280 	mov.w	r2, #1073741824	@ 0x40000000
 8001ae6:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 16800-1;
 8001ae8:	4b1b      	ldr	r3, [pc, #108]	@ (8001b58 <MX_TIM2_Init+0x94>)
 8001aea:	f244 129f 	movw	r2, #16799	@ 0x419f
 8001aee:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001af0:	4b19      	ldr	r3, [pc, #100]	@ (8001b58 <MX_TIM2_Init+0x94>)
 8001af2:	2200      	movs	r2, #0
 8001af4:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 10-1;
 8001af6:	4b18      	ldr	r3, [pc, #96]	@ (8001b58 <MX_TIM2_Init+0x94>)
 8001af8:	2209      	movs	r2, #9
 8001afa:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001afc:	4b16      	ldr	r3, [pc, #88]	@ (8001b58 <MX_TIM2_Init+0x94>)
 8001afe:	2200      	movs	r2, #0
 8001b00:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001b02:	4b15      	ldr	r3, [pc, #84]	@ (8001b58 <MX_TIM2_Init+0x94>)
 8001b04:	2200      	movs	r2, #0
 8001b06:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001b08:	4813      	ldr	r0, [pc, #76]	@ (8001b58 <MX_TIM2_Init+0x94>)
 8001b0a:	f001 fcef 	bl	80034ec <HAL_TIM_Base_Init>
 8001b0e:	4603      	mov	r3, r0
 8001b10:	2b00      	cmp	r3, #0
 8001b12:	d001      	beq.n	8001b18 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001b14:	f7ff fe8e 	bl	8001834 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001b18:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001b1c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001b1e:	f107 0308 	add.w	r3, r7, #8
 8001b22:	4619      	mov	r1, r3
 8001b24:	480c      	ldr	r0, [pc, #48]	@ (8001b58 <MX_TIM2_Init+0x94>)
 8001b26:	f001 fe91 	bl	800384c <HAL_TIM_ConfigClockSource>
 8001b2a:	4603      	mov	r3, r0
 8001b2c:	2b00      	cmp	r3, #0
 8001b2e:	d001      	beq.n	8001b34 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 8001b30:	f7ff fe80 	bl	8001834 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001b34:	2300      	movs	r3, #0
 8001b36:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001b38:	2300      	movs	r3, #0
 8001b3a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001b3c:	463b      	mov	r3, r7
 8001b3e:	4619      	mov	r1, r3
 8001b40:	4805      	ldr	r0, [pc, #20]	@ (8001b58 <MX_TIM2_Init+0x94>)
 8001b42:	f002 f8b9 	bl	8003cb8 <HAL_TIMEx_MasterConfigSynchronization>
 8001b46:	4603      	mov	r3, r0
 8001b48:	2b00      	cmp	r3, #0
 8001b4a:	d001      	beq.n	8001b50 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 8001b4c:	f7ff fe72 	bl	8001834 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8001b50:	bf00      	nop
 8001b52:	3718      	adds	r7, #24
 8001b54:	46bd      	mov	sp, r7
 8001b56:	bd80      	pop	{r7, pc}
 8001b58:	20000108 	.word	0x20000108

08001b5c <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 8001b5c:	b580      	push	{r7, lr}
 8001b5e:	b084      	sub	sp, #16
 8001b60:	af00      	add	r7, sp, #0
 8001b62:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM2)
 8001b64:	687b      	ldr	r3, [r7, #4]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8001b6c:	d115      	bne.n	8001b9a <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8001b6e:	2300      	movs	r3, #0
 8001b70:	60fb      	str	r3, [r7, #12]
 8001b72:	4b0c      	ldr	r3, [pc, #48]	@ (8001ba4 <HAL_TIM_Base_MspInit+0x48>)
 8001b74:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b76:	4a0b      	ldr	r2, [pc, #44]	@ (8001ba4 <HAL_TIM_Base_MspInit+0x48>)
 8001b78:	f043 0301 	orr.w	r3, r3, #1
 8001b7c:	6413      	str	r3, [r2, #64]	@ 0x40
 8001b7e:	4b09      	ldr	r3, [pc, #36]	@ (8001ba4 <HAL_TIM_Base_MspInit+0x48>)
 8001b80:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001b82:	f003 0301 	and.w	r3, r3, #1
 8001b86:	60fb      	str	r3, [r7, #12]
 8001b88:	68fb      	ldr	r3, [r7, #12]

    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8001b8a:	2200      	movs	r2, #0
 8001b8c:	2100      	movs	r1, #0
 8001b8e:	201c      	movs	r0, #28
 8001b90:	f000 f9a5 	bl	8001ede <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8001b94:	201c      	movs	r0, #28
 8001b96:	f000 f9be 	bl	8001f16 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM2_MspInit 1 */

  /* USER CODE END TIM2_MspInit 1 */
  }
}
 8001b9a:	bf00      	nop
 8001b9c:	3710      	adds	r7, #16
 8001b9e:	46bd      	mov	sp, r7
 8001ba0:	bd80      	pop	{r7, pc}
 8001ba2:	bf00      	nop
 8001ba4:	40023800 	.word	0x40023800

08001ba8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8001ba8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001be0 <LoopFillZerobss+0xe>
  
/* Call the clock system initialization function.*/
  bl  SystemInit  
 8001bac:	f7ff ff78 	bl	8001aa0 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001bb0:	480c      	ldr	r0, [pc, #48]	@ (8001be4 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001bb2:	490d      	ldr	r1, [pc, #52]	@ (8001be8 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001bb4:	4a0d      	ldr	r2, [pc, #52]	@ (8001bec <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001bb6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001bb8:	e002      	b.n	8001bc0 <LoopCopyDataInit>

08001bba <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001bba:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001bbc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001bbe:	3304      	adds	r3, #4

08001bc0 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001bc0:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001bc2:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001bc4:	d3f9      	bcc.n	8001bba <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001bc6:	4a0a      	ldr	r2, [pc, #40]	@ (8001bf0 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001bc8:	4c0a      	ldr	r4, [pc, #40]	@ (8001bf4 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001bca:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001bcc:	e001      	b.n	8001bd2 <LoopFillZerobss>

08001bce <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001bce:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001bd0:	3204      	adds	r2, #4

08001bd2 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001bd2:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001bd4:	d3fb      	bcc.n	8001bce <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001bd6:	f002 f9df 	bl	8003f98 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001bda:	f7ff fd01 	bl	80015e0 <main>
  bx  lr    
 8001bde:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8001be0:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001be4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001be8:	2000000c 	.word	0x2000000c
  ldr r2, =_sidata
 8001bec:	0800af00 	.word	0x0800af00
  ldr r2, =_sbss
 8001bf0:	2000000c 	.word	0x2000000c
  ldr r4, =_ebss
 8001bf4:	20000154 	.word	0x20000154

08001bf8 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001bf8:	e7fe      	b.n	8001bf8 <ADC_IRQHandler>
	...

08001bfc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001bfc:	b580      	push	{r7, lr}
 8001bfe:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001c00:	4b0e      	ldr	r3, [pc, #56]	@ (8001c3c <HAL_Init+0x40>)
 8001c02:	681b      	ldr	r3, [r3, #0]
 8001c04:	4a0d      	ldr	r2, [pc, #52]	@ (8001c3c <HAL_Init+0x40>)
 8001c06:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001c0a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001c0c:	4b0b      	ldr	r3, [pc, #44]	@ (8001c3c <HAL_Init+0x40>)
 8001c0e:	681b      	ldr	r3, [r3, #0]
 8001c10:	4a0a      	ldr	r2, [pc, #40]	@ (8001c3c <HAL_Init+0x40>)
 8001c12:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001c16:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001c18:	4b08      	ldr	r3, [pc, #32]	@ (8001c3c <HAL_Init+0x40>)
 8001c1a:	681b      	ldr	r3, [r3, #0]
 8001c1c:	4a07      	ldr	r2, [pc, #28]	@ (8001c3c <HAL_Init+0x40>)
 8001c1e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001c22:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001c24:	2003      	movs	r0, #3
 8001c26:	f000 f94f 	bl	8001ec8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001c2a:	200f      	movs	r0, #15
 8001c2c:	f000 f808 	bl	8001c40 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001c30:	f7ff fed4 	bl	80019dc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001c34:	2300      	movs	r3, #0
}
 8001c36:	4618      	mov	r0, r3
 8001c38:	bd80      	pop	{r7, pc}
 8001c3a:	bf00      	nop
 8001c3c:	40023c00 	.word	0x40023c00

08001c40 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001c40:	b580      	push	{r7, lr}
 8001c42:	b082      	sub	sp, #8
 8001c44:	af00      	add	r7, sp, #0
 8001c46:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001c48:	4b12      	ldr	r3, [pc, #72]	@ (8001c94 <HAL_InitTick+0x54>)
 8001c4a:	681a      	ldr	r2, [r3, #0]
 8001c4c:	4b12      	ldr	r3, [pc, #72]	@ (8001c98 <HAL_InitTick+0x58>)
 8001c4e:	781b      	ldrb	r3, [r3, #0]
 8001c50:	4619      	mov	r1, r3
 8001c52:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001c56:	fbb3 f3f1 	udiv	r3, r3, r1
 8001c5a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f000 f967 	bl	8001f32 <HAL_SYSTICK_Config>
 8001c64:	4603      	mov	r3, r0
 8001c66:	2b00      	cmp	r3, #0
 8001c68:	d001      	beq.n	8001c6e <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001c6a:	2301      	movs	r3, #1
 8001c6c:	e00e      	b.n	8001c8c <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001c6e:	687b      	ldr	r3, [r7, #4]
 8001c70:	2b0f      	cmp	r3, #15
 8001c72:	d80a      	bhi.n	8001c8a <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001c74:	2200      	movs	r2, #0
 8001c76:	6879      	ldr	r1, [r7, #4]
 8001c78:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001c7c:	f000 f92f 	bl	8001ede <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001c80:	4a06      	ldr	r2, [pc, #24]	@ (8001c9c <HAL_InitTick+0x5c>)
 8001c82:	687b      	ldr	r3, [r7, #4]
 8001c84:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001c86:	2300      	movs	r3, #0
 8001c88:	e000      	b.n	8001c8c <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001c8a:	2301      	movs	r3, #1
}
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	3708      	adds	r7, #8
 8001c90:	46bd      	mov	sp, r7
 8001c92:	bd80      	pop	{r7, pc}
 8001c94:	20000000 	.word	0x20000000
 8001c98:	20000008 	.word	0x20000008
 8001c9c:	20000004 	.word	0x20000004

08001ca0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ca0:	b480      	push	{r7}
 8001ca2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ca4:	4b06      	ldr	r3, [pc, #24]	@ (8001cc0 <HAL_IncTick+0x20>)
 8001ca6:	781b      	ldrb	r3, [r3, #0]
 8001ca8:	461a      	mov	r2, r3
 8001caa:	4b06      	ldr	r3, [pc, #24]	@ (8001cc4 <HAL_IncTick+0x24>)
 8001cac:	681b      	ldr	r3, [r3, #0]
 8001cae:	4413      	add	r3, r2
 8001cb0:	4a04      	ldr	r2, [pc, #16]	@ (8001cc4 <HAL_IncTick+0x24>)
 8001cb2:	6013      	str	r3, [r2, #0]
}
 8001cb4:	bf00      	nop
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cbc:	4770      	bx	lr
 8001cbe:	bf00      	nop
 8001cc0:	20000008 	.word	0x20000008
 8001cc4:	20000150 	.word	0x20000150

08001cc8 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001cc8:	b480      	push	{r7}
 8001cca:	af00      	add	r7, sp, #0
  return uwTick;
 8001ccc:	4b03      	ldr	r3, [pc, #12]	@ (8001cdc <HAL_GetTick+0x14>)
 8001cce:	681b      	ldr	r3, [r3, #0]
}
 8001cd0:	4618      	mov	r0, r3
 8001cd2:	46bd      	mov	sp, r7
 8001cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cd8:	4770      	bx	lr
 8001cda:	bf00      	nop
 8001cdc:	20000150 	.word	0x20000150

08001ce0 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001ce0:	b580      	push	{r7, lr}
 8001ce2:	b084      	sub	sp, #16
 8001ce4:	af00      	add	r7, sp, #0
 8001ce6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001ce8:	f7ff ffee 	bl	8001cc8 <HAL_GetTick>
 8001cec:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001cee:	687b      	ldr	r3, [r7, #4]
 8001cf0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001cf2:	68fb      	ldr	r3, [r7, #12]
 8001cf4:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8001cf8:	d005      	beq.n	8001d06 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001cfa:	4b0a      	ldr	r3, [pc, #40]	@ (8001d24 <HAL_Delay+0x44>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	461a      	mov	r2, r3
 8001d00:	68fb      	ldr	r3, [r7, #12]
 8001d02:	4413      	add	r3, r2
 8001d04:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001d06:	bf00      	nop
 8001d08:	f7ff ffde 	bl	8001cc8 <HAL_GetTick>
 8001d0c:	4602      	mov	r2, r0
 8001d0e:	68bb      	ldr	r3, [r7, #8]
 8001d10:	1ad3      	subs	r3, r2, r3
 8001d12:	68fa      	ldr	r2, [r7, #12]
 8001d14:	429a      	cmp	r2, r3
 8001d16:	d8f7      	bhi.n	8001d08 <HAL_Delay+0x28>
  {
  }
}
 8001d18:	bf00      	nop
 8001d1a:	bf00      	nop
 8001d1c:	3710      	adds	r7, #16
 8001d1e:	46bd      	mov	sp, r7
 8001d20:	bd80      	pop	{r7, pc}
 8001d22:	bf00      	nop
 8001d24:	20000008 	.word	0x20000008

08001d28 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001d28:	b480      	push	{r7}
 8001d2a:	b085      	sub	sp, #20
 8001d2c:	af00      	add	r7, sp, #0
 8001d2e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001d30:	687b      	ldr	r3, [r7, #4]
 8001d32:	f003 0307 	and.w	r3, r3, #7
 8001d36:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001d38:	4b0c      	ldr	r3, [pc, #48]	@ (8001d6c <__NVIC_SetPriorityGrouping+0x44>)
 8001d3a:	68db      	ldr	r3, [r3, #12]
 8001d3c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001d3e:	68ba      	ldr	r2, [r7, #8]
 8001d40:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001d44:	4013      	ands	r3, r2
 8001d46:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001d48:	68fb      	ldr	r3, [r7, #12]
 8001d4a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001d4c:	68bb      	ldr	r3, [r7, #8]
 8001d4e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001d50:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001d54:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001d58:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001d5a:	4a04      	ldr	r2, [pc, #16]	@ (8001d6c <__NVIC_SetPriorityGrouping+0x44>)
 8001d5c:	68bb      	ldr	r3, [r7, #8]
 8001d5e:	60d3      	str	r3, [r2, #12]
}
 8001d60:	bf00      	nop
 8001d62:	3714      	adds	r7, #20
 8001d64:	46bd      	mov	sp, r7
 8001d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d6a:	4770      	bx	lr
 8001d6c:	e000ed00 	.word	0xe000ed00

08001d70 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001d70:	b480      	push	{r7}
 8001d72:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001d74:	4b04      	ldr	r3, [pc, #16]	@ (8001d88 <__NVIC_GetPriorityGrouping+0x18>)
 8001d76:	68db      	ldr	r3, [r3, #12]
 8001d78:	0a1b      	lsrs	r3, r3, #8
 8001d7a:	f003 0307 	and.w	r3, r3, #7
}
 8001d7e:	4618      	mov	r0, r3
 8001d80:	46bd      	mov	sp, r7
 8001d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001d86:	4770      	bx	lr
 8001d88:	e000ed00 	.word	0xe000ed00

08001d8c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001d8c:	b480      	push	{r7}
 8001d8e:	b083      	sub	sp, #12
 8001d90:	af00      	add	r7, sp, #0
 8001d92:	4603      	mov	r3, r0
 8001d94:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001d96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001d9a:	2b00      	cmp	r3, #0
 8001d9c:	db0b      	blt.n	8001db6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001d9e:	79fb      	ldrb	r3, [r7, #7]
 8001da0:	f003 021f 	and.w	r2, r3, #31
 8001da4:	4907      	ldr	r1, [pc, #28]	@ (8001dc4 <__NVIC_EnableIRQ+0x38>)
 8001da6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001daa:	095b      	lsrs	r3, r3, #5
 8001dac:	2001      	movs	r0, #1
 8001dae:	fa00 f202 	lsl.w	r2, r0, r2
 8001db2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001db6:	bf00      	nop
 8001db8:	370c      	adds	r7, #12
 8001dba:	46bd      	mov	sp, r7
 8001dbc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dc0:	4770      	bx	lr
 8001dc2:	bf00      	nop
 8001dc4:	e000e100 	.word	0xe000e100

08001dc8 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001dc8:	b480      	push	{r7}
 8001dca:	b083      	sub	sp, #12
 8001dcc:	af00      	add	r7, sp, #0
 8001dce:	4603      	mov	r3, r0
 8001dd0:	6039      	str	r1, [r7, #0]
 8001dd2:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001dd4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001dd8:	2b00      	cmp	r3, #0
 8001dda:	db0a      	blt.n	8001df2 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001ddc:	683b      	ldr	r3, [r7, #0]
 8001dde:	b2da      	uxtb	r2, r3
 8001de0:	490c      	ldr	r1, [pc, #48]	@ (8001e14 <__NVIC_SetPriority+0x4c>)
 8001de2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001de6:	0112      	lsls	r2, r2, #4
 8001de8:	b2d2      	uxtb	r2, r2
 8001dea:	440b      	add	r3, r1
 8001dec:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8001df0:	e00a      	b.n	8001e08 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001df2:	683b      	ldr	r3, [r7, #0]
 8001df4:	b2da      	uxtb	r2, r3
 8001df6:	4908      	ldr	r1, [pc, #32]	@ (8001e18 <__NVIC_SetPriority+0x50>)
 8001df8:	79fb      	ldrb	r3, [r7, #7]
 8001dfa:	f003 030f 	and.w	r3, r3, #15
 8001dfe:	3b04      	subs	r3, #4
 8001e00:	0112      	lsls	r2, r2, #4
 8001e02:	b2d2      	uxtb	r2, r2
 8001e04:	440b      	add	r3, r1
 8001e06:	761a      	strb	r2, [r3, #24]
}
 8001e08:	bf00      	nop
 8001e0a:	370c      	adds	r7, #12
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e12:	4770      	bx	lr
 8001e14:	e000e100 	.word	0xe000e100
 8001e18:	e000ed00 	.word	0xe000ed00

08001e1c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8001e1c:	b480      	push	{r7}
 8001e1e:	b089      	sub	sp, #36	@ 0x24
 8001e20:	af00      	add	r7, sp, #0
 8001e22:	60f8      	str	r0, [r7, #12]
 8001e24:	60b9      	str	r1, [r7, #8]
 8001e26:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	f003 0307 	and.w	r3, r3, #7
 8001e2e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8001e30:	69fb      	ldr	r3, [r7, #28]
 8001e32:	f1c3 0307 	rsb	r3, r3, #7
 8001e36:	2b04      	cmp	r3, #4
 8001e38:	bf28      	it	cs
 8001e3a:	2304      	movcs	r3, #4
 8001e3c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8001e3e:	69fb      	ldr	r3, [r7, #28]
 8001e40:	3304      	adds	r3, #4
 8001e42:	2b06      	cmp	r3, #6
 8001e44:	d902      	bls.n	8001e4c <NVIC_EncodePriority+0x30>
 8001e46:	69fb      	ldr	r3, [r7, #28]
 8001e48:	3b03      	subs	r3, #3
 8001e4a:	e000      	b.n	8001e4e <NVIC_EncodePriority+0x32>
 8001e4c:	2300      	movs	r3, #0
 8001e4e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e50:	f04f 32ff 	mov.w	r2, #4294967295	@ 0xffffffff
 8001e54:	69bb      	ldr	r3, [r7, #24]
 8001e56:	fa02 f303 	lsl.w	r3, r2, r3
 8001e5a:	43da      	mvns	r2, r3
 8001e5c:	68bb      	ldr	r3, [r7, #8]
 8001e5e:	401a      	ands	r2, r3
 8001e60:	697b      	ldr	r3, [r7, #20]
 8001e62:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001e64:	f04f 31ff 	mov.w	r1, #4294967295	@ 0xffffffff
 8001e68:	697b      	ldr	r3, [r7, #20]
 8001e6a:	fa01 f303 	lsl.w	r3, r1, r3
 8001e6e:	43d9      	mvns	r1, r3
 8001e70:	687b      	ldr	r3, [r7, #4]
 8001e72:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001e74:	4313      	orrs	r3, r2
         );
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	3724      	adds	r7, #36	@ 0x24
 8001e7a:	46bd      	mov	sp, r7
 8001e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e80:	4770      	bx	lr
	...

08001e84 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8001e84:	b580      	push	{r7, lr}
 8001e86:	b082      	sub	sp, #8
 8001e88:	af00      	add	r7, sp, #0
 8001e8a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8001e8c:	687b      	ldr	r3, [r7, #4]
 8001e8e:	3b01      	subs	r3, #1
 8001e90:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8001e94:	d301      	bcc.n	8001e9a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8001e96:	2301      	movs	r3, #1
 8001e98:	e00f      	b.n	8001eba <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8001e9a:	4a0a      	ldr	r2, [pc, #40]	@ (8001ec4 <SysTick_Config+0x40>)
 8001e9c:	687b      	ldr	r3, [r7, #4]
 8001e9e:	3b01      	subs	r3, #1
 8001ea0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8001ea2:	210f      	movs	r1, #15
 8001ea4:	f04f 30ff 	mov.w	r0, #4294967295	@ 0xffffffff
 8001ea8:	f7ff ff8e 	bl	8001dc8 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8001eac:	4b05      	ldr	r3, [pc, #20]	@ (8001ec4 <SysTick_Config+0x40>)
 8001eae:	2200      	movs	r2, #0
 8001eb0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8001eb2:	4b04      	ldr	r3, [pc, #16]	@ (8001ec4 <SysTick_Config+0x40>)
 8001eb4:	2207      	movs	r2, #7
 8001eb6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8001eb8:	2300      	movs	r3, #0
}
 8001eba:	4618      	mov	r0, r3
 8001ebc:	3708      	adds	r7, #8
 8001ebe:	46bd      	mov	sp, r7
 8001ec0:	bd80      	pop	{r7, pc}
 8001ec2:	bf00      	nop
 8001ec4:	e000e010 	.word	0xe000e010

08001ec8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	b082      	sub	sp, #8
 8001ecc:	af00      	add	r7, sp, #0
 8001ece:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001ed0:	6878      	ldr	r0, [r7, #4]
 8001ed2:	f7ff ff29 	bl	8001d28 <__NVIC_SetPriorityGrouping>
}
 8001ed6:	bf00      	nop
 8001ed8:	3708      	adds	r7, #8
 8001eda:	46bd      	mov	sp, r7
 8001edc:	bd80      	pop	{r7, pc}

08001ede <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001ede:	b580      	push	{r7, lr}
 8001ee0:	b086      	sub	sp, #24
 8001ee2:	af00      	add	r7, sp, #0
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	60b9      	str	r1, [r7, #8]
 8001ee8:	607a      	str	r2, [r7, #4]
 8001eea:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001eec:	2300      	movs	r3, #0
 8001eee:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001ef0:	f7ff ff3e 	bl	8001d70 <__NVIC_GetPriorityGrouping>
 8001ef4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8001ef6:	687a      	ldr	r2, [r7, #4]
 8001ef8:	68b9      	ldr	r1, [r7, #8]
 8001efa:	6978      	ldr	r0, [r7, #20]
 8001efc:	f7ff ff8e 	bl	8001e1c <NVIC_EncodePriority>
 8001f00:	4602      	mov	r2, r0
 8001f02:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001f06:	4611      	mov	r1, r2
 8001f08:	4618      	mov	r0, r3
 8001f0a:	f7ff ff5d 	bl	8001dc8 <__NVIC_SetPriority>
}
 8001f0e:	bf00      	nop
 8001f10:	3718      	adds	r7, #24
 8001f12:	46bd      	mov	sp, r7
 8001f14:	bd80      	pop	{r7, pc}

08001f16 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001f16:	b580      	push	{r7, lr}
 8001f18:	b082      	sub	sp, #8
 8001f1a:	af00      	add	r7, sp, #0
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001f20:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7ff ff31 	bl	8001d8c <__NVIC_EnableIRQ>
}
 8001f2a:	bf00      	nop
 8001f2c:	3708      	adds	r7, #8
 8001f2e:	46bd      	mov	sp, r7
 8001f30:	bd80      	pop	{r7, pc}

08001f32 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8001f32:	b580      	push	{r7, lr}
 8001f34:	b082      	sub	sp, #8
 8001f36:	af00      	add	r7, sp, #0
 8001f38:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8001f3a:	6878      	ldr	r0, [r7, #4]
 8001f3c:	f7ff ffa2 	bl	8001e84 <SysTick_Config>
 8001f40:	4603      	mov	r3, r0
}
 8001f42:	4618      	mov	r0, r3
 8001f44:	3708      	adds	r7, #8
 8001f46:	46bd      	mov	sp, r7
 8001f48:	bd80      	pop	{r7, pc}
	...

08001f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8001f4c:	b480      	push	{r7}
 8001f4e:	b089      	sub	sp, #36	@ 0x24
 8001f50:	af00      	add	r7, sp, #0
 8001f52:	6078      	str	r0, [r7, #4]
 8001f54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001f56:	2300      	movs	r3, #0
 8001f58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8001f5a:	2300      	movs	r3, #0
 8001f5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8001f5e:	2300      	movs	r3, #0
 8001f60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001f62:	2300      	movs	r3, #0
 8001f64:	61fb      	str	r3, [r7, #28]
 8001f66:	e16b      	b.n	8002240 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001f68:	2201      	movs	r2, #1
 8001f6a:	69fb      	ldr	r3, [r7, #28]
 8001f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8001f70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001f72:	683b      	ldr	r3, [r7, #0]
 8001f74:	681b      	ldr	r3, [r3, #0]
 8001f76:	697a      	ldr	r2, [r7, #20]
 8001f78:	4013      	ands	r3, r2
 8001f7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8001f7c:	693a      	ldr	r2, [r7, #16]
 8001f7e:	697b      	ldr	r3, [r7, #20]
 8001f80:	429a      	cmp	r2, r3
 8001f82:	f040 815a 	bne.w	800223a <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f86:	683b      	ldr	r3, [r7, #0]
 8001f88:	685b      	ldr	r3, [r3, #4]
 8001f8a:	f003 0303 	and.w	r3, r3, #3
 8001f8e:	2b01      	cmp	r3, #1
 8001f90:	d005      	beq.n	8001f9e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001f92:	683b      	ldr	r3, [r7, #0]
 8001f94:	685b      	ldr	r3, [r3, #4]
 8001f96:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001f9a:	2b02      	cmp	r3, #2
 8001f9c:	d130      	bne.n	8002000 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8001f9e:	687b      	ldr	r3, [r7, #4]
 8001fa0:	689b      	ldr	r3, [r3, #8]
 8001fa2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001fa4:	69fb      	ldr	r3, [r7, #28]
 8001fa6:	005b      	lsls	r3, r3, #1
 8001fa8:	2203      	movs	r2, #3
 8001faa:	fa02 f303 	lsl.w	r3, r2, r3
 8001fae:	43db      	mvns	r3, r3
 8001fb0:	69ba      	ldr	r2, [r7, #24]
 8001fb2:	4013      	ands	r3, r2
 8001fb4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001fb6:	683b      	ldr	r3, [r7, #0]
 8001fb8:	68da      	ldr	r2, [r3, #12]
 8001fba:	69fb      	ldr	r3, [r7, #28]
 8001fbc:	005b      	lsls	r3, r3, #1
 8001fbe:	fa02 f303 	lsl.w	r3, r2, r3
 8001fc2:	69ba      	ldr	r2, [r7, #24]
 8001fc4:	4313      	orrs	r3, r2
 8001fc6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	69ba      	ldr	r2, [r7, #24]
 8001fcc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8001fce:	687b      	ldr	r3, [r7, #4]
 8001fd0:	685b      	ldr	r3, [r3, #4]
 8001fd2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8001fd4:	2201      	movs	r2, #1
 8001fd6:	69fb      	ldr	r3, [r7, #28]
 8001fd8:	fa02 f303 	lsl.w	r3, r2, r3
 8001fdc:	43db      	mvns	r3, r3
 8001fde:	69ba      	ldr	r2, [r7, #24]
 8001fe0:	4013      	ands	r3, r2
 8001fe2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8001fe4:	683b      	ldr	r3, [r7, #0]
 8001fe6:	685b      	ldr	r3, [r3, #4]
 8001fe8:	091b      	lsrs	r3, r3, #4
 8001fea:	f003 0201 	and.w	r2, r3, #1
 8001fee:	69fb      	ldr	r3, [r7, #28]
 8001ff0:	fa02 f303 	lsl.w	r3, r2, r3
 8001ff4:	69ba      	ldr	r2, [r7, #24]
 8001ff6:	4313      	orrs	r3, r2
 8001ff8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8001ffa:	687b      	ldr	r3, [r7, #4]
 8001ffc:	69ba      	ldr	r2, [r7, #24]
 8001ffe:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002000:	683b      	ldr	r3, [r7, #0]
 8002002:	685b      	ldr	r3, [r3, #4]
 8002004:	f003 0303 	and.w	r3, r3, #3
 8002008:	2b03      	cmp	r3, #3
 800200a:	d017      	beq.n	800203c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800200c:	687b      	ldr	r3, [r7, #4]
 800200e:	68db      	ldr	r3, [r3, #12]
 8002010:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002012:	69fb      	ldr	r3, [r7, #28]
 8002014:	005b      	lsls	r3, r3, #1
 8002016:	2203      	movs	r2, #3
 8002018:	fa02 f303 	lsl.w	r3, r2, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	69ba      	ldr	r2, [r7, #24]
 8002020:	4013      	ands	r3, r2
 8002022:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002024:	683b      	ldr	r3, [r7, #0]
 8002026:	689a      	ldr	r2, [r3, #8]
 8002028:	69fb      	ldr	r3, [r7, #28]
 800202a:	005b      	lsls	r3, r3, #1
 800202c:	fa02 f303 	lsl.w	r3, r2, r3
 8002030:	69ba      	ldr	r2, [r7, #24]
 8002032:	4313      	orrs	r3, r2
 8002034:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002036:	687b      	ldr	r3, [r7, #4]
 8002038:	69ba      	ldr	r2, [r7, #24]
 800203a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800203c:	683b      	ldr	r3, [r7, #0]
 800203e:	685b      	ldr	r3, [r3, #4]
 8002040:	f003 0303 	and.w	r3, r3, #3
 8002044:	2b02      	cmp	r3, #2
 8002046:	d123      	bne.n	8002090 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002048:	69fb      	ldr	r3, [r7, #28]
 800204a:	08da      	lsrs	r2, r3, #3
 800204c:	687b      	ldr	r3, [r7, #4]
 800204e:	3208      	adds	r2, #8
 8002050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002054:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002056:	69fb      	ldr	r3, [r7, #28]
 8002058:	f003 0307 	and.w	r3, r3, #7
 800205c:	009b      	lsls	r3, r3, #2
 800205e:	220f      	movs	r2, #15
 8002060:	fa02 f303 	lsl.w	r3, r2, r3
 8002064:	43db      	mvns	r3, r3
 8002066:	69ba      	ldr	r2, [r7, #24]
 8002068:	4013      	ands	r3, r2
 800206a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800206c:	683b      	ldr	r3, [r7, #0]
 800206e:	691a      	ldr	r2, [r3, #16]
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f003 0307 	and.w	r3, r3, #7
 8002076:	009b      	lsls	r3, r3, #2
 8002078:	fa02 f303 	lsl.w	r3, r2, r3
 800207c:	69ba      	ldr	r2, [r7, #24]
 800207e:	4313      	orrs	r3, r2
 8002080:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002082:	69fb      	ldr	r3, [r7, #28]
 8002084:	08da      	lsrs	r2, r3, #3
 8002086:	687b      	ldr	r3, [r7, #4]
 8002088:	3208      	adds	r2, #8
 800208a:	69b9      	ldr	r1, [r7, #24]
 800208c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002090:	687b      	ldr	r3, [r7, #4]
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002096:	69fb      	ldr	r3, [r7, #28]
 8002098:	005b      	lsls	r3, r3, #1
 800209a:	2203      	movs	r2, #3
 800209c:	fa02 f303 	lsl.w	r3, r2, r3
 80020a0:	43db      	mvns	r3, r3
 80020a2:	69ba      	ldr	r2, [r7, #24]
 80020a4:	4013      	ands	r3, r2
 80020a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80020a8:	683b      	ldr	r3, [r7, #0]
 80020aa:	685b      	ldr	r3, [r3, #4]
 80020ac:	f003 0203 	and.w	r2, r3, #3
 80020b0:	69fb      	ldr	r3, [r7, #28]
 80020b2:	005b      	lsls	r3, r3, #1
 80020b4:	fa02 f303 	lsl.w	r3, r2, r3
 80020b8:	69ba      	ldr	r2, [r7, #24]
 80020ba:	4313      	orrs	r3, r2
 80020bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80020be:	687b      	ldr	r3, [r7, #4]
 80020c0:	69ba      	ldr	r2, [r7, #24]
 80020c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80020c4:	683b      	ldr	r3, [r7, #0]
 80020c6:	685b      	ldr	r3, [r3, #4]
 80020c8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 80020cc:	2b00      	cmp	r3, #0
 80020ce:	f000 80b4 	beq.w	800223a <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80020d2:	2300      	movs	r3, #0
 80020d4:	60fb      	str	r3, [r7, #12]
 80020d6:	4b60      	ldr	r3, [pc, #384]	@ (8002258 <HAL_GPIO_Init+0x30c>)
 80020d8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020da:	4a5f      	ldr	r2, [pc, #380]	@ (8002258 <HAL_GPIO_Init+0x30c>)
 80020dc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80020e0:	6453      	str	r3, [r2, #68]	@ 0x44
 80020e2:	4b5d      	ldr	r3, [pc, #372]	@ (8002258 <HAL_GPIO_Init+0x30c>)
 80020e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80020e6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80020ea:	60fb      	str	r3, [r7, #12]
 80020ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80020ee:	4a5b      	ldr	r2, [pc, #364]	@ (800225c <HAL_GPIO_Init+0x310>)
 80020f0:	69fb      	ldr	r3, [r7, #28]
 80020f2:	089b      	lsrs	r3, r3, #2
 80020f4:	3302      	adds	r3, #2
 80020f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80020fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80020fc:	69fb      	ldr	r3, [r7, #28]
 80020fe:	f003 0303 	and.w	r3, r3, #3
 8002102:	009b      	lsls	r3, r3, #2
 8002104:	220f      	movs	r2, #15
 8002106:	fa02 f303 	lsl.w	r3, r2, r3
 800210a:	43db      	mvns	r3, r3
 800210c:	69ba      	ldr	r2, [r7, #24]
 800210e:	4013      	ands	r3, r2
 8002110:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002112:	687b      	ldr	r3, [r7, #4]
 8002114:	4a52      	ldr	r2, [pc, #328]	@ (8002260 <HAL_GPIO_Init+0x314>)
 8002116:	4293      	cmp	r3, r2
 8002118:	d02b      	beq.n	8002172 <HAL_GPIO_Init+0x226>
 800211a:	687b      	ldr	r3, [r7, #4]
 800211c:	4a51      	ldr	r2, [pc, #324]	@ (8002264 <HAL_GPIO_Init+0x318>)
 800211e:	4293      	cmp	r3, r2
 8002120:	d025      	beq.n	800216e <HAL_GPIO_Init+0x222>
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	4a50      	ldr	r2, [pc, #320]	@ (8002268 <HAL_GPIO_Init+0x31c>)
 8002126:	4293      	cmp	r3, r2
 8002128:	d01f      	beq.n	800216a <HAL_GPIO_Init+0x21e>
 800212a:	687b      	ldr	r3, [r7, #4]
 800212c:	4a4f      	ldr	r2, [pc, #316]	@ (800226c <HAL_GPIO_Init+0x320>)
 800212e:	4293      	cmp	r3, r2
 8002130:	d019      	beq.n	8002166 <HAL_GPIO_Init+0x21a>
 8002132:	687b      	ldr	r3, [r7, #4]
 8002134:	4a4e      	ldr	r2, [pc, #312]	@ (8002270 <HAL_GPIO_Init+0x324>)
 8002136:	4293      	cmp	r3, r2
 8002138:	d013      	beq.n	8002162 <HAL_GPIO_Init+0x216>
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	4a4d      	ldr	r2, [pc, #308]	@ (8002274 <HAL_GPIO_Init+0x328>)
 800213e:	4293      	cmp	r3, r2
 8002140:	d00d      	beq.n	800215e <HAL_GPIO_Init+0x212>
 8002142:	687b      	ldr	r3, [r7, #4]
 8002144:	4a4c      	ldr	r2, [pc, #304]	@ (8002278 <HAL_GPIO_Init+0x32c>)
 8002146:	4293      	cmp	r3, r2
 8002148:	d007      	beq.n	800215a <HAL_GPIO_Init+0x20e>
 800214a:	687b      	ldr	r3, [r7, #4]
 800214c:	4a4b      	ldr	r2, [pc, #300]	@ (800227c <HAL_GPIO_Init+0x330>)
 800214e:	4293      	cmp	r3, r2
 8002150:	d101      	bne.n	8002156 <HAL_GPIO_Init+0x20a>
 8002152:	2307      	movs	r3, #7
 8002154:	e00e      	b.n	8002174 <HAL_GPIO_Init+0x228>
 8002156:	2308      	movs	r3, #8
 8002158:	e00c      	b.n	8002174 <HAL_GPIO_Init+0x228>
 800215a:	2306      	movs	r3, #6
 800215c:	e00a      	b.n	8002174 <HAL_GPIO_Init+0x228>
 800215e:	2305      	movs	r3, #5
 8002160:	e008      	b.n	8002174 <HAL_GPIO_Init+0x228>
 8002162:	2304      	movs	r3, #4
 8002164:	e006      	b.n	8002174 <HAL_GPIO_Init+0x228>
 8002166:	2303      	movs	r3, #3
 8002168:	e004      	b.n	8002174 <HAL_GPIO_Init+0x228>
 800216a:	2302      	movs	r3, #2
 800216c:	e002      	b.n	8002174 <HAL_GPIO_Init+0x228>
 800216e:	2301      	movs	r3, #1
 8002170:	e000      	b.n	8002174 <HAL_GPIO_Init+0x228>
 8002172:	2300      	movs	r3, #0
 8002174:	69fa      	ldr	r2, [r7, #28]
 8002176:	f002 0203 	and.w	r2, r2, #3
 800217a:	0092      	lsls	r2, r2, #2
 800217c:	4093      	lsls	r3, r2
 800217e:	69ba      	ldr	r2, [r7, #24]
 8002180:	4313      	orrs	r3, r2
 8002182:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002184:	4935      	ldr	r1, [pc, #212]	@ (800225c <HAL_GPIO_Init+0x310>)
 8002186:	69fb      	ldr	r3, [r7, #28]
 8002188:	089b      	lsrs	r3, r3, #2
 800218a:	3302      	adds	r3, #2
 800218c:	69ba      	ldr	r2, [r7, #24]
 800218e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002192:	4b3b      	ldr	r3, [pc, #236]	@ (8002280 <HAL_GPIO_Init+0x334>)
 8002194:	689b      	ldr	r3, [r3, #8]
 8002196:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002198:	693b      	ldr	r3, [r7, #16]
 800219a:	43db      	mvns	r3, r3
 800219c:	69ba      	ldr	r2, [r7, #24]
 800219e:	4013      	ands	r3, r2
 80021a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80021a2:	683b      	ldr	r3, [r7, #0]
 80021a4:	685b      	ldr	r3, [r3, #4]
 80021a6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80021aa:	2b00      	cmp	r3, #0
 80021ac:	d003      	beq.n	80021b6 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80021ae:	69ba      	ldr	r2, [r7, #24]
 80021b0:	693b      	ldr	r3, [r7, #16]
 80021b2:	4313      	orrs	r3, r2
 80021b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80021b6:	4a32      	ldr	r2, [pc, #200]	@ (8002280 <HAL_GPIO_Init+0x334>)
 80021b8:	69bb      	ldr	r3, [r7, #24]
 80021ba:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80021bc:	4b30      	ldr	r3, [pc, #192]	@ (8002280 <HAL_GPIO_Init+0x334>)
 80021be:	68db      	ldr	r3, [r3, #12]
 80021c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021c2:	693b      	ldr	r3, [r7, #16]
 80021c4:	43db      	mvns	r3, r3
 80021c6:	69ba      	ldr	r2, [r7, #24]
 80021c8:	4013      	ands	r3, r2
 80021ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80021cc:	683b      	ldr	r3, [r7, #0]
 80021ce:	685b      	ldr	r3, [r3, #4]
 80021d0:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d003      	beq.n	80021e0 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80021d8:	69ba      	ldr	r2, [r7, #24]
 80021da:	693b      	ldr	r3, [r7, #16]
 80021dc:	4313      	orrs	r3, r2
 80021de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80021e0:	4a27      	ldr	r2, [pc, #156]	@ (8002280 <HAL_GPIO_Init+0x334>)
 80021e2:	69bb      	ldr	r3, [r7, #24]
 80021e4:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80021e6:	4b26      	ldr	r3, [pc, #152]	@ (8002280 <HAL_GPIO_Init+0x334>)
 80021e8:	685b      	ldr	r3, [r3, #4]
 80021ea:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80021ec:	693b      	ldr	r3, [r7, #16]
 80021ee:	43db      	mvns	r3, r3
 80021f0:	69ba      	ldr	r2, [r7, #24]
 80021f2:	4013      	ands	r3, r2
 80021f4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80021f6:	683b      	ldr	r3, [r7, #0]
 80021f8:	685b      	ldr	r3, [r3, #4]
 80021fa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80021fe:	2b00      	cmp	r3, #0
 8002200:	d003      	beq.n	800220a <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8002202:	69ba      	ldr	r2, [r7, #24]
 8002204:	693b      	ldr	r3, [r7, #16]
 8002206:	4313      	orrs	r3, r2
 8002208:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800220a:	4a1d      	ldr	r2, [pc, #116]	@ (8002280 <HAL_GPIO_Init+0x334>)
 800220c:	69bb      	ldr	r3, [r7, #24]
 800220e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002210:	4b1b      	ldr	r3, [pc, #108]	@ (8002280 <HAL_GPIO_Init+0x334>)
 8002212:	681b      	ldr	r3, [r3, #0]
 8002214:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002216:	693b      	ldr	r3, [r7, #16]
 8002218:	43db      	mvns	r3, r3
 800221a:	69ba      	ldr	r2, [r7, #24]
 800221c:	4013      	ands	r3, r2
 800221e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002220:	683b      	ldr	r3, [r7, #0]
 8002222:	685b      	ldr	r3, [r3, #4]
 8002224:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002228:	2b00      	cmp	r3, #0
 800222a:	d003      	beq.n	8002234 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 800222c:	69ba      	ldr	r2, [r7, #24]
 800222e:	693b      	ldr	r3, [r7, #16]
 8002230:	4313      	orrs	r3, r2
 8002232:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002234:	4a12      	ldr	r2, [pc, #72]	@ (8002280 <HAL_GPIO_Init+0x334>)
 8002236:	69bb      	ldr	r3, [r7, #24]
 8002238:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800223a:	69fb      	ldr	r3, [r7, #28]
 800223c:	3301      	adds	r3, #1
 800223e:	61fb      	str	r3, [r7, #28]
 8002240:	69fb      	ldr	r3, [r7, #28]
 8002242:	2b0f      	cmp	r3, #15
 8002244:	f67f ae90 	bls.w	8001f68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002248:	bf00      	nop
 800224a:	bf00      	nop
 800224c:	3724      	adds	r7, #36	@ 0x24
 800224e:	46bd      	mov	sp, r7
 8002250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002254:	4770      	bx	lr
 8002256:	bf00      	nop
 8002258:	40023800 	.word	0x40023800
 800225c:	40013800 	.word	0x40013800
 8002260:	40020000 	.word	0x40020000
 8002264:	40020400 	.word	0x40020400
 8002268:	40020800 	.word	0x40020800
 800226c:	40020c00 	.word	0x40020c00
 8002270:	40021000 	.word	0x40021000
 8002274:	40021400 	.word	0x40021400
 8002278:	40021800 	.word	0x40021800
 800227c:	40021c00 	.word	0x40021c00
 8002280:	40013c00 	.word	0x40013c00

08002284 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002284:	b480      	push	{r7}
 8002286:	b083      	sub	sp, #12
 8002288:	af00      	add	r7, sp, #0
 800228a:	6078      	str	r0, [r7, #4]
 800228c:	460b      	mov	r3, r1
 800228e:	807b      	strh	r3, [r7, #2]
 8002290:	4613      	mov	r3, r2
 8002292:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002294:	787b      	ldrb	r3, [r7, #1]
 8002296:	2b00      	cmp	r3, #0
 8002298:	d003      	beq.n	80022a2 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800229a:	887a      	ldrh	r2, [r7, #2]
 800229c:	687b      	ldr	r3, [r7, #4]
 800229e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80022a0:	e003      	b.n	80022aa <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80022a2:	887b      	ldrh	r3, [r7, #2]
 80022a4:	041a      	lsls	r2, r3, #16
 80022a6:	687b      	ldr	r3, [r7, #4]
 80022a8:	619a      	str	r2, [r3, #24]
}
 80022aa:	bf00      	nop
 80022ac:	370c      	adds	r7, #12
 80022ae:	46bd      	mov	sp, r7
 80022b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022b4:	4770      	bx	lr

080022b6 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80022b6:	b480      	push	{r7}
 80022b8:	b085      	sub	sp, #20
 80022ba:	af00      	add	r7, sp, #0
 80022bc:	6078      	str	r0, [r7, #4]
 80022be:	460b      	mov	r3, r1
 80022c0:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80022c2:	687b      	ldr	r3, [r7, #4]
 80022c4:	695b      	ldr	r3, [r3, #20]
 80022c6:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80022c8:	887a      	ldrh	r2, [r7, #2]
 80022ca:	68fb      	ldr	r3, [r7, #12]
 80022cc:	4013      	ands	r3, r2
 80022ce:	041a      	lsls	r2, r3, #16
 80022d0:	68fb      	ldr	r3, [r7, #12]
 80022d2:	43d9      	mvns	r1, r3
 80022d4:	887b      	ldrh	r3, [r7, #2]
 80022d6:	400b      	ands	r3, r1
 80022d8:	431a      	orrs	r2, r3
 80022da:	687b      	ldr	r3, [r7, #4]
 80022dc:	619a      	str	r2, [r3, #24]
}
 80022de:	bf00      	nop
 80022e0:	3714      	adds	r7, #20
 80022e2:	46bd      	mov	sp, r7
 80022e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022e8:	4770      	bx	lr
	...

080022ec <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80022ec:	b580      	push	{r7, lr}
 80022ee:	b086      	sub	sp, #24
 80022f0:	af00      	add	r7, sp, #0
 80022f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80022f4:	687b      	ldr	r3, [r7, #4]
 80022f6:	2b00      	cmp	r3, #0
 80022f8:	d101      	bne.n	80022fe <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80022fa:	2301      	movs	r3, #1
 80022fc:	e267      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	f003 0301 	and.w	r3, r3, #1
 8002306:	2b00      	cmp	r3, #0
 8002308:	d075      	beq.n	80023f6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800230a:	4b88      	ldr	r3, [pc, #544]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 800230c:	689b      	ldr	r3, [r3, #8]
 800230e:	f003 030c 	and.w	r3, r3, #12
 8002312:	2b04      	cmp	r3, #4
 8002314:	d00c      	beq.n	8002330 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002316:	4b85      	ldr	r3, [pc, #532]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002318:	689b      	ldr	r3, [r3, #8]
 800231a:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800231e:	2b08      	cmp	r3, #8
 8002320:	d112      	bne.n	8002348 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8002322:	4b82      	ldr	r3, [pc, #520]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002324:	685b      	ldr	r3, [r3, #4]
 8002326:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800232a:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800232e:	d10b      	bne.n	8002348 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8002330:	4b7e      	ldr	r3, [pc, #504]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002338:	2b00      	cmp	r3, #0
 800233a:	d05b      	beq.n	80023f4 <HAL_RCC_OscConfig+0x108>
 800233c:	687b      	ldr	r3, [r7, #4]
 800233e:	685b      	ldr	r3, [r3, #4]
 8002340:	2b00      	cmp	r3, #0
 8002342:	d157      	bne.n	80023f4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8002344:	2301      	movs	r3, #1
 8002346:	e242      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8002350:	d106      	bne.n	8002360 <HAL_RCC_OscConfig+0x74>
 8002352:	4b76      	ldr	r3, [pc, #472]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002354:	681b      	ldr	r3, [r3, #0]
 8002356:	4a75      	ldr	r2, [pc, #468]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002358:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 800235c:	6013      	str	r3, [r2, #0]
 800235e:	e01d      	b.n	800239c <HAL_RCC_OscConfig+0xb0>
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	685b      	ldr	r3, [r3, #4]
 8002364:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8002368:	d10c      	bne.n	8002384 <HAL_RCC_OscConfig+0x98>
 800236a:	4b70      	ldr	r3, [pc, #448]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	4a6f      	ldr	r2, [pc, #444]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002370:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8002374:	6013      	str	r3, [r2, #0]
 8002376:	4b6d      	ldr	r3, [pc, #436]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4a6c      	ldr	r2, [pc, #432]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 800237c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8002380:	6013      	str	r3, [r2, #0]
 8002382:	e00b      	b.n	800239c <HAL_RCC_OscConfig+0xb0>
 8002384:	4b69      	ldr	r3, [pc, #420]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	4a68      	ldr	r2, [pc, #416]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 800238a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 800238e:	6013      	str	r3, [r2, #0]
 8002390:	4b66      	ldr	r3, [pc, #408]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	4a65      	ldr	r2, [pc, #404]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002396:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800239a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800239c:	687b      	ldr	r3, [r7, #4]
 800239e:	685b      	ldr	r3, [r3, #4]
 80023a0:	2b00      	cmp	r3, #0
 80023a2:	d013      	beq.n	80023cc <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023a4:	f7ff fc90 	bl	8001cc8 <HAL_GetTick>
 80023a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023aa:	e008      	b.n	80023be <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023ac:	f7ff fc8c 	bl	8001cc8 <HAL_GetTick>
 80023b0:	4602      	mov	r2, r0
 80023b2:	693b      	ldr	r3, [r7, #16]
 80023b4:	1ad3      	subs	r3, r2, r3
 80023b6:	2b64      	cmp	r3, #100	@ 0x64
 80023b8:	d901      	bls.n	80023be <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80023ba:	2303      	movs	r3, #3
 80023bc:	e207      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80023be:	4b5b      	ldr	r3, [pc, #364]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023c6:	2b00      	cmp	r3, #0
 80023c8:	d0f0      	beq.n	80023ac <HAL_RCC_OscConfig+0xc0>
 80023ca:	e014      	b.n	80023f6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80023cc:	f7ff fc7c 	bl	8001cc8 <HAL_GetTick>
 80023d0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023d2:	e008      	b.n	80023e6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80023d4:	f7ff fc78 	bl	8001cc8 <HAL_GetTick>
 80023d8:	4602      	mov	r2, r0
 80023da:	693b      	ldr	r3, [r7, #16]
 80023dc:	1ad3      	subs	r3, r2, r3
 80023de:	2b64      	cmp	r3, #100	@ 0x64
 80023e0:	d901      	bls.n	80023e6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80023e2:	2303      	movs	r3, #3
 80023e4:	e1f3      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80023e6:	4b51      	ldr	r3, [pc, #324]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 80023e8:	681b      	ldr	r3, [r3, #0]
 80023ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80023ee:	2b00      	cmp	r3, #0
 80023f0:	d1f0      	bne.n	80023d4 <HAL_RCC_OscConfig+0xe8>
 80023f2:	e000      	b.n	80023f6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80023f4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80023f6:	687b      	ldr	r3, [r7, #4]
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	f003 0302 	and.w	r3, r3, #2
 80023fe:	2b00      	cmp	r3, #0
 8002400:	d063      	beq.n	80024ca <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002402:	4b4a      	ldr	r3, [pc, #296]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002404:	689b      	ldr	r3, [r3, #8]
 8002406:	f003 030c 	and.w	r3, r3, #12
 800240a:	2b00      	cmp	r3, #0
 800240c:	d00b      	beq.n	8002426 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800240e:	4b47      	ldr	r3, [pc, #284]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002410:	689b      	ldr	r3, [r3, #8]
 8002412:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8002416:	2b08      	cmp	r3, #8
 8002418:	d11c      	bne.n	8002454 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800241a:	4b44      	ldr	r3, [pc, #272]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 800241c:	685b      	ldr	r3, [r3, #4]
 800241e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002422:	2b00      	cmp	r3, #0
 8002424:	d116      	bne.n	8002454 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002426:	4b41      	ldr	r3, [pc, #260]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002428:	681b      	ldr	r3, [r3, #0]
 800242a:	f003 0302 	and.w	r3, r3, #2
 800242e:	2b00      	cmp	r3, #0
 8002430:	d005      	beq.n	800243e <HAL_RCC_OscConfig+0x152>
 8002432:	687b      	ldr	r3, [r7, #4]
 8002434:	68db      	ldr	r3, [r3, #12]
 8002436:	2b01      	cmp	r3, #1
 8002438:	d001      	beq.n	800243e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800243a:	2301      	movs	r3, #1
 800243c:	e1c7      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800243e:	4b3b      	ldr	r3, [pc, #236]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002446:	687b      	ldr	r3, [r7, #4]
 8002448:	691b      	ldr	r3, [r3, #16]
 800244a:	00db      	lsls	r3, r3, #3
 800244c:	4937      	ldr	r1, [pc, #220]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 800244e:	4313      	orrs	r3, r2
 8002450:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8002452:	e03a      	b.n	80024ca <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8002454:	687b      	ldr	r3, [r7, #4]
 8002456:	68db      	ldr	r3, [r3, #12]
 8002458:	2b00      	cmp	r3, #0
 800245a:	d020      	beq.n	800249e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800245c:	4b34      	ldr	r3, [pc, #208]	@ (8002530 <HAL_RCC_OscConfig+0x244>)
 800245e:	2201      	movs	r2, #1
 8002460:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8002462:	f7ff fc31 	bl	8001cc8 <HAL_GetTick>
 8002466:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8002468:	e008      	b.n	800247c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800246a:	f7ff fc2d 	bl	8001cc8 <HAL_GetTick>
 800246e:	4602      	mov	r2, r0
 8002470:	693b      	ldr	r3, [r7, #16]
 8002472:	1ad3      	subs	r3, r2, r3
 8002474:	2b02      	cmp	r3, #2
 8002476:	d901      	bls.n	800247c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8002478:	2303      	movs	r3, #3
 800247a:	e1a8      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800247c:	4b2b      	ldr	r3, [pc, #172]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	f003 0302 	and.w	r3, r3, #2
 8002484:	2b00      	cmp	r3, #0
 8002486:	d0f0      	beq.n	800246a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8002488:	4b28      	ldr	r3, [pc, #160]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8002490:	687b      	ldr	r3, [r7, #4]
 8002492:	691b      	ldr	r3, [r3, #16]
 8002494:	00db      	lsls	r3, r3, #3
 8002496:	4925      	ldr	r1, [pc, #148]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002498:	4313      	orrs	r3, r2
 800249a:	600b      	str	r3, [r1, #0]
 800249c:	e015      	b.n	80024ca <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800249e:	4b24      	ldr	r3, [pc, #144]	@ (8002530 <HAL_RCC_OscConfig+0x244>)
 80024a0:	2200      	movs	r2, #0
 80024a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80024a4:	f7ff fc10 	bl	8001cc8 <HAL_GetTick>
 80024a8:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024aa:	e008      	b.n	80024be <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80024ac:	f7ff fc0c 	bl	8001cc8 <HAL_GetTick>
 80024b0:	4602      	mov	r2, r0
 80024b2:	693b      	ldr	r3, [r7, #16]
 80024b4:	1ad3      	subs	r3, r2, r3
 80024b6:	2b02      	cmp	r3, #2
 80024b8:	d901      	bls.n	80024be <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80024ba:	2303      	movs	r3, #3
 80024bc:	e187      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80024be:	4b1b      	ldr	r3, [pc, #108]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 80024c0:	681b      	ldr	r3, [r3, #0]
 80024c2:	f003 0302 	and.w	r3, r3, #2
 80024c6:	2b00      	cmp	r3, #0
 80024c8:	d1f0      	bne.n	80024ac <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80024ca:	687b      	ldr	r3, [r7, #4]
 80024cc:	681b      	ldr	r3, [r3, #0]
 80024ce:	f003 0308 	and.w	r3, r3, #8
 80024d2:	2b00      	cmp	r3, #0
 80024d4:	d036      	beq.n	8002544 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80024d6:	687b      	ldr	r3, [r7, #4]
 80024d8:	695b      	ldr	r3, [r3, #20]
 80024da:	2b00      	cmp	r3, #0
 80024dc:	d016      	beq.n	800250c <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80024de:	4b15      	ldr	r3, [pc, #84]	@ (8002534 <HAL_RCC_OscConfig+0x248>)
 80024e0:	2201      	movs	r2, #1
 80024e2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80024e4:	f7ff fbf0 	bl	8001cc8 <HAL_GetTick>
 80024e8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024ea:	e008      	b.n	80024fe <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80024ec:	f7ff fbec 	bl	8001cc8 <HAL_GetTick>
 80024f0:	4602      	mov	r2, r0
 80024f2:	693b      	ldr	r3, [r7, #16]
 80024f4:	1ad3      	subs	r3, r2, r3
 80024f6:	2b02      	cmp	r3, #2
 80024f8:	d901      	bls.n	80024fe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80024fa:	2303      	movs	r3, #3
 80024fc:	e167      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80024fe:	4b0b      	ldr	r3, [pc, #44]	@ (800252c <HAL_RCC_OscConfig+0x240>)
 8002500:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8002502:	f003 0302 	and.w	r3, r3, #2
 8002506:	2b00      	cmp	r3, #0
 8002508:	d0f0      	beq.n	80024ec <HAL_RCC_OscConfig+0x200>
 800250a:	e01b      	b.n	8002544 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800250c:	4b09      	ldr	r3, [pc, #36]	@ (8002534 <HAL_RCC_OscConfig+0x248>)
 800250e:	2200      	movs	r2, #0
 8002510:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002512:	f7ff fbd9 	bl	8001cc8 <HAL_GetTick>
 8002516:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002518:	e00e      	b.n	8002538 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800251a:	f7ff fbd5 	bl	8001cc8 <HAL_GetTick>
 800251e:	4602      	mov	r2, r0
 8002520:	693b      	ldr	r3, [r7, #16]
 8002522:	1ad3      	subs	r3, r2, r3
 8002524:	2b02      	cmp	r3, #2
 8002526:	d907      	bls.n	8002538 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8002528:	2303      	movs	r3, #3
 800252a:	e150      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
 800252c:	40023800 	.word	0x40023800
 8002530:	42470000 	.word	0x42470000
 8002534:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8002538:	4b88      	ldr	r3, [pc, #544]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 800253a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800253c:	f003 0302 	and.w	r3, r3, #2
 8002540:	2b00      	cmp	r3, #0
 8002542:	d1ea      	bne.n	800251a <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8002544:	687b      	ldr	r3, [r7, #4]
 8002546:	681b      	ldr	r3, [r3, #0]
 8002548:	f003 0304 	and.w	r3, r3, #4
 800254c:	2b00      	cmp	r3, #0
 800254e:	f000 8097 	beq.w	8002680 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8002552:	2300      	movs	r3, #0
 8002554:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8002556:	4b81      	ldr	r3, [pc, #516]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 8002558:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800255a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800255e:	2b00      	cmp	r3, #0
 8002560:	d10f      	bne.n	8002582 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8002562:	2300      	movs	r3, #0
 8002564:	60bb      	str	r3, [r7, #8]
 8002566:	4b7d      	ldr	r3, [pc, #500]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 8002568:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800256a:	4a7c      	ldr	r2, [pc, #496]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 800256c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002570:	6413      	str	r3, [r2, #64]	@ 0x40
 8002572:	4b7a      	ldr	r3, [pc, #488]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 8002574:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002576:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800257a:	60bb      	str	r3, [r7, #8]
 800257c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800257e:	2301      	movs	r3, #1
 8002580:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8002582:	4b77      	ldr	r3, [pc, #476]	@ (8002760 <HAL_RCC_OscConfig+0x474>)
 8002584:	681b      	ldr	r3, [r3, #0]
 8002586:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800258a:	2b00      	cmp	r3, #0
 800258c:	d118      	bne.n	80025c0 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800258e:	4b74      	ldr	r3, [pc, #464]	@ (8002760 <HAL_RCC_OscConfig+0x474>)
 8002590:	681b      	ldr	r3, [r3, #0]
 8002592:	4a73      	ldr	r2, [pc, #460]	@ (8002760 <HAL_RCC_OscConfig+0x474>)
 8002594:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8002598:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800259a:	f7ff fb95 	bl	8001cc8 <HAL_GetTick>
 800259e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025a0:	e008      	b.n	80025b4 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80025a2:	f7ff fb91 	bl	8001cc8 <HAL_GetTick>
 80025a6:	4602      	mov	r2, r0
 80025a8:	693b      	ldr	r3, [r7, #16]
 80025aa:	1ad3      	subs	r3, r2, r3
 80025ac:	2b02      	cmp	r3, #2
 80025ae:	d901      	bls.n	80025b4 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80025b0:	2303      	movs	r3, #3
 80025b2:	e10c      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80025b4:	4b6a      	ldr	r3, [pc, #424]	@ (8002760 <HAL_RCC_OscConfig+0x474>)
 80025b6:	681b      	ldr	r3, [r3, #0]
 80025b8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80025bc:	2b00      	cmp	r3, #0
 80025be:	d0f0      	beq.n	80025a2 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80025c0:	687b      	ldr	r3, [r7, #4]
 80025c2:	689b      	ldr	r3, [r3, #8]
 80025c4:	2b01      	cmp	r3, #1
 80025c6:	d106      	bne.n	80025d6 <HAL_RCC_OscConfig+0x2ea>
 80025c8:	4b64      	ldr	r3, [pc, #400]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 80025ca:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025cc:	4a63      	ldr	r2, [pc, #396]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 80025ce:	f043 0301 	orr.w	r3, r3, #1
 80025d2:	6713      	str	r3, [r2, #112]	@ 0x70
 80025d4:	e01c      	b.n	8002610 <HAL_RCC_OscConfig+0x324>
 80025d6:	687b      	ldr	r3, [r7, #4]
 80025d8:	689b      	ldr	r3, [r3, #8]
 80025da:	2b05      	cmp	r3, #5
 80025dc:	d10c      	bne.n	80025f8 <HAL_RCC_OscConfig+0x30c>
 80025de:	4b5f      	ldr	r3, [pc, #380]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 80025e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025e2:	4a5e      	ldr	r2, [pc, #376]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 80025e4:	f043 0304 	orr.w	r3, r3, #4
 80025e8:	6713      	str	r3, [r2, #112]	@ 0x70
 80025ea:	4b5c      	ldr	r3, [pc, #368]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 80025ec:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025ee:	4a5b      	ldr	r2, [pc, #364]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 80025f0:	f043 0301 	orr.w	r3, r3, #1
 80025f4:	6713      	str	r3, [r2, #112]	@ 0x70
 80025f6:	e00b      	b.n	8002610 <HAL_RCC_OscConfig+0x324>
 80025f8:	4b58      	ldr	r3, [pc, #352]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 80025fa:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80025fc:	4a57      	ldr	r2, [pc, #348]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 80025fe:	f023 0301 	bic.w	r3, r3, #1
 8002602:	6713      	str	r3, [r2, #112]	@ 0x70
 8002604:	4b55      	ldr	r3, [pc, #340]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 8002606:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002608:	4a54      	ldr	r2, [pc, #336]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 800260a:	f023 0304 	bic.w	r3, r3, #4
 800260e:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8002610:	687b      	ldr	r3, [r7, #4]
 8002612:	689b      	ldr	r3, [r3, #8]
 8002614:	2b00      	cmp	r3, #0
 8002616:	d015      	beq.n	8002644 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8002618:	f7ff fb56 	bl	8001cc8 <HAL_GetTick>
 800261c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800261e:	e00a      	b.n	8002636 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8002620:	f7ff fb52 	bl	8001cc8 <HAL_GetTick>
 8002624:	4602      	mov	r2, r0
 8002626:	693b      	ldr	r3, [r7, #16]
 8002628:	1ad3      	subs	r3, r2, r3
 800262a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800262e:	4293      	cmp	r3, r2
 8002630:	d901      	bls.n	8002636 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8002632:	2303      	movs	r3, #3
 8002634:	e0cb      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8002636:	4b49      	ldr	r3, [pc, #292]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 8002638:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800263a:	f003 0302 	and.w	r3, r3, #2
 800263e:	2b00      	cmp	r3, #0
 8002640:	d0ee      	beq.n	8002620 <HAL_RCC_OscConfig+0x334>
 8002642:	e014      	b.n	800266e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8002644:	f7ff fb40 	bl	8001cc8 <HAL_GetTick>
 8002648:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800264a:	e00a      	b.n	8002662 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800264c:	f7ff fb3c 	bl	8001cc8 <HAL_GetTick>
 8002650:	4602      	mov	r2, r0
 8002652:	693b      	ldr	r3, [r7, #16]
 8002654:	1ad3      	subs	r3, r2, r3
 8002656:	f241 3288 	movw	r2, #5000	@ 0x1388
 800265a:	4293      	cmp	r3, r2
 800265c:	d901      	bls.n	8002662 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800265e:	2303      	movs	r3, #3
 8002660:	e0b5      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8002662:	4b3e      	ldr	r3, [pc, #248]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 8002664:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8002666:	f003 0302 	and.w	r3, r3, #2
 800266a:	2b00      	cmp	r3, #0
 800266c:	d1ee      	bne.n	800264c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800266e:	7dfb      	ldrb	r3, [r7, #23]
 8002670:	2b01      	cmp	r3, #1
 8002672:	d105      	bne.n	8002680 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8002674:	4b39      	ldr	r3, [pc, #228]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 8002676:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002678:	4a38      	ldr	r2, [pc, #224]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 800267a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 800267e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8002680:	687b      	ldr	r3, [r7, #4]
 8002682:	699b      	ldr	r3, [r3, #24]
 8002684:	2b00      	cmp	r3, #0
 8002686:	f000 80a1 	beq.w	80027cc <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800268a:	4b34      	ldr	r3, [pc, #208]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 800268c:	689b      	ldr	r3, [r3, #8]
 800268e:	f003 030c 	and.w	r3, r3, #12
 8002692:	2b08      	cmp	r3, #8
 8002694:	d05c      	beq.n	8002750 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8002696:	687b      	ldr	r3, [r7, #4]
 8002698:	699b      	ldr	r3, [r3, #24]
 800269a:	2b02      	cmp	r3, #2
 800269c:	d141      	bne.n	8002722 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800269e:	4b31      	ldr	r3, [pc, #196]	@ (8002764 <HAL_RCC_OscConfig+0x478>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026a4:	f7ff fb10 	bl	8001cc8 <HAL_GetTick>
 80026a8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026aa:	e008      	b.n	80026be <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80026ac:	f7ff fb0c 	bl	8001cc8 <HAL_GetTick>
 80026b0:	4602      	mov	r2, r0
 80026b2:	693b      	ldr	r3, [r7, #16]
 80026b4:	1ad3      	subs	r3, r2, r3
 80026b6:	2b02      	cmp	r3, #2
 80026b8:	d901      	bls.n	80026be <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80026ba:	2303      	movs	r3, #3
 80026bc:	e087      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80026be:	4b27      	ldr	r3, [pc, #156]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80026c6:	2b00      	cmp	r3, #0
 80026c8:	d1f0      	bne.n	80026ac <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	69da      	ldr	r2, [r3, #28]
 80026ce:	687b      	ldr	r3, [r7, #4]
 80026d0:	6a1b      	ldr	r3, [r3, #32]
 80026d2:	431a      	orrs	r2, r3
 80026d4:	687b      	ldr	r3, [r7, #4]
 80026d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80026d8:	019b      	lsls	r3, r3, #6
 80026da:	431a      	orrs	r2, r3
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80026e0:	085b      	lsrs	r3, r3, #1
 80026e2:	3b01      	subs	r3, #1
 80026e4:	041b      	lsls	r3, r3, #16
 80026e6:	431a      	orrs	r2, r3
 80026e8:	687b      	ldr	r3, [r7, #4]
 80026ea:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80026ec:	061b      	lsls	r3, r3, #24
 80026ee:	491b      	ldr	r1, [pc, #108]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 80026f0:	4313      	orrs	r3, r2
 80026f2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80026f4:	4b1b      	ldr	r3, [pc, #108]	@ (8002764 <HAL_RCC_OscConfig+0x478>)
 80026f6:	2201      	movs	r2, #1
 80026f8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80026fa:	f7ff fae5 	bl	8001cc8 <HAL_GetTick>
 80026fe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002700:	e008      	b.n	8002714 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002702:	f7ff fae1 	bl	8001cc8 <HAL_GetTick>
 8002706:	4602      	mov	r2, r0
 8002708:	693b      	ldr	r3, [r7, #16]
 800270a:	1ad3      	subs	r3, r2, r3
 800270c:	2b02      	cmp	r3, #2
 800270e:	d901      	bls.n	8002714 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8002710:	2303      	movs	r3, #3
 8002712:	e05c      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8002714:	4b11      	ldr	r3, [pc, #68]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 8002716:	681b      	ldr	r3, [r3, #0]
 8002718:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800271c:	2b00      	cmp	r3, #0
 800271e:	d0f0      	beq.n	8002702 <HAL_RCC_OscConfig+0x416>
 8002720:	e054      	b.n	80027cc <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8002722:	4b10      	ldr	r3, [pc, #64]	@ (8002764 <HAL_RCC_OscConfig+0x478>)
 8002724:	2200      	movs	r2, #0
 8002726:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8002728:	f7ff face 	bl	8001cc8 <HAL_GetTick>
 800272c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800272e:	e008      	b.n	8002742 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8002730:	f7ff faca 	bl	8001cc8 <HAL_GetTick>
 8002734:	4602      	mov	r2, r0
 8002736:	693b      	ldr	r3, [r7, #16]
 8002738:	1ad3      	subs	r3, r2, r3
 800273a:	2b02      	cmp	r3, #2
 800273c:	d901      	bls.n	8002742 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800273e:	2303      	movs	r3, #3
 8002740:	e045      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8002742:	4b06      	ldr	r3, [pc, #24]	@ (800275c <HAL_RCC_OscConfig+0x470>)
 8002744:	681b      	ldr	r3, [r3, #0]
 8002746:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800274a:	2b00      	cmp	r3, #0
 800274c:	d1f0      	bne.n	8002730 <HAL_RCC_OscConfig+0x444>
 800274e:	e03d      	b.n	80027cc <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	699b      	ldr	r3, [r3, #24]
 8002754:	2b01      	cmp	r3, #1
 8002756:	d107      	bne.n	8002768 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8002758:	2301      	movs	r3, #1
 800275a:	e038      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
 800275c:	40023800 	.word	0x40023800
 8002760:	40007000 	.word	0x40007000
 8002764:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8002768:	4b1b      	ldr	r3, [pc, #108]	@ (80027d8 <HAL_RCC_OscConfig+0x4ec>)
 800276a:	685b      	ldr	r3, [r3, #4]
 800276c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	699b      	ldr	r3, [r3, #24]
 8002772:	2b01      	cmp	r3, #1
 8002774:	d028      	beq.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8002776:	68fb      	ldr	r3, [r7, #12]
 8002778:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 800277c:	687b      	ldr	r3, [r7, #4]
 800277e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8002780:	429a      	cmp	r2, r3
 8002782:	d121      	bne.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8002784:	68fb      	ldr	r3, [r7, #12]
 8002786:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 800278a:	687b      	ldr	r3, [r7, #4]
 800278c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800278e:	429a      	cmp	r2, r3
 8002790:	d11a      	bne.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8002792:	68fa      	ldr	r2, [r7, #12]
 8002794:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8002798:	4013      	ands	r3, r2
 800279a:	687a      	ldr	r2, [r7, #4]
 800279c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800279e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80027a0:	4293      	cmp	r3, r2
 80027a2:	d111      	bne.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027a4:	68fb      	ldr	r3, [r7, #12]
 80027a6:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80027aa:	687b      	ldr	r3, [r7, #4]
 80027ac:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80027ae:	085b      	lsrs	r3, r3, #1
 80027b0:	3b01      	subs	r3, #1
 80027b2:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80027b4:	429a      	cmp	r2, r3
 80027b6:	d107      	bne.n	80027c8 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80027b8:	68fb      	ldr	r3, [r7, #12]
 80027ba:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 80027be:	687b      	ldr	r3, [r7, #4]
 80027c0:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80027c2:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80027c4:	429a      	cmp	r2, r3
 80027c6:	d001      	beq.n	80027cc <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80027c8:	2301      	movs	r3, #1
 80027ca:	e000      	b.n	80027ce <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80027cc:	2300      	movs	r3, #0
}
 80027ce:	4618      	mov	r0, r3
 80027d0:	3718      	adds	r7, #24
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40023800 	.word	0x40023800

080027dc <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80027dc:	b580      	push	{r7, lr}
 80027de:	b084      	sub	sp, #16
 80027e0:	af00      	add	r7, sp, #0
 80027e2:	6078      	str	r0, [r7, #4]
 80027e4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	2b00      	cmp	r3, #0
 80027ea:	d101      	bne.n	80027f0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80027ec:	2301      	movs	r3, #1
 80027ee:	e0cc      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80027f0:	4b68      	ldr	r3, [pc, #416]	@ (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	f003 0307 	and.w	r3, r3, #7
 80027f8:	683a      	ldr	r2, [r7, #0]
 80027fa:	429a      	cmp	r2, r3
 80027fc:	d90c      	bls.n	8002818 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80027fe:	4b65      	ldr	r3, [pc, #404]	@ (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 8002800:	683a      	ldr	r2, [r7, #0]
 8002802:	b2d2      	uxtb	r2, r2
 8002804:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002806:	4b63      	ldr	r3, [pc, #396]	@ (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 8002808:	681b      	ldr	r3, [r3, #0]
 800280a:	f003 0307 	and.w	r3, r3, #7
 800280e:	683a      	ldr	r2, [r7, #0]
 8002810:	429a      	cmp	r2, r3
 8002812:	d001      	beq.n	8002818 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8002814:	2301      	movs	r3, #1
 8002816:	e0b8      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8002818:	687b      	ldr	r3, [r7, #4]
 800281a:	681b      	ldr	r3, [r3, #0]
 800281c:	f003 0302 	and.w	r3, r3, #2
 8002820:	2b00      	cmp	r3, #0
 8002822:	d020      	beq.n	8002866 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002824:	687b      	ldr	r3, [r7, #4]
 8002826:	681b      	ldr	r3, [r3, #0]
 8002828:	f003 0304 	and.w	r3, r3, #4
 800282c:	2b00      	cmp	r3, #0
 800282e:	d005      	beq.n	800283c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8002830:	4b59      	ldr	r3, [pc, #356]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002832:	689b      	ldr	r3, [r3, #8]
 8002834:	4a58      	ldr	r2, [pc, #352]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002836:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 800283a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800283c:	687b      	ldr	r3, [r7, #4]
 800283e:	681b      	ldr	r3, [r3, #0]
 8002840:	f003 0308 	and.w	r3, r3, #8
 8002844:	2b00      	cmp	r3, #0
 8002846:	d005      	beq.n	8002854 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8002848:	4b53      	ldr	r3, [pc, #332]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800284a:	689b      	ldr	r3, [r3, #8]
 800284c:	4a52      	ldr	r2, [pc, #328]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800284e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8002852:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8002854:	4b50      	ldr	r3, [pc, #320]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002856:	689b      	ldr	r3, [r3, #8]
 8002858:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 800285c:	687b      	ldr	r3, [r7, #4]
 800285e:	689b      	ldr	r3, [r3, #8]
 8002860:	494d      	ldr	r1, [pc, #308]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002862:	4313      	orrs	r3, r2
 8002864:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8002866:	687b      	ldr	r3, [r7, #4]
 8002868:	681b      	ldr	r3, [r3, #0]
 800286a:	f003 0301 	and.w	r3, r3, #1
 800286e:	2b00      	cmp	r3, #0
 8002870:	d044      	beq.n	80028fc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8002872:	687b      	ldr	r3, [r7, #4]
 8002874:	685b      	ldr	r3, [r3, #4]
 8002876:	2b01      	cmp	r3, #1
 8002878:	d107      	bne.n	800288a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800287a:	4b47      	ldr	r3, [pc, #284]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800287c:	681b      	ldr	r3, [r3, #0]
 800287e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002882:	2b00      	cmp	r3, #0
 8002884:	d119      	bne.n	80028ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8002886:	2301      	movs	r3, #1
 8002888:	e07f      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800288a:	687b      	ldr	r3, [r7, #4]
 800288c:	685b      	ldr	r3, [r3, #4]
 800288e:	2b02      	cmp	r3, #2
 8002890:	d003      	beq.n	800289a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8002892:	687b      	ldr	r3, [r7, #4]
 8002894:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8002896:	2b03      	cmp	r3, #3
 8002898:	d107      	bne.n	80028aa <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800289a:	4b3f      	ldr	r3, [pc, #252]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80028a2:	2b00      	cmp	r3, #0
 80028a4:	d109      	bne.n	80028ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028a6:	2301      	movs	r3, #1
 80028a8:	e06f      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80028aa:	4b3b      	ldr	r3, [pc, #236]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	f003 0302 	and.w	r3, r3, #2
 80028b2:	2b00      	cmp	r3, #0
 80028b4:	d101      	bne.n	80028ba <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80028b6:	2301      	movs	r3, #1
 80028b8:	e067      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80028ba:	4b37      	ldr	r3, [pc, #220]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 80028bc:	689b      	ldr	r3, [r3, #8]
 80028be:	f023 0203 	bic.w	r2, r3, #3
 80028c2:	687b      	ldr	r3, [r7, #4]
 80028c4:	685b      	ldr	r3, [r3, #4]
 80028c6:	4934      	ldr	r1, [pc, #208]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 80028c8:	4313      	orrs	r3, r2
 80028ca:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80028cc:	f7ff f9fc 	bl	8001cc8 <HAL_GetTick>
 80028d0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028d2:	e00a      	b.n	80028ea <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80028d4:	f7ff f9f8 	bl	8001cc8 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	f241 3288 	movw	r2, #5000	@ 0x1388
 80028e2:	4293      	cmp	r3, r2
 80028e4:	d901      	bls.n	80028ea <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80028e6:	2303      	movs	r3, #3
 80028e8:	e04f      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80028ea:	4b2b      	ldr	r3, [pc, #172]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 80028ec:	689b      	ldr	r3, [r3, #8]
 80028ee:	f003 020c 	and.w	r2, r3, #12
 80028f2:	687b      	ldr	r3, [r7, #4]
 80028f4:	685b      	ldr	r3, [r3, #4]
 80028f6:	009b      	lsls	r3, r3, #2
 80028f8:	429a      	cmp	r2, r3
 80028fa:	d1eb      	bne.n	80028d4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80028fc:	4b25      	ldr	r3, [pc, #148]	@ (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	f003 0307 	and.w	r3, r3, #7
 8002904:	683a      	ldr	r2, [r7, #0]
 8002906:	429a      	cmp	r2, r3
 8002908:	d20c      	bcs.n	8002924 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800290a:	4b22      	ldr	r3, [pc, #136]	@ (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 800290c:	683a      	ldr	r2, [r7, #0]
 800290e:	b2d2      	uxtb	r2, r2
 8002910:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8002912:	4b20      	ldr	r3, [pc, #128]	@ (8002994 <HAL_RCC_ClockConfig+0x1b8>)
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f003 0307 	and.w	r3, r3, #7
 800291a:	683a      	ldr	r2, [r7, #0]
 800291c:	429a      	cmp	r2, r3
 800291e:	d001      	beq.n	8002924 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8002920:	2301      	movs	r3, #1
 8002922:	e032      	b.n	800298a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8002924:	687b      	ldr	r3, [r7, #4]
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	f003 0304 	and.w	r3, r3, #4
 800292c:	2b00      	cmp	r3, #0
 800292e:	d008      	beq.n	8002942 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8002930:	4b19      	ldr	r3, [pc, #100]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002932:	689b      	ldr	r3, [r3, #8]
 8002934:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8002938:	687b      	ldr	r3, [r7, #4]
 800293a:	68db      	ldr	r3, [r3, #12]
 800293c:	4916      	ldr	r1, [pc, #88]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800293e:	4313      	orrs	r3, r2
 8002940:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	681b      	ldr	r3, [r3, #0]
 8002946:	f003 0308 	and.w	r3, r3, #8
 800294a:	2b00      	cmp	r3, #0
 800294c:	d009      	beq.n	8002962 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800294e:	4b12      	ldr	r3, [pc, #72]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 8002950:	689b      	ldr	r3, [r3, #8]
 8002952:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8002956:	687b      	ldr	r3, [r7, #4]
 8002958:	691b      	ldr	r3, [r3, #16]
 800295a:	00db      	lsls	r3, r3, #3
 800295c:	490e      	ldr	r1, [pc, #56]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800295e:	4313      	orrs	r3, r2
 8002960:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8002962:	f000 f821 	bl	80029a8 <HAL_RCC_GetSysClockFreq>
 8002966:	4602      	mov	r2, r0
 8002968:	4b0b      	ldr	r3, [pc, #44]	@ (8002998 <HAL_RCC_ClockConfig+0x1bc>)
 800296a:	689b      	ldr	r3, [r3, #8]
 800296c:	091b      	lsrs	r3, r3, #4
 800296e:	f003 030f 	and.w	r3, r3, #15
 8002972:	490a      	ldr	r1, [pc, #40]	@ (800299c <HAL_RCC_ClockConfig+0x1c0>)
 8002974:	5ccb      	ldrb	r3, [r1, r3]
 8002976:	fa22 f303 	lsr.w	r3, r2, r3
 800297a:	4a09      	ldr	r2, [pc, #36]	@ (80029a0 <HAL_RCC_ClockConfig+0x1c4>)
 800297c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800297e:	4b09      	ldr	r3, [pc, #36]	@ (80029a4 <HAL_RCC_ClockConfig+0x1c8>)
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	4618      	mov	r0, r3
 8002984:	f7ff f95c 	bl	8001c40 <HAL_InitTick>

  return HAL_OK;
 8002988:	2300      	movs	r3, #0
}
 800298a:	4618      	mov	r0, r3
 800298c:	3710      	adds	r7, #16
 800298e:	46bd      	mov	sp, r7
 8002990:	bd80      	pop	{r7, pc}
 8002992:	bf00      	nop
 8002994:	40023c00 	.word	0x40023c00
 8002998:	40023800 	.word	0x40023800
 800299c:	0800aee0 	.word	0x0800aee0
 80029a0:	20000000 	.word	0x20000000
 80029a4:	20000004 	.word	0x20000004

080029a8 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80029a8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80029ac:	b090      	sub	sp, #64	@ 0x40
 80029ae:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80029b0:	2300      	movs	r3, #0
 80029b2:	637b      	str	r3, [r7, #52]	@ 0x34
 80029b4:	2300      	movs	r3, #0
 80029b6:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80029b8:	2300      	movs	r3, #0
 80029ba:	633b      	str	r3, [r7, #48]	@ 0x30
  uint32_t sysclockfreq = 0U;
 80029bc:	2300      	movs	r3, #0
 80029be:	63bb      	str	r3, [r7, #56]	@ 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80029c0:	4b59      	ldr	r3, [pc, #356]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x180>)
 80029c2:	689b      	ldr	r3, [r3, #8]
 80029c4:	f003 030c 	and.w	r3, r3, #12
 80029c8:	2b08      	cmp	r3, #8
 80029ca:	d00d      	beq.n	80029e8 <HAL_RCC_GetSysClockFreq+0x40>
 80029cc:	2b08      	cmp	r3, #8
 80029ce:	f200 80a1 	bhi.w	8002b14 <HAL_RCC_GetSysClockFreq+0x16c>
 80029d2:	2b00      	cmp	r3, #0
 80029d4:	d002      	beq.n	80029dc <HAL_RCC_GetSysClockFreq+0x34>
 80029d6:	2b04      	cmp	r3, #4
 80029d8:	d003      	beq.n	80029e2 <HAL_RCC_GetSysClockFreq+0x3a>
 80029da:	e09b      	b.n	8002b14 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80029dc:	4b53      	ldr	r3, [pc, #332]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x184>)
 80029de:	63bb      	str	r3, [r7, #56]	@ 0x38
       break;
 80029e0:	e09b      	b.n	8002b1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80029e2:	4b53      	ldr	r3, [pc, #332]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x188>)
 80029e4:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 80029e6:	e098      	b.n	8002b1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80029e8:	4b4f      	ldr	r3, [pc, #316]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x180>)
 80029ea:	685b      	ldr	r3, [r3, #4]
 80029ec:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80029f0:	637b      	str	r3, [r7, #52]	@ 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80029f2:	4b4d      	ldr	r3, [pc, #308]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x180>)
 80029f4:	685b      	ldr	r3, [r3, #4]
 80029f6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80029fa:	2b00      	cmp	r3, #0
 80029fc:	d028      	beq.n	8002a50 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80029fe:	4b4a      	ldr	r3, [pc, #296]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	099b      	lsrs	r3, r3, #6
 8002a04:	2200      	movs	r2, #0
 8002a06:	623b      	str	r3, [r7, #32]
 8002a08:	627a      	str	r2, [r7, #36]	@ 0x24
 8002a0a:	6a3b      	ldr	r3, [r7, #32]
 8002a0c:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8002a10:	2100      	movs	r1, #0
 8002a12:	4b47      	ldr	r3, [pc, #284]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a14:	fb03 f201 	mul.w	r2, r3, r1
 8002a18:	2300      	movs	r3, #0
 8002a1a:	fb00 f303 	mul.w	r3, r0, r3
 8002a1e:	4413      	add	r3, r2
 8002a20:	4a43      	ldr	r2, [pc, #268]	@ (8002b30 <HAL_RCC_GetSysClockFreq+0x188>)
 8002a22:	fba0 1202 	umull	r1, r2, r0, r2
 8002a26:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002a28:	460a      	mov	r2, r1
 8002a2a:	62ba      	str	r2, [r7, #40]	@ 0x28
 8002a2c:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002a2e:	4413      	add	r3, r2
 8002a30:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002a32:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002a34:	2200      	movs	r2, #0
 8002a36:	61bb      	str	r3, [r7, #24]
 8002a38:	61fa      	str	r2, [r7, #28]
 8002a3a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002a3e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	@ 0x28
 8002a42:	f7fd fbc9 	bl	80001d8 <__aeabi_uldivmod>
 8002a46:	4602      	mov	r2, r0
 8002a48:	460b      	mov	r3, r1
 8002a4a:	4613      	mov	r3, r2
 8002a4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a4e:	e053      	b.n	8002af8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8002a50:	4b35      	ldr	r3, [pc, #212]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x180>)
 8002a52:	685b      	ldr	r3, [r3, #4]
 8002a54:	099b      	lsrs	r3, r3, #6
 8002a56:	2200      	movs	r2, #0
 8002a58:	613b      	str	r3, [r7, #16]
 8002a5a:	617a      	str	r2, [r7, #20]
 8002a5c:	693b      	ldr	r3, [r7, #16]
 8002a5e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8002a62:	f04f 0b00 	mov.w	fp, #0
 8002a66:	4652      	mov	r2, sl
 8002a68:	465b      	mov	r3, fp
 8002a6a:	f04f 0000 	mov.w	r0, #0
 8002a6e:	f04f 0100 	mov.w	r1, #0
 8002a72:	0159      	lsls	r1, r3, #5
 8002a74:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8002a78:	0150      	lsls	r0, r2, #5
 8002a7a:	4602      	mov	r2, r0
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	ebb2 080a 	subs.w	r8, r2, sl
 8002a82:	eb63 090b 	sbc.w	r9, r3, fp
 8002a86:	f04f 0200 	mov.w	r2, #0
 8002a8a:	f04f 0300 	mov.w	r3, #0
 8002a8e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8002a92:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8002a96:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8002a9a:	ebb2 0408 	subs.w	r4, r2, r8
 8002a9e:	eb63 0509 	sbc.w	r5, r3, r9
 8002aa2:	f04f 0200 	mov.w	r2, #0
 8002aa6:	f04f 0300 	mov.w	r3, #0
 8002aaa:	00eb      	lsls	r3, r5, #3
 8002aac:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002ab0:	00e2      	lsls	r2, r4, #3
 8002ab2:	4614      	mov	r4, r2
 8002ab4:	461d      	mov	r5, r3
 8002ab6:	eb14 030a 	adds.w	r3, r4, sl
 8002aba:	603b      	str	r3, [r7, #0]
 8002abc:	eb45 030b 	adc.w	r3, r5, fp
 8002ac0:	607b      	str	r3, [r7, #4]
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	f04f 0300 	mov.w	r3, #0
 8002aca:	e9d7 4500 	ldrd	r4, r5, [r7]
 8002ace:	4629      	mov	r1, r5
 8002ad0:	028b      	lsls	r3, r1, #10
 8002ad2:	4621      	mov	r1, r4
 8002ad4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8002ad8:	4621      	mov	r1, r4
 8002ada:	028a      	lsls	r2, r1, #10
 8002adc:	4610      	mov	r0, r2
 8002ade:	4619      	mov	r1, r3
 8002ae0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002ae2:	2200      	movs	r2, #0
 8002ae4:	60bb      	str	r3, [r7, #8]
 8002ae6:	60fa      	str	r2, [r7, #12]
 8002ae8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002aec:	f7fd fb74 	bl	80001d8 <__aeabi_uldivmod>
 8002af0:	4602      	mov	r2, r0
 8002af2:	460b      	mov	r3, r1
 8002af4:	4613      	mov	r3, r2
 8002af6:	63fb      	str	r3, [r7, #60]	@ 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8002af8:	4b0b      	ldr	r3, [pc, #44]	@ (8002b28 <HAL_RCC_GetSysClockFreq+0x180>)
 8002afa:	685b      	ldr	r3, [r3, #4]
 8002afc:	0c1b      	lsrs	r3, r3, #16
 8002afe:	f003 0303 	and.w	r3, r3, #3
 8002b02:	3301      	adds	r3, #1
 8002b04:	005b      	lsls	r3, r3, #1
 8002b06:	633b      	str	r3, [r7, #48]	@ 0x30

      sysclockfreq = pllvco/pllp;
 8002b08:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 8002b0a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002b0c:	fbb2 f3f3 	udiv	r3, r2, r3
 8002b10:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b12:	e002      	b.n	8002b1a <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8002b14:	4b05      	ldr	r3, [pc, #20]	@ (8002b2c <HAL_RCC_GetSysClockFreq+0x184>)
 8002b16:	63bb      	str	r3, [r7, #56]	@ 0x38
      break;
 8002b18:	bf00      	nop
    }
  }
  return sysclockfreq;
 8002b1a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
}
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	3740      	adds	r7, #64	@ 0x40
 8002b20:	46bd      	mov	sp, r7
 8002b22:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002b26:	bf00      	nop
 8002b28:	40023800 	.word	0x40023800
 8002b2c:	00f42400 	.word	0x00f42400
 8002b30:	017d7840 	.word	0x017d7840

08002b34 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8002b34:	b580      	push	{r7, lr}
 8002b36:	b082      	sub	sp, #8
 8002b38:	af00      	add	r7, sp, #0
 8002b3a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2b00      	cmp	r3, #0
 8002b40:	d101      	bne.n	8002b46 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8002b42:	2301      	movs	r3, #1
 8002b44:	e07b      	b.n	8002c3e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8002b46:	687b      	ldr	r3, [r7, #4]
 8002b48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d108      	bne.n	8002b60 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	685b      	ldr	r3, [r3, #4]
 8002b52:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002b56:	d009      	beq.n	8002b6c <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	2200      	movs	r2, #0
 8002b5c:	61da      	str	r2, [r3, #28]
 8002b5e:	e005      	b.n	8002b6c <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8002b60:	687b      	ldr	r3, [r7, #4]
 8002b62:	2200      	movs	r2, #0
 8002b64:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8002b66:	687b      	ldr	r3, [r7, #4]
 8002b68:	2200      	movs	r2, #0
 8002b6a:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8002b6c:	687b      	ldr	r3, [r7, #4]
 8002b6e:	2200      	movs	r2, #0
 8002b70:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8002b72:	687b      	ldr	r3, [r7, #4]
 8002b74:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002b78:	b2db      	uxtb	r3, r3
 8002b7a:	2b00      	cmp	r3, #0
 8002b7c:	d106      	bne.n	8002b8c <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	2200      	movs	r2, #0
 8002b82:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8002b86:	6878      	ldr	r0, [r7, #4]
 8002b88:	f7fe fee0 	bl	800194c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8002b8c:	687b      	ldr	r3, [r7, #4]
 8002b8e:	2202      	movs	r2, #2
 8002b90:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8002b94:	687b      	ldr	r3, [r7, #4]
 8002b96:	681b      	ldr	r3, [r3, #0]
 8002b98:	681a      	ldr	r2, [r3, #0]
 8002b9a:	687b      	ldr	r3, [r7, #4]
 8002b9c:	681b      	ldr	r3, [r3, #0]
 8002b9e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002ba2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8002ba4:	687b      	ldr	r3, [r7, #4]
 8002ba6:	685b      	ldr	r3, [r3, #4]
 8002ba8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8002bac:	687b      	ldr	r3, [r7, #4]
 8002bae:	689b      	ldr	r3, [r3, #8]
 8002bb0:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8002bb4:	431a      	orrs	r2, r3
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	68db      	ldr	r3, [r3, #12]
 8002bba:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8002bbe:	431a      	orrs	r2, r3
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	691b      	ldr	r3, [r3, #16]
 8002bc4:	f003 0302 	and.w	r3, r3, #2
 8002bc8:	431a      	orrs	r2, r3
 8002bca:	687b      	ldr	r3, [r7, #4]
 8002bcc:	695b      	ldr	r3, [r3, #20]
 8002bce:	f003 0301 	and.w	r3, r3, #1
 8002bd2:	431a      	orrs	r2, r3
 8002bd4:	687b      	ldr	r3, [r7, #4]
 8002bd6:	699b      	ldr	r3, [r3, #24]
 8002bd8:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8002bdc:	431a      	orrs	r2, r3
 8002bde:	687b      	ldr	r3, [r7, #4]
 8002be0:	69db      	ldr	r3, [r3, #28]
 8002be2:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8002be6:	431a      	orrs	r2, r3
 8002be8:	687b      	ldr	r3, [r7, #4]
 8002bea:	6a1b      	ldr	r3, [r3, #32]
 8002bec:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002bf0:	ea42 0103 	orr.w	r1, r2, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002bf8:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	681b      	ldr	r3, [r3, #0]
 8002c00:	430a      	orrs	r2, r1
 8002c02:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8002c04:	687b      	ldr	r3, [r7, #4]
 8002c06:	699b      	ldr	r3, [r3, #24]
 8002c08:	0c1b      	lsrs	r3, r3, #16
 8002c0a:	f003 0104 	and.w	r1, r3, #4
 8002c0e:	687b      	ldr	r3, [r7, #4]
 8002c10:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c12:	f003 0210 	and.w	r2, r3, #16
 8002c16:	687b      	ldr	r3, [r7, #4]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	430a      	orrs	r2, r1
 8002c1c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8002c1e:	687b      	ldr	r3, [r7, #4]
 8002c20:	681b      	ldr	r3, [r3, #0]
 8002c22:	69da      	ldr	r2, [r3, #28]
 8002c24:	687b      	ldr	r3, [r7, #4]
 8002c26:	681b      	ldr	r3, [r3, #0]
 8002c28:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002c2c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8002c2e:	687b      	ldr	r3, [r7, #4]
 8002c30:	2200      	movs	r2, #0
 8002c32:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8002c34:	687b      	ldr	r3, [r7, #4]
 8002c36:	2201      	movs	r2, #1
 8002c38:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}

08002c46 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002c46:	b580      	push	{r7, lr}
 8002c48:	b088      	sub	sp, #32
 8002c4a:	af02      	add	r7, sp, #8
 8002c4c:	60f8      	str	r0, [r7, #12]
 8002c4e:	60b9      	str	r1, [r7, #8]
 8002c50:	603b      	str	r3, [r7, #0]
 8002c52:	4613      	mov	r3, r2
 8002c54:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8002c56:	2300      	movs	r3, #0
 8002c58:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8002c5a:	68fb      	ldr	r3, [r7, #12]
 8002c5c:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002c60:	b2db      	uxtb	r3, r3
 8002c62:	2b01      	cmp	r3, #1
 8002c64:	d002      	beq.n	8002c6c <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8002c66:	2302      	movs	r3, #2
 8002c68:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002c6a:	e0fb      	b.n	8002e64 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8002c6c:	68fb      	ldr	r3, [r7, #12]
 8002c6e:	685b      	ldr	r3, [r3, #4]
 8002c70:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002c74:	d112      	bne.n	8002c9c <HAL_SPI_Receive+0x56>
 8002c76:	68fb      	ldr	r3, [r7, #12]
 8002c78:	689b      	ldr	r3, [r3, #8]
 8002c7a:	2b00      	cmp	r3, #0
 8002c7c:	d10e      	bne.n	8002c9c <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	2204      	movs	r2, #4
 8002c82:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8002c86:	88fa      	ldrh	r2, [r7, #6]
 8002c88:	683b      	ldr	r3, [r7, #0]
 8002c8a:	9300      	str	r3, [sp, #0]
 8002c8c:	4613      	mov	r3, r2
 8002c8e:	68ba      	ldr	r2, [r7, #8]
 8002c90:	68b9      	ldr	r1, [r7, #8]
 8002c92:	68f8      	ldr	r0, [r7, #12]
 8002c94:	f000 f8ef 	bl	8002e76 <HAL_SPI_TransmitReceive>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	e0e8      	b.n	8002e6e <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002c9c:	68fb      	ldr	r3, [r7, #12]
 8002c9e:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002ca2:	2b01      	cmp	r3, #1
 8002ca4:	d101      	bne.n	8002caa <HAL_SPI_Receive+0x64>
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	e0e1      	b.n	8002e6e <HAL_SPI_Receive+0x228>
 8002caa:	68fb      	ldr	r3, [r7, #12]
 8002cac:	2201      	movs	r2, #1
 8002cae:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002cb2:	f7ff f809 	bl	8001cc8 <HAL_GetTick>
 8002cb6:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8002cb8:	68bb      	ldr	r3, [r7, #8]
 8002cba:	2b00      	cmp	r3, #0
 8002cbc:	d002      	beq.n	8002cc4 <HAL_SPI_Receive+0x7e>
 8002cbe:	88fb      	ldrh	r3, [r7, #6]
 8002cc0:	2b00      	cmp	r3, #0
 8002cc2:	d102      	bne.n	8002cca <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8002cc4:	2301      	movs	r3, #1
 8002cc6:	75fb      	strb	r3, [r7, #23]
    goto error;
 8002cc8:	e0cc      	b.n	8002e64 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	2204      	movs	r2, #4
 8002cce:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002cd2:	68fb      	ldr	r3, [r7, #12]
 8002cd4:	2200      	movs	r2, #0
 8002cd6:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	68ba      	ldr	r2, [r7, #8]
 8002cdc:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferSize  = Size;
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	88fa      	ldrh	r2, [r7, #6]
 8002ce2:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->RxXferCount = Size;
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	88fa      	ldrh	r2, [r7, #6]
 8002ce8:	87da      	strh	r2, [r3, #62]	@ 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8002cea:	68fb      	ldr	r3, [r7, #12]
 8002cec:	2200      	movs	r2, #0
 8002cee:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferSize  = 0U;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	869a      	strh	r2, [r3, #52]	@ 0x34
  hspi->TxXferCount = 0U;
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	2200      	movs	r2, #0
 8002cfa:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->RxISR       = NULL;
 8002cfc:	68fb      	ldr	r3, [r7, #12]
 8002cfe:	2200      	movs	r2, #0
 8002d00:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	2200      	movs	r2, #0
 8002d06:	645a      	str	r2, [r3, #68]	@ 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8002d08:	68fb      	ldr	r3, [r7, #12]
 8002d0a:	689b      	ldr	r3, [r3, #8]
 8002d0c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002d10:	d10f      	bne.n	8002d32 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8002d12:	68fb      	ldr	r3, [r7, #12]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	681a      	ldr	r2, [r3, #0]
 8002d18:	68fb      	ldr	r3, [r7, #12]
 8002d1a:	681b      	ldr	r3, [r3, #0]
 8002d1c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8002d20:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	681a      	ldr	r2, [r3, #0]
 8002d28:	68fb      	ldr	r3, [r7, #12]
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	f422 4280 	bic.w	r2, r2, #16384	@ 0x4000
 8002d30:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002d32:	68fb      	ldr	r3, [r7, #12]
 8002d34:	681b      	ldr	r3, [r3, #0]
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002d3c:	2b40      	cmp	r3, #64	@ 0x40
 8002d3e:	d007      	beq.n	8002d50 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	681a      	ldr	r2, [r3, #0]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002d4e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8002d50:	68fb      	ldr	r3, [r7, #12]
 8002d52:	68db      	ldr	r3, [r3, #12]
 8002d54:	2b00      	cmp	r3, #0
 8002d56:	d16a      	bne.n	8002e2e <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8002d58:	e032      	b.n	8002dc0 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002d5a:	68fb      	ldr	r3, [r7, #12]
 8002d5c:	681b      	ldr	r3, [r3, #0]
 8002d5e:	689b      	ldr	r3, [r3, #8]
 8002d60:	f003 0301 	and.w	r3, r3, #1
 8002d64:	2b01      	cmp	r3, #1
 8002d66:	d115      	bne.n	8002d94 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8002d68:	68fb      	ldr	r3, [r7, #12]
 8002d6a:	681b      	ldr	r3, [r3, #0]
 8002d6c:	f103 020c 	add.w	r2, r3, #12
 8002d70:	68fb      	ldr	r3, [r7, #12]
 8002d72:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d74:	7812      	ldrb	r2, [r2, #0]
 8002d76:	b2d2      	uxtb	r2, r2
 8002d78:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8002d7a:	68fb      	ldr	r3, [r7, #12]
 8002d7c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002d7e:	1c5a      	adds	r2, r3, #1
 8002d80:	68fb      	ldr	r3, [r7, #12]
 8002d82:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002d84:	68fb      	ldr	r3, [r7, #12]
 8002d86:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002d88:	b29b      	uxth	r3, r3
 8002d8a:	3b01      	subs	r3, #1
 8002d8c:	b29a      	uxth	r2, r3
 8002d8e:	68fb      	ldr	r3, [r7, #12]
 8002d90:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002d92:	e015      	b.n	8002dc0 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002d94:	f7fe ff98 	bl	8001cc8 <HAL_GetTick>
 8002d98:	4602      	mov	r2, r0
 8002d9a:	693b      	ldr	r3, [r7, #16]
 8002d9c:	1ad3      	subs	r3, r2, r3
 8002d9e:	683a      	ldr	r2, [r7, #0]
 8002da0:	429a      	cmp	r2, r3
 8002da2:	d803      	bhi.n	8002dac <HAL_SPI_Receive+0x166>
 8002da4:	683b      	ldr	r3, [r7, #0]
 8002da6:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002daa:	d102      	bne.n	8002db2 <HAL_SPI_Receive+0x16c>
 8002dac:	683b      	ldr	r3, [r7, #0]
 8002dae:	2b00      	cmp	r3, #0
 8002db0:	d106      	bne.n	8002dc0 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8002db2:	2303      	movs	r3, #3
 8002db4:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002db6:	68fb      	ldr	r3, [r7, #12]
 8002db8:	2201      	movs	r2, #1
 8002dba:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002dbe:	e051      	b.n	8002e64 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	2b00      	cmp	r3, #0
 8002dc8:	d1c7      	bne.n	8002d5a <HAL_SPI_Receive+0x114>
 8002dca:	e035      	b.n	8002e38 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8002dcc:	68fb      	ldr	r3, [r7, #12]
 8002dce:	681b      	ldr	r3, [r3, #0]
 8002dd0:	689b      	ldr	r3, [r3, #8]
 8002dd2:	f003 0301 	and.w	r3, r3, #1
 8002dd6:	2b01      	cmp	r3, #1
 8002dd8:	d113      	bne.n	8002e02 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8002dda:	68fb      	ldr	r3, [r7, #12]
 8002ddc:	681b      	ldr	r3, [r3, #0]
 8002dde:	68da      	ldr	r2, [r3, #12]
 8002de0:	68fb      	ldr	r3, [r7, #12]
 8002de2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002de4:	b292      	uxth	r2, r2
 8002de6:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8002de8:	68fb      	ldr	r3, [r7, #12]
 8002dea:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8002dec:	1c9a      	adds	r2, r3, #2
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	87da      	strh	r2, [r3, #62]	@ 0x3e
 8002e00:	e015      	b.n	8002e2e <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8002e02:	f7fe ff61 	bl	8001cc8 <HAL_GetTick>
 8002e06:	4602      	mov	r2, r0
 8002e08:	693b      	ldr	r3, [r7, #16]
 8002e0a:	1ad3      	subs	r3, r2, r3
 8002e0c:	683a      	ldr	r2, [r7, #0]
 8002e0e:	429a      	cmp	r2, r3
 8002e10:	d803      	bhi.n	8002e1a <HAL_SPI_Receive+0x1d4>
 8002e12:	683b      	ldr	r3, [r7, #0]
 8002e14:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8002e18:	d102      	bne.n	8002e20 <HAL_SPI_Receive+0x1da>
 8002e1a:	683b      	ldr	r3, [r7, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	d106      	bne.n	8002e2e <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8002e20:	2303      	movs	r3, #3
 8002e22:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	2201      	movs	r2, #1
 8002e28:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
          goto error;
 8002e2c:	e01a      	b.n	8002e64 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002e32:	b29b      	uxth	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d1c9      	bne.n	8002dcc <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8002e38:	693a      	ldr	r2, [r7, #16]
 8002e3a:	6839      	ldr	r1, [r7, #0]
 8002e3c:	68f8      	ldr	r0, [r7, #12]
 8002e3e:	f000 fa53 	bl	80032e8 <SPI_EndRxTransaction>
 8002e42:	4603      	mov	r3, r0
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	d002      	beq.n	8002e4e <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	2220      	movs	r2, #32
 8002e4c:	655a      	str	r2, [r3, #84]	@ 0x54
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_CRC);
    __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8002e4e:	68fb      	ldr	r3, [r7, #12]
 8002e50:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d002      	beq.n	8002e5c <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8002e56:	2301      	movs	r3, #1
 8002e58:	75fb      	strb	r3, [r7, #23]
 8002e5a:	e003      	b.n	8002e64 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8002e5c:	68fb      	ldr	r3, [r7, #12]
 8002e5e:	2201      	movs	r2, #1
 8002e60:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	2200      	movs	r2, #0
 8002e68:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 8002e6c:	7dfb      	ldrb	r3, [r7, #23]
}
 8002e6e:	4618      	mov	r0, r3
 8002e70:	3718      	adds	r7, #24
 8002e72:	46bd      	mov	sp, r7
 8002e74:	bd80      	pop	{r7, pc}

08002e76 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8002e76:	b580      	push	{r7, lr}
 8002e78:	b08c      	sub	sp, #48	@ 0x30
 8002e7a:	af00      	add	r7, sp, #0
 8002e7c:	60f8      	str	r0, [r7, #12]
 8002e7e:	60b9      	str	r1, [r7, #8]
 8002e80:	607a      	str	r2, [r7, #4]
 8002e82:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8002e84:	2301      	movs	r3, #1
 8002e86:	62fb      	str	r3, [r7, #44]	@ 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8002e88:	2300      	movs	r3, #0
 8002e8a:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	f893 3050 	ldrb.w	r3, [r3, #80]	@ 0x50
 8002e94:	2b01      	cmp	r3, #1
 8002e96:	d101      	bne.n	8002e9c <HAL_SPI_TransmitReceive+0x26>
 8002e98:	2302      	movs	r3, #2
 8002e9a:	e198      	b.n	80031ce <HAL_SPI_TransmitReceive+0x358>
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	2201      	movs	r2, #1
 8002ea0:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8002ea4:	f7fe ff10 	bl	8001cc8 <HAL_GetTick>
 8002ea8:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002eb0:	f887 3023 	strb.w	r3, [r7, #35]	@ 0x23
  tmp_mode            = hspi->Init.Mode;
 8002eb4:	68fb      	ldr	r3, [r7, #12]
 8002eb6:	685b      	ldr	r3, [r3, #4]
 8002eb8:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 8002eba:	887b      	ldrh	r3, [r7, #2]
 8002ebc:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 8002ebe:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002ec2:	2b01      	cmp	r3, #1
 8002ec4:	d00f      	beq.n	8002ee6 <HAL_SPI_TransmitReceive+0x70>
 8002ec6:	69fb      	ldr	r3, [r7, #28]
 8002ec8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8002ecc:	d107      	bne.n	8002ede <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 8002ece:	68fb      	ldr	r3, [r7, #12]
 8002ed0:	689b      	ldr	r3, [r3, #8]
 8002ed2:	2b00      	cmp	r3, #0
 8002ed4:	d103      	bne.n	8002ede <HAL_SPI_TransmitReceive+0x68>
 8002ed6:	f897 3023 	ldrb.w	r3, [r7, #35]	@ 0x23
 8002eda:	2b04      	cmp	r3, #4
 8002edc:	d003      	beq.n	8002ee6 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 8002ede:	2302      	movs	r3, #2
 8002ee0:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002ee4:	e16d      	b.n	80031c2 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8002ee6:	68bb      	ldr	r3, [r7, #8]
 8002ee8:	2b00      	cmp	r3, #0
 8002eea:	d005      	beq.n	8002ef8 <HAL_SPI_TransmitReceive+0x82>
 8002eec:	687b      	ldr	r3, [r7, #4]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	d002      	beq.n	8002ef8 <HAL_SPI_TransmitReceive+0x82>
 8002ef2:	887b      	ldrh	r3, [r7, #2]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d103      	bne.n	8002f00 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8002ef8:	2301      	movs	r3, #1
 8002efa:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    goto error;
 8002efe:	e160      	b.n	80031c2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8002f00:	68fb      	ldr	r3, [r7, #12]
 8002f02:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8002f06:	b2db      	uxtb	r3, r3
 8002f08:	2b04      	cmp	r3, #4
 8002f0a:	d003      	beq.n	8002f14 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 8002f0c:	68fb      	ldr	r3, [r7, #12]
 8002f0e:	2205      	movs	r2, #5
 8002f10:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8002f14:	68fb      	ldr	r3, [r7, #12]
 8002f16:	2200      	movs	r2, #0
 8002f18:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 8002f1a:	68fb      	ldr	r3, [r7, #12]
 8002f1c:	687a      	ldr	r2, [r7, #4]
 8002f1e:	639a      	str	r2, [r3, #56]	@ 0x38
  hspi->RxXferCount = Size;
 8002f20:	68fb      	ldr	r3, [r7, #12]
 8002f22:	887a      	ldrh	r2, [r7, #2]
 8002f24:	87da      	strh	r2, [r3, #62]	@ 0x3e
  hspi->RxXferSize  = Size;
 8002f26:	68fb      	ldr	r3, [r7, #12]
 8002f28:	887a      	ldrh	r2, [r7, #2]
 8002f2a:	879a      	strh	r2, [r3, #60]	@ 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 8002f2c:	68fb      	ldr	r3, [r7, #12]
 8002f2e:	68ba      	ldr	r2, [r7, #8]
 8002f30:	631a      	str	r2, [r3, #48]	@ 0x30
  hspi->TxXferCount = Size;
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	887a      	ldrh	r2, [r7, #2]
 8002f36:	86da      	strh	r2, [r3, #54]	@ 0x36
  hspi->TxXferSize  = Size;
 8002f38:	68fb      	ldr	r3, [r7, #12]
 8002f3a:	887a      	ldrh	r2, [r7, #2]
 8002f3c:	869a      	strh	r2, [r3, #52]	@ 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 8002f3e:	68fb      	ldr	r3, [r7, #12]
 8002f40:	2200      	movs	r2, #0
 8002f42:	641a      	str	r2, [r3, #64]	@ 0x40
  hspi->TxISR       = NULL;
 8002f44:	68fb      	ldr	r3, [r7, #12]
 8002f46:	2200      	movs	r2, #0
 8002f48:	645a      	str	r2, [r3, #68]	@ 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8002f4a:	68fb      	ldr	r3, [r7, #12]
 8002f4c:	681b      	ldr	r3, [r3, #0]
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002f54:	2b40      	cmp	r3, #64	@ 0x40
 8002f56:	d007      	beq.n	8002f68 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8002f58:	68fb      	ldr	r3, [r7, #12]
 8002f5a:	681b      	ldr	r3, [r3, #0]
 8002f5c:	681a      	ldr	r2, [r3, #0]
 8002f5e:	68fb      	ldr	r3, [r7, #12]
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8002f66:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	68db      	ldr	r3, [r3, #12]
 8002f6c:	f5b3 6f00 	cmp.w	r3, #2048	@ 0x800
 8002f70:	d17c      	bne.n	800306c <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8002f72:	68fb      	ldr	r3, [r7, #12]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	2b00      	cmp	r3, #0
 8002f78:	d002      	beq.n	8002f80 <HAL_SPI_TransmitReceive+0x10a>
 8002f7a:	8b7b      	ldrh	r3, [r7, #26]
 8002f7c:	2b01      	cmp	r3, #1
 8002f7e:	d16a      	bne.n	8003056 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002f80:	68fb      	ldr	r3, [r7, #12]
 8002f82:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f84:	881a      	ldrh	r2, [r3, #0]
 8002f86:	68fb      	ldr	r3, [r7, #12]
 8002f88:	681b      	ldr	r3, [r3, #0]
 8002f8a:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002f90:	1c9a      	adds	r2, r3, #2
 8002f92:	68fb      	ldr	r3, [r7, #12]
 8002f94:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8002f96:	68fb      	ldr	r3, [r7, #12]
 8002f98:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002f9a:	b29b      	uxth	r3, r3
 8002f9c:	3b01      	subs	r3, #1
 8002f9e:	b29a      	uxth	r2, r3
 8002fa0:	68fb      	ldr	r3, [r7, #12]
 8002fa2:	86da      	strh	r2, [r3, #54]	@ 0x36
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */

    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8002fa4:	e057      	b.n	8003056 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 8002fa6:	68fb      	ldr	r3, [r7, #12]
 8002fa8:	681b      	ldr	r3, [r3, #0]
 8002faa:	689b      	ldr	r3, [r3, #8]
 8002fac:	f003 0302 	and.w	r3, r3, #2
 8002fb0:	2b02      	cmp	r3, #2
 8002fb2:	d11b      	bne.n	8002fec <HAL_SPI_TransmitReceive+0x176>
 8002fb4:	68fb      	ldr	r3, [r7, #12]
 8002fb6:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fb8:	b29b      	uxth	r3, r3
 8002fba:	2b00      	cmp	r3, #0
 8002fbc:	d016      	beq.n	8002fec <HAL_SPI_TransmitReceive+0x176>
 8002fbe:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002fc0:	2b01      	cmp	r3, #1
 8002fc2:	d113      	bne.n	8002fec <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8002fc4:	68fb      	ldr	r3, [r7, #12]
 8002fc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fc8:	881a      	ldrh	r2, [r3, #0]
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002fd4:	1c9a      	adds	r2, r3, #2
 8002fd6:	68fb      	ldr	r3, [r7, #12]
 8002fd8:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 8002fda:	68fb      	ldr	r3, [r7, #12]
 8002fdc:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8002fde:	b29b      	uxth	r3, r3
 8002fe0:	3b01      	subs	r3, #1
 8002fe2:	b29a      	uxth	r2, r3
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8002fe8:	2300      	movs	r3, #0
 8002fea:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	681b      	ldr	r3, [r3, #0]
 8002ff0:	689b      	ldr	r3, [r3, #8]
 8002ff2:	f003 0301 	and.w	r3, r3, #1
 8002ff6:	2b01      	cmp	r3, #1
 8002ff8:	d119      	bne.n	800302e <HAL_SPI_TransmitReceive+0x1b8>
 8002ffa:	68fb      	ldr	r3, [r7, #12]
 8002ffc:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8002ffe:	b29b      	uxth	r3, r3
 8003000:	2b00      	cmp	r3, #0
 8003002:	d014      	beq.n	800302e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003004:	68fb      	ldr	r3, [r7, #12]
 8003006:	681b      	ldr	r3, [r3, #0]
 8003008:	68da      	ldr	r2, [r3, #12]
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800300e:	b292      	uxth	r2, r2
 8003010:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003016:	1c9a      	adds	r2, r3, #2
 8003018:	68fb      	ldr	r3, [r7, #12]
 800301a:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003020:	b29b      	uxth	r3, r3
 8003022:	3b01      	subs	r3, #1
 8003024:	b29a      	uxth	r2, r3
 8003026:	68fb      	ldr	r3, [r7, #12]
 8003028:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800302a:	2301      	movs	r3, #1
 800302c:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800302e:	f7fe fe4b 	bl	8001cc8 <HAL_GetTick>
 8003032:	4602      	mov	r2, r0
 8003034:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003036:	1ad3      	subs	r3, r2, r3
 8003038:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800303a:	429a      	cmp	r2, r3
 800303c:	d80b      	bhi.n	8003056 <HAL_SPI_TransmitReceive+0x1e0>
 800303e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003040:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003044:	d007      	beq.n	8003056 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8003046:	2303      	movs	r3, #3
 8003048:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800304c:	68fb      	ldr	r3, [r7, #12]
 800304e:	2201      	movs	r2, #1
 8003050:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003054:	e0b5      	b.n	80031c2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 8003056:	68fb      	ldr	r3, [r7, #12]
 8003058:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800305a:	b29b      	uxth	r3, r3
 800305c:	2b00      	cmp	r3, #0
 800305e:	d1a2      	bne.n	8002fa6 <HAL_SPI_TransmitReceive+0x130>
 8003060:	68fb      	ldr	r3, [r7, #12]
 8003062:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003064:	b29b      	uxth	r3, r3
 8003066:	2b00      	cmp	r3, #0
 8003068:	d19d      	bne.n	8002fa6 <HAL_SPI_TransmitReceive+0x130>
 800306a:	e080      	b.n	800316e <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	685b      	ldr	r3, [r3, #4]
 8003070:	2b00      	cmp	r3, #0
 8003072:	d002      	beq.n	800307a <HAL_SPI_TransmitReceive+0x204>
 8003074:	8b7b      	ldrh	r3, [r7, #26]
 8003076:	2b01      	cmp	r3, #1
 8003078:	d16f      	bne.n	800315a <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 800307e:	68fb      	ldr	r3, [r7, #12]
 8003080:	681b      	ldr	r3, [r3, #0]
 8003082:	330c      	adds	r3, #12
 8003084:	7812      	ldrb	r2, [r2, #0]
 8003086:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800308c:	1c5a      	adds	r2, r3, #1
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	631a      	str	r2, [r3, #48]	@ 0x30
      hspi->TxXferCount--;
 8003092:	68fb      	ldr	r3, [r7, #12]
 8003094:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 8003096:	b29b      	uxth	r3, r3
 8003098:	3b01      	subs	r3, #1
 800309a:	b29a      	uxth	r2, r3
 800309c:	68fb      	ldr	r3, [r7, #12]
 800309e:	86da      	strh	r2, [r3, #54]	@ 0x36
      {
        SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
      }
#endif /* USE_SPI_CRC */
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80030a0:	e05b      	b.n	800315a <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80030a2:	68fb      	ldr	r3, [r7, #12]
 80030a4:	681b      	ldr	r3, [r3, #0]
 80030a6:	689b      	ldr	r3, [r3, #8]
 80030a8:	f003 0302 	and.w	r3, r3, #2
 80030ac:	2b02      	cmp	r3, #2
 80030ae:	d11c      	bne.n	80030ea <HAL_SPI_TransmitReceive+0x274>
 80030b0:	68fb      	ldr	r3, [r7, #12]
 80030b2:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030b4:	b29b      	uxth	r3, r3
 80030b6:	2b00      	cmp	r3, #0
 80030b8:	d017      	beq.n	80030ea <HAL_SPI_TransmitReceive+0x274>
 80030ba:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80030bc:	2b01      	cmp	r3, #1
 80030be:	d114      	bne.n	80030ea <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 80030c0:	68fb      	ldr	r3, [r7, #12]
 80030c2:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80030c4:	68fb      	ldr	r3, [r7, #12]
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	330c      	adds	r3, #12
 80030ca:	7812      	ldrb	r2, [r2, #0]
 80030cc:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 80030ce:	68fb      	ldr	r3, [r7, #12]
 80030d0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80030d2:	1c5a      	adds	r2, r3, #1
 80030d4:	68fb      	ldr	r3, [r7, #12]
 80030d6:	631a      	str	r2, [r3, #48]	@ 0x30
        hspi->TxXferCount--;
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 80030dc:	b29b      	uxth	r3, r3
 80030de:	3b01      	subs	r3, #1
 80030e0:	b29a      	uxth	r2, r3
 80030e2:	68fb      	ldr	r3, [r7, #12]
 80030e4:	86da      	strh	r2, [r3, #54]	@ 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 80030e6:	2300      	movs	r3, #0
 80030e8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 80030ea:	68fb      	ldr	r3, [r7, #12]
 80030ec:	681b      	ldr	r3, [r3, #0]
 80030ee:	689b      	ldr	r3, [r3, #8]
 80030f0:	f003 0301 	and.w	r3, r3, #1
 80030f4:	2b01      	cmp	r3, #1
 80030f6:	d119      	bne.n	800312c <HAL_SPI_TransmitReceive+0x2b6>
 80030f8:	68fb      	ldr	r3, [r7, #12]
 80030fa:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 80030fc:	b29b      	uxth	r3, r3
 80030fe:	2b00      	cmp	r3, #0
 8003100:	d014      	beq.n	800312c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8003102:	68fb      	ldr	r3, [r7, #12]
 8003104:	681b      	ldr	r3, [r3, #0]
 8003106:	68da      	ldr	r2, [r3, #12]
 8003108:	68fb      	ldr	r3, [r7, #12]
 800310a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800310c:	b2d2      	uxtb	r2, r2
 800310e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8003114:	1c5a      	adds	r2, r3, #1
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	639a      	str	r2, [r3, #56]	@ 0x38
        hspi->RxXferCount--;
 800311a:	68fb      	ldr	r3, [r7, #12]
 800311c:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 800311e:	b29b      	uxth	r3, r3
 8003120:	3b01      	subs	r3, #1
 8003122:	b29a      	uxth	r2, r3
 8003124:	68fb      	ldr	r3, [r7, #12]
 8003126:	87da      	strh	r2, [r3, #62]	@ 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8003128:	2301      	movs	r3, #1
 800312a:	62fb      	str	r3, [r7, #44]	@ 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800312c:	f7fe fdcc 	bl	8001cc8 <HAL_GetTick>
 8003130:	4602      	mov	r2, r0
 8003132:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003134:	1ad3      	subs	r3, r2, r3
 8003136:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 8003138:	429a      	cmp	r2, r3
 800313a:	d803      	bhi.n	8003144 <HAL_SPI_TransmitReceive+0x2ce>
 800313c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800313e:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003142:	d102      	bne.n	800314a <HAL_SPI_TransmitReceive+0x2d4>
 8003144:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003146:	2b00      	cmp	r3, #0
 8003148:	d107      	bne.n	800315a <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800314a:	2303      	movs	r3, #3
 800314c:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 8003150:	68fb      	ldr	r3, [r7, #12]
 8003152:	2201      	movs	r2, #1
 8003154:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
        goto error;
 8003158:	e033      	b.n	80031c2 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 800315a:	68fb      	ldr	r3, [r7, #12]
 800315c:	8edb      	ldrh	r3, [r3, #54]	@ 0x36
 800315e:	b29b      	uxth	r3, r3
 8003160:	2b00      	cmp	r3, #0
 8003162:	d19e      	bne.n	80030a2 <HAL_SPI_TransmitReceive+0x22c>
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	8fdb      	ldrh	r3, [r3, #62]	@ 0x3e
 8003168:	b29b      	uxth	r3, r3
 800316a:	2b00      	cmp	r3, #0
 800316c:	d199      	bne.n	80030a2 <HAL_SPI_TransmitReceive+0x22c>
    errorcode = HAL_ERROR;
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 800316e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003170:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003172:	68f8      	ldr	r0, [r7, #12]
 8003174:	f000 f91e 	bl	80033b4 <SPI_EndRxTxTransaction>
 8003178:	4603      	mov	r3, r0
 800317a:	2b00      	cmp	r3, #0
 800317c:	d006      	beq.n	800318c <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 800317e:	2301      	movs	r3, #1
 8003180:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	2220      	movs	r2, #32
 8003188:	655a      	str	r2, [r3, #84]	@ 0x54
    goto error;
 800318a:	e01a      	b.n	80031c2 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	689b      	ldr	r3, [r3, #8]
 8003190:	2b00      	cmp	r3, #0
 8003192:	d10a      	bne.n	80031aa <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003194:	2300      	movs	r3, #0
 8003196:	617b      	str	r3, [r7, #20]
 8003198:	68fb      	ldr	r3, [r7, #12]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	617b      	str	r3, [r7, #20]
 80031a0:	68fb      	ldr	r3, [r7, #12]
 80031a2:	681b      	ldr	r3, [r3, #0]
 80031a4:	689b      	ldr	r3, [r3, #8]
 80031a6:	617b      	str	r3, [r7, #20]
 80031a8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80031aa:	68fb      	ldr	r3, [r7, #12]
 80031ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	d003      	beq.n	80031ba <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 80031b2:	2301      	movs	r3, #1
 80031b4:	f887 302b 	strb.w	r3, [r7, #43]	@ 0x2b
 80031b8:	e003      	b.n	80031c2 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	2201      	movs	r2, #1
 80031be:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 80031c2:	68fb      	ldr	r3, [r7, #12]
 80031c4:	2200      	movs	r2, #0
 80031c6:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50
  return errorcode;
 80031ca:	f897 302b 	ldrb.w	r3, [r7, #43]	@ 0x2b
}
 80031ce:	4618      	mov	r0, r3
 80031d0:	3730      	adds	r7, #48	@ 0x30
 80031d2:	46bd      	mov	sp, r7
 80031d4:	bd80      	pop	{r7, pc}
	...

080031d8 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 80031d8:	b580      	push	{r7, lr}
 80031da:	b088      	sub	sp, #32
 80031dc:	af00      	add	r7, sp, #0
 80031de:	60f8      	str	r0, [r7, #12]
 80031e0:	60b9      	str	r1, [r7, #8]
 80031e2:	603b      	str	r3, [r7, #0]
 80031e4:	4613      	mov	r3, r2
 80031e6:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 80031e8:	f7fe fd6e 	bl	8001cc8 <HAL_GetTick>
 80031ec:	4602      	mov	r2, r0
 80031ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80031f0:	1a9b      	subs	r3, r3, r2
 80031f2:	683a      	ldr	r2, [r7, #0]
 80031f4:	4413      	add	r3, r2
 80031f6:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 80031f8:	f7fe fd66 	bl	8001cc8 <HAL_GetTick>
 80031fc:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 80031fe:	4b39      	ldr	r3, [pc, #228]	@ (80032e4 <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8003200:	681b      	ldr	r3, [r3, #0]
 8003202:	015b      	lsls	r3, r3, #5
 8003204:	0d1b      	lsrs	r3, r3, #20
 8003206:	69fa      	ldr	r2, [r7, #28]
 8003208:	fb02 f303 	mul.w	r3, r2, r3
 800320c:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 800320e:	e054      	b.n	80032ba <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	f1b3 3fff 	cmp.w	r3, #4294967295	@ 0xffffffff
 8003216:	d050      	beq.n	80032ba <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8003218:	f7fe fd56 	bl	8001cc8 <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	69bb      	ldr	r3, [r7, #24]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	69fa      	ldr	r2, [r7, #28]
 8003224:	429a      	cmp	r2, r3
 8003226:	d902      	bls.n	800322e <SPI_WaitFlagStateUntilTimeout+0x56>
 8003228:	69fb      	ldr	r3, [r7, #28]
 800322a:	2b00      	cmp	r3, #0
 800322c:	d13d      	bne.n	80032aa <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	685a      	ldr	r2, [r3, #4]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f022 02e0 	bic.w	r2, r2, #224	@ 0xe0
 800323c:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800323e:	68fb      	ldr	r3, [r7, #12]
 8003240:	685b      	ldr	r3, [r3, #4]
 8003242:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003246:	d111      	bne.n	800326c <SPI_WaitFlagStateUntilTimeout+0x94>
 8003248:	68fb      	ldr	r3, [r7, #12]
 800324a:	689b      	ldr	r3, [r3, #8]
 800324c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003250:	d004      	beq.n	800325c <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003252:	68fb      	ldr	r3, [r7, #12]
 8003254:	689b      	ldr	r3, [r3, #8]
 8003256:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800325a:	d107      	bne.n	800326c <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 800325c:	68fb      	ldr	r3, [r7, #12]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	681a      	ldr	r2, [r3, #0]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800326a:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8003270:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 8003274:	d10f      	bne.n	8003296 <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8003284:	601a      	str	r2, [r3, #0]
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	681b      	ldr	r3, [r3, #0]
 800328a:	681a      	ldr	r2, [r3, #0]
 800328c:	68fb      	ldr	r3, [r7, #12]
 800328e:	681b      	ldr	r3, [r3, #0]
 8003290:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8003294:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2201      	movs	r2, #1
 800329a:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 800329e:	68fb      	ldr	r3, [r7, #12]
 80032a0:	2200      	movs	r2, #0
 80032a2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

        return HAL_TIMEOUT;
 80032a6:	2303      	movs	r3, #3
 80032a8:	e017      	b.n	80032da <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 80032aa:	697b      	ldr	r3, [r7, #20]
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	d101      	bne.n	80032b4 <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 80032b0:	2300      	movs	r3, #0
 80032b2:	61fb      	str	r3, [r7, #28]
      }
      count--;
 80032b4:	697b      	ldr	r3, [r7, #20]
 80032b6:	3b01      	subs	r3, #1
 80032b8:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 80032ba:	68fb      	ldr	r3, [r7, #12]
 80032bc:	681b      	ldr	r3, [r3, #0]
 80032be:	689a      	ldr	r2, [r3, #8]
 80032c0:	68bb      	ldr	r3, [r7, #8]
 80032c2:	4013      	ands	r3, r2
 80032c4:	68ba      	ldr	r2, [r7, #8]
 80032c6:	429a      	cmp	r2, r3
 80032c8:	bf0c      	ite	eq
 80032ca:	2301      	moveq	r3, #1
 80032cc:	2300      	movne	r3, #0
 80032ce:	b2db      	uxtb	r3, r3
 80032d0:	461a      	mov	r2, r3
 80032d2:	79fb      	ldrb	r3, [r7, #7]
 80032d4:	429a      	cmp	r2, r3
 80032d6:	d19b      	bne.n	8003210 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 80032d8:	2300      	movs	r3, #0
}
 80032da:	4618      	mov	r0, r3
 80032dc:	3720      	adds	r7, #32
 80032de:	46bd      	mov	sp, r7
 80032e0:	bd80      	pop	{r7, pc}
 80032e2:	bf00      	nop
 80032e4:	20000000 	.word	0x20000000

080032e8 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 80032e8:	b580      	push	{r7, lr}
 80032ea:	b086      	sub	sp, #24
 80032ec:	af02      	add	r7, sp, #8
 80032ee:	60f8      	str	r0, [r7, #12]
 80032f0:	60b9      	str	r1, [r7, #8]
 80032f2:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80032f4:	68fb      	ldr	r3, [r7, #12]
 80032f6:	685b      	ldr	r3, [r3, #4]
 80032f8:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 80032fc:	d111      	bne.n	8003322 <SPI_EndRxTransaction+0x3a>
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	689b      	ldr	r3, [r3, #8]
 8003302:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8003306:	d004      	beq.n	8003312 <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	689b      	ldr	r3, [r3, #8]
 800330c:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003310:	d107      	bne.n	8003322 <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	681a      	ldr	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8003320:	601a      	str	r2, [r3, #0]
  }

  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003322:	68fb      	ldr	r3, [r7, #12]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 800332a:	d12a      	bne.n	8003382 <SPI_EndRxTransaction+0x9a>
  {
    if (hspi->Init.Direction != SPI_DIRECTION_2LINES_RXONLY)
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	689b      	ldr	r3, [r3, #8]
 8003330:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003334:	d012      	beq.n	800335c <SPI_EndRxTransaction+0x74>
    {
      /* Control the BSY flag */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003336:	687b      	ldr	r3, [r7, #4]
 8003338:	9300      	str	r3, [sp, #0]
 800333a:	68bb      	ldr	r3, [r7, #8]
 800333c:	2200      	movs	r2, #0
 800333e:	2180      	movs	r1, #128	@ 0x80
 8003340:	68f8      	ldr	r0, [r7, #12]
 8003342:	f7ff ff49 	bl	80031d8 <SPI_WaitFlagStateUntilTimeout>
 8003346:	4603      	mov	r3, r0
 8003348:	2b00      	cmp	r3, #0
 800334a:	d02d      	beq.n	80033a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800334c:	68fb      	ldr	r3, [r7, #12]
 800334e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003350:	f043 0220 	orr.w	r2, r3, #32
 8003354:	68fb      	ldr	r3, [r7, #12]
 8003356:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 8003358:	2303      	movs	r3, #3
 800335a:	e026      	b.n	80033aa <SPI_EndRxTransaction+0xc2>
      }
    }
    else
    {
      /* Wait the RXNE reset */
      if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800335c:	687b      	ldr	r3, [r7, #4]
 800335e:	9300      	str	r3, [sp, #0]
 8003360:	68bb      	ldr	r3, [r7, #8]
 8003362:	2200      	movs	r2, #0
 8003364:	2101      	movs	r1, #1
 8003366:	68f8      	ldr	r0, [r7, #12]
 8003368:	f7ff ff36 	bl	80031d8 <SPI_WaitFlagStateUntilTimeout>
 800336c:	4603      	mov	r3, r0
 800336e:	2b00      	cmp	r3, #0
 8003370:	d01a      	beq.n	80033a8 <SPI_EndRxTransaction+0xc0>
      {
        SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003376:	f043 0220 	orr.w	r2, r3, #32
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	655a      	str	r2, [r3, #84]	@ 0x54
        return HAL_TIMEOUT;
 800337e:	2303      	movs	r3, #3
 8003380:	e013      	b.n	80033aa <SPI_EndRxTransaction+0xc2>
    }
  }
  else
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	9300      	str	r3, [sp, #0]
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	2200      	movs	r2, #0
 800338a:	2101      	movs	r1, #1
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f7ff ff23 	bl	80031d8 <SPI_WaitFlagStateUntilTimeout>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d007      	beq.n	80033a8 <SPI_EndRxTransaction+0xc0>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800339c:	f043 0220 	orr.w	r2, r3, #32
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e000      	b.n	80033aa <SPI_EndRxTransaction+0xc2>
    }
  }
  return HAL_OK;
 80033a8:	2300      	movs	r3, #0
}
 80033aa:	4618      	mov	r0, r3
 80033ac:	3710      	adds	r7, #16
 80033ae:	46bd      	mov	sp, r7
 80033b0:	bd80      	pop	{r7, pc}
	...

080033b4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80033b4:	b580      	push	{r7, lr}
 80033b6:	b088      	sub	sp, #32
 80033b8:	af02      	add	r7, sp, #8
 80033ba:	60f8      	str	r0, [r7, #12]
 80033bc:	60b9      	str	r1, [r7, #8]
 80033be:	607a      	str	r2, [r7, #4]
  /* Wait until TXE flag */
  if(SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_TXE, SET, Timeout, Tickstart) != HAL_OK)
 80033c0:	687b      	ldr	r3, [r7, #4]
 80033c2:	9300      	str	r3, [sp, #0]
 80033c4:	68bb      	ldr	r3, [r7, #8]
 80033c6:	2201      	movs	r2, #1
 80033c8:	2102      	movs	r1, #2
 80033ca:	68f8      	ldr	r0, [r7, #12]
 80033cc:	f7ff ff04 	bl	80031d8 <SPI_WaitFlagStateUntilTimeout>
 80033d0:	4603      	mov	r3, r0
 80033d2:	2b00      	cmp	r3, #0
 80033d4:	d007      	beq.n	80033e6 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80033d6:	68fb      	ldr	r3, [r7, #12]
 80033d8:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 80033da:	f043 0220 	orr.w	r2, r3, #32
 80033de:	68fb      	ldr	r3, [r7, #12]
 80033e0:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_TIMEOUT;
 80033e2:	2303      	movs	r3, #3
 80033e4:	e032      	b.n	800344c <SPI_EndRxTxTransaction+0x98>
  }

  /* Timeout in µs */
  __IO uint32_t count = SPI_BSY_FLAG_WORKAROUND_TIMEOUT * (SystemCoreClock / 24U / 1000000U);
 80033e6:	4b1b      	ldr	r3, [pc, #108]	@ (8003454 <SPI_EndRxTxTransaction+0xa0>)
 80033e8:	681b      	ldr	r3, [r3, #0]
 80033ea:	4a1b      	ldr	r2, [pc, #108]	@ (8003458 <SPI_EndRxTxTransaction+0xa4>)
 80033ec:	fba2 2303 	umull	r2, r3, r2, r3
 80033f0:	0d5b      	lsrs	r3, r3, #21
 80033f2:	f44f 727a 	mov.w	r2, #1000	@ 0x3e8
 80033f6:	fb02 f303 	mul.w	r3, r2, r3
 80033fa:	617b      	str	r3, [r7, #20]
  /* Erratasheet: BSY bit may stay high at the end of a data transfer in Slave mode */
  if (hspi->Init.Mode == SPI_MODE_MASTER)
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	685b      	ldr	r3, [r3, #4]
 8003400:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8003404:	d112      	bne.n	800342c <SPI_EndRxTxTransaction+0x78>
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8003406:	687b      	ldr	r3, [r7, #4]
 8003408:	9300      	str	r3, [sp, #0]
 800340a:	68bb      	ldr	r3, [r7, #8]
 800340c:	2200      	movs	r2, #0
 800340e:	2180      	movs	r1, #128	@ 0x80
 8003410:	68f8      	ldr	r0, [r7, #12]
 8003412:	f7ff fee1 	bl	80031d8 <SPI_WaitFlagStateUntilTimeout>
 8003416:	4603      	mov	r3, r0
 8003418:	2b00      	cmp	r3, #0
 800341a:	d016      	beq.n	800344a <SPI_EndRxTxTransaction+0x96>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 800341c:	68fb      	ldr	r3, [r7, #12]
 800341e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8003420:	f043 0220 	orr.w	r2, r3, #32
 8003424:	68fb      	ldr	r3, [r7, #12]
 8003426:	655a      	str	r2, [r3, #84]	@ 0x54
      return HAL_TIMEOUT;
 8003428:	2303      	movs	r3, #3
 800342a:	e00f      	b.n	800344c <SPI_EndRxTxTransaction+0x98>
    * User have to calculate the timeout value to fit with the time of 1 byte transfer.
    * This time is directly link with the SPI clock from Master device.
    */
    do
    {
      if (count == 0U)
 800342c:	697b      	ldr	r3, [r7, #20]
 800342e:	2b00      	cmp	r3, #0
 8003430:	d00a      	beq.n	8003448 <SPI_EndRxTxTransaction+0x94>
      {
        break;
      }
      count--;
 8003432:	697b      	ldr	r3, [r7, #20]
 8003434:	3b01      	subs	r3, #1
 8003436:	617b      	str	r3, [r7, #20]
    } while (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_BSY) != RESET);
 8003438:	68fb      	ldr	r3, [r7, #12]
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	689b      	ldr	r3, [r3, #8]
 800343e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003442:	2b80      	cmp	r3, #128	@ 0x80
 8003444:	d0f2      	beq.n	800342c <SPI_EndRxTxTransaction+0x78>
 8003446:	e000      	b.n	800344a <SPI_EndRxTxTransaction+0x96>
        break;
 8003448:	bf00      	nop
  }

  return HAL_OK;
 800344a:	2300      	movs	r3, #0
}
 800344c:	4618      	mov	r0, r3
 800344e:	3718      	adds	r7, #24
 8003450:	46bd      	mov	sp, r7
 8003452:	bd80      	pop	{r7, pc}
 8003454:	20000000 	.word	0x20000000
 8003458:	165e9f81 	.word	0x165e9f81

0800345c <HAL_SRAM_Init>:
  * @param  ExtTiming Pointer to SRAM extended mode timing structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SRAM_Init(SRAM_HandleTypeDef *hsram, FMC_NORSRAM_TimingTypeDef *Timing,
                                FMC_NORSRAM_TimingTypeDef *ExtTiming)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	60f8      	str	r0, [r7, #12]
 8003464:	60b9      	str	r1, [r7, #8]
 8003466:	607a      	str	r2, [r7, #4]
  /* Check the SRAM handle parameter */
  if (hsram == NULL)
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	2b00      	cmp	r3, #0
 800346c:	d101      	bne.n	8003472 <HAL_SRAM_Init+0x16>
  {
    return HAL_ERROR;
 800346e:	2301      	movs	r3, #1
 8003470:	e038      	b.n	80034e4 <HAL_SRAM_Init+0x88>
  }

  if (hsram->State == HAL_SRAM_STATE_RESET)
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	f893 3049 	ldrb.w	r3, [r3, #73]	@ 0x49
 8003478:	b2db      	uxtb	r3, r3
 800347a:	2b00      	cmp	r3, #0
 800347c:	d106      	bne.n	800348c <HAL_SRAM_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hsram->Lock = HAL_UNLOCKED;
 800347e:	68fb      	ldr	r3, [r7, #12]
 8003480:	2200      	movs	r2, #0
 8003482:	f883 2048 	strb.w	r2, [r3, #72]	@ 0x48

    /* Init the low level hardware */
    hsram->MspInitCallback(hsram);
#else
    /* Initialize the low level hardware (MSP) */
    HAL_SRAM_MspInit(hsram);
 8003486:	68f8      	ldr	r0, [r7, #12]
 8003488:	f7fd ffb4 	bl	80013f4 <HAL_SRAM_MspInit>
#endif /* USE_HAL_SRAM_REGISTER_CALLBACKS */
  }

  /* Initialize SRAM control Interface */
  (void)FMC_NORSRAM_Init(hsram->Instance, &(hsram->Init));
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681a      	ldr	r2, [r3, #0]
 8003490:	68fb      	ldr	r3, [r7, #12]
 8003492:	3308      	adds	r3, #8
 8003494:	4619      	mov	r1, r3
 8003496:	4610      	mov	r0, r2
 8003498:	f000 fc9e 	bl	8003dd8 <FSMC_NORSRAM_Init>

  /* Initialize SRAM timing Interface */
  (void)FMC_NORSRAM_Timing_Init(hsram->Instance, Timing, hsram->Init.NSBank);
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	6818      	ldr	r0, [r3, #0]
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	689b      	ldr	r3, [r3, #8]
 80034a4:	461a      	mov	r2, r3
 80034a6:	68b9      	ldr	r1, [r7, #8]
 80034a8:	f000 fd00 	bl	8003eac <FSMC_NORSRAM_Timing_Init>

  /* Initialize SRAM extended mode timing Interface */
  (void)FMC_NORSRAM_Extended_Timing_Init(hsram->Extended, ExtTiming, hsram->Init.NSBank,
 80034ac:	68fb      	ldr	r3, [r7, #12]
 80034ae:	6858      	ldr	r0, [r3, #4]
 80034b0:	68fb      	ldr	r3, [r7, #12]
 80034b2:	689a      	ldr	r2, [r3, #8]
 80034b4:	68fb      	ldr	r3, [r7, #12]
 80034b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80034b8:	6879      	ldr	r1, [r7, #4]
 80034ba:	f000 fd2d 	bl	8003f18 <FSMC_NORSRAM_Extended_Timing_Init>
                                         hsram->Init.ExtendedMode);

  /* Enable the NORSRAM device */
  __FMC_NORSRAM_ENABLE(hsram->Instance, hsram->Init.NSBank);
 80034be:	68fb      	ldr	r3, [r7, #12]
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	68fa      	ldr	r2, [r7, #12]
 80034c4:	6892      	ldr	r2, [r2, #8]
 80034c6:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	681b      	ldr	r3, [r3, #0]
 80034ce:	68fa      	ldr	r2, [r7, #12]
 80034d0:	6892      	ldr	r2, [r2, #8]
 80034d2:	f041 0101 	orr.w	r1, r1, #1
 80034d6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Initialize the SRAM controller state */
  hsram->State = HAL_SRAM_STATE_READY;
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	2201      	movs	r2, #1
 80034de:	f883 2049 	strb.w	r2, [r3, #73]	@ 0x49

  return HAL_OK;
 80034e2:	2300      	movs	r3, #0
}
 80034e4:	4618      	mov	r0, r3
 80034e6:	3710      	adds	r7, #16
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}

080034ec <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80034ec:	b580      	push	{r7, lr}
 80034ee:	b082      	sub	sp, #8
 80034f0:	af00      	add	r7, sp, #0
 80034f2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2b00      	cmp	r3, #0
 80034f8:	d101      	bne.n	80034fe <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80034fa:	2301      	movs	r3, #1
 80034fc:	e041      	b.n	8003582 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim, htim->Init.Period));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80034fe:	687b      	ldr	r3, [r7, #4]
 8003500:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003504:	b2db      	uxtb	r3, r3
 8003506:	2b00      	cmp	r3, #0
 8003508:	d106      	bne.n	8003518 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003512:	6878      	ldr	r0, [r7, #4]
 8003514:	f7fe fb22 	bl	8001b5c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2202      	movs	r2, #2
 800351c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	681a      	ldr	r2, [r3, #0]
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	3304      	adds	r3, #4
 8003528:	4619      	mov	r1, r3
 800352a:	4610      	mov	r0, r2
 800352c:	f000 fa7e 	bl	8003a2c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003530:	687b      	ldr	r3, [r7, #4]
 8003532:	2201      	movs	r2, #1
 8003534:	f883 2046 	strb.w	r2, [r3, #70]	@ 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
 8003540:	687b      	ldr	r3, [r7, #4]
 8003542:	2201      	movs	r2, #1
 8003544:	f883 203f 	strb.w	r2, [r3, #63]	@ 0x3f
 8003548:	687b      	ldr	r3, [r7, #4]
 800354a:	2201      	movs	r2, #1
 800354c:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	2201      	movs	r2, #1
 8003554:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003558:	687b      	ldr	r3, [r7, #4]
 800355a:	2201      	movs	r2, #1
 800355c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
 8003560:	687b      	ldr	r3, [r7, #4]
 8003562:	2201      	movs	r2, #1
 8003564:	f883 2043 	strb.w	r2, [r3, #67]	@ 0x43
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	2201      	movs	r2, #1
 800356c:	f883 2044 	strb.w	r2, [r3, #68]	@ 0x44
 8003570:	687b      	ldr	r3, [r7, #4]
 8003572:	2201      	movs	r2, #1
 8003574:	f883 2045 	strb.w	r2, [r3, #69]	@ 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003578:	687b      	ldr	r3, [r7, #4]
 800357a:	2201      	movs	r2, #1
 800357c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  return HAL_OK;
 8003580:	2300      	movs	r3, #0
}
 8003582:	4618      	mov	r0, r3
 8003584:	3708      	adds	r7, #8
 8003586:	46bd      	mov	sp, r7
 8003588:	bd80      	pop	{r7, pc}
	...

0800358c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800358c:	b480      	push	{r7}
 800358e:	b085      	sub	sp, #20
 8003590:	af00      	add	r7, sp, #0
 8003592:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003594:	687b      	ldr	r3, [r7, #4]
 8003596:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800359a:	b2db      	uxtb	r3, r3
 800359c:	2b01      	cmp	r3, #1
 800359e:	d001      	beq.n	80035a4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80035a0:	2301      	movs	r3, #1
 80035a2:	e04e      	b.n	8003642 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	2202      	movs	r2, #2
 80035a8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	681b      	ldr	r3, [r3, #0]
 80035b0:	68da      	ldr	r2, [r3, #12]
 80035b2:	687b      	ldr	r3, [r7, #4]
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	f042 0201 	orr.w	r2, r2, #1
 80035ba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80035bc:	687b      	ldr	r3, [r7, #4]
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	4a23      	ldr	r2, [pc, #140]	@ (8003650 <HAL_TIM_Base_Start_IT+0xc4>)
 80035c2:	4293      	cmp	r3, r2
 80035c4:	d022      	beq.n	800360c <HAL_TIM_Base_Start_IT+0x80>
 80035c6:	687b      	ldr	r3, [r7, #4]
 80035c8:	681b      	ldr	r3, [r3, #0]
 80035ca:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 80035ce:	d01d      	beq.n	800360c <HAL_TIM_Base_Start_IT+0x80>
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	681b      	ldr	r3, [r3, #0]
 80035d4:	4a1f      	ldr	r2, [pc, #124]	@ (8003654 <HAL_TIM_Base_Start_IT+0xc8>)
 80035d6:	4293      	cmp	r3, r2
 80035d8:	d018      	beq.n	800360c <HAL_TIM_Base_Start_IT+0x80>
 80035da:	687b      	ldr	r3, [r7, #4]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	4a1e      	ldr	r2, [pc, #120]	@ (8003658 <HAL_TIM_Base_Start_IT+0xcc>)
 80035e0:	4293      	cmp	r3, r2
 80035e2:	d013      	beq.n	800360c <HAL_TIM_Base_Start_IT+0x80>
 80035e4:	687b      	ldr	r3, [r7, #4]
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	4a1c      	ldr	r2, [pc, #112]	@ (800365c <HAL_TIM_Base_Start_IT+0xd0>)
 80035ea:	4293      	cmp	r3, r2
 80035ec:	d00e      	beq.n	800360c <HAL_TIM_Base_Start_IT+0x80>
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	4a1b      	ldr	r2, [pc, #108]	@ (8003660 <HAL_TIM_Base_Start_IT+0xd4>)
 80035f4:	4293      	cmp	r3, r2
 80035f6:	d009      	beq.n	800360c <HAL_TIM_Base_Start_IT+0x80>
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	681b      	ldr	r3, [r3, #0]
 80035fc:	4a19      	ldr	r2, [pc, #100]	@ (8003664 <HAL_TIM_Base_Start_IT+0xd8>)
 80035fe:	4293      	cmp	r3, r2
 8003600:	d004      	beq.n	800360c <HAL_TIM_Base_Start_IT+0x80>
 8003602:	687b      	ldr	r3, [r7, #4]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	4a18      	ldr	r2, [pc, #96]	@ (8003668 <HAL_TIM_Base_Start_IT+0xdc>)
 8003608:	4293      	cmp	r3, r2
 800360a:	d111      	bne.n	8003630 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	689b      	ldr	r3, [r3, #8]
 8003612:	f003 0307 	and.w	r3, r3, #7
 8003616:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	2b06      	cmp	r3, #6
 800361c:	d010      	beq.n	8003640 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	681b      	ldr	r3, [r3, #0]
 8003622:	681a      	ldr	r2, [r3, #0]
 8003624:	687b      	ldr	r3, [r7, #4]
 8003626:	681b      	ldr	r3, [r3, #0]
 8003628:	f042 0201 	orr.w	r2, r2, #1
 800362c:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800362e:	e007      	b.n	8003640 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003630:	687b      	ldr	r3, [r7, #4]
 8003632:	681b      	ldr	r3, [r3, #0]
 8003634:	681a      	ldr	r2, [r3, #0]
 8003636:	687b      	ldr	r3, [r7, #4]
 8003638:	681b      	ldr	r3, [r3, #0]
 800363a:	f042 0201 	orr.w	r2, r2, #1
 800363e:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003640:	2300      	movs	r3, #0
}
 8003642:	4618      	mov	r0, r3
 8003644:	3714      	adds	r7, #20
 8003646:	46bd      	mov	sp, r7
 8003648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800364c:	4770      	bx	lr
 800364e:	bf00      	nop
 8003650:	40010000 	.word	0x40010000
 8003654:	40000400 	.word	0x40000400
 8003658:	40000800 	.word	0x40000800
 800365c:	40000c00 	.word	0x40000c00
 8003660:	40010400 	.word	0x40010400
 8003664:	40014000 	.word	0x40014000
 8003668:	40001800 	.word	0x40001800

0800366c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800366c:	b580      	push	{r7, lr}
 800366e:	b084      	sub	sp, #16
 8003670:	af00      	add	r7, sp, #0
 8003672:	6078      	str	r0, [r7, #4]
  uint32_t itsource = htim->Instance->DIER;
 8003674:	687b      	ldr	r3, [r7, #4]
 8003676:	681b      	ldr	r3, [r3, #0]
 8003678:	68db      	ldr	r3, [r3, #12]
 800367a:	60fb      	str	r3, [r7, #12]
  uint32_t itflag   = htim->Instance->SR;
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	691b      	ldr	r3, [r3, #16]
 8003682:	60bb      	str	r3, [r7, #8]

  /* Capture compare 1 event */
  if ((itflag & (TIM_FLAG_CC1)) == (TIM_FLAG_CC1))
 8003684:	68bb      	ldr	r3, [r7, #8]
 8003686:	f003 0302 	and.w	r3, r3, #2
 800368a:	2b00      	cmp	r3, #0
 800368c:	d020      	beq.n	80036d0 <HAL_TIM_IRQHandler+0x64>
  {
    if ((itsource & (TIM_IT_CC1)) == (TIM_IT_CC1))
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	f003 0302 	and.w	r3, r3, #2
 8003694:	2b00      	cmp	r3, #0
 8003696:	d01b      	beq.n	80036d0 <HAL_TIM_IRQHandler+0x64>
    {
      {
        __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC1);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	f06f 0202 	mvn.w	r2, #2
 80036a0:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80036a2:	687b      	ldr	r3, [r7, #4]
 80036a4:	2201      	movs	r2, #1
 80036a6:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	681b      	ldr	r3, [r3, #0]
 80036ac:	699b      	ldr	r3, [r3, #24]
 80036ae:	f003 0303 	and.w	r3, r3, #3
 80036b2:	2b00      	cmp	r3, #0
 80036b4:	d003      	beq.n	80036be <HAL_TIM_IRQHandler+0x52>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80036b6:	6878      	ldr	r0, [r7, #4]
 80036b8:	f000 f999 	bl	80039ee <HAL_TIM_IC_CaptureCallback>
 80036bc:	e005      	b.n	80036ca <HAL_TIM_IRQHandler+0x5e>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80036be:	6878      	ldr	r0, [r7, #4]
 80036c0:	f000 f98b 	bl	80039da <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80036c4:	6878      	ldr	r0, [r7, #4]
 80036c6:	f000 f99c 	bl	8003a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	2200      	movs	r2, #0
 80036ce:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if ((itflag & (TIM_FLAG_CC2)) == (TIM_FLAG_CC2))
 80036d0:	68bb      	ldr	r3, [r7, #8]
 80036d2:	f003 0304 	and.w	r3, r3, #4
 80036d6:	2b00      	cmp	r3, #0
 80036d8:	d020      	beq.n	800371c <HAL_TIM_IRQHandler+0xb0>
  {
    if ((itsource & (TIM_IT_CC2)) == (TIM_IT_CC2))
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	f003 0304 	and.w	r3, r3, #4
 80036e0:	2b00      	cmp	r3, #0
 80036e2:	d01b      	beq.n	800371c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC2);
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	f06f 0204 	mvn.w	r2, #4
 80036ec:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2202      	movs	r2, #2
 80036f2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	699b      	ldr	r3, [r3, #24]
 80036fa:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 80036fe:	2b00      	cmp	r3, #0
 8003700:	d003      	beq.n	800370a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003702:	6878      	ldr	r0, [r7, #4]
 8003704:	f000 f973 	bl	80039ee <HAL_TIM_IC_CaptureCallback>
 8003708:	e005      	b.n	8003716 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800370a:	6878      	ldr	r0, [r7, #4]
 800370c:	f000 f965 	bl	80039da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f000 f976 	bl	8003a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003716:	687b      	ldr	r3, [r7, #4]
 8003718:	2200      	movs	r2, #0
 800371a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if ((itflag & (TIM_FLAG_CC3)) == (TIM_FLAG_CC3))
 800371c:	68bb      	ldr	r3, [r7, #8]
 800371e:	f003 0308 	and.w	r3, r3, #8
 8003722:	2b00      	cmp	r3, #0
 8003724:	d020      	beq.n	8003768 <HAL_TIM_IRQHandler+0xfc>
  {
    if ((itsource & (TIM_IT_CC3)) == (TIM_IT_CC3))
 8003726:	68fb      	ldr	r3, [r7, #12]
 8003728:	f003 0308 	and.w	r3, r3, #8
 800372c:	2b00      	cmp	r3, #0
 800372e:	d01b      	beq.n	8003768 <HAL_TIM_IRQHandler+0xfc>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC3);
 8003730:	687b      	ldr	r3, [r7, #4]
 8003732:	681b      	ldr	r3, [r3, #0]
 8003734:	f06f 0208 	mvn.w	r2, #8
 8003738:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	2204      	movs	r2, #4
 800373e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003740:	687b      	ldr	r3, [r7, #4]
 8003742:	681b      	ldr	r3, [r3, #0]
 8003744:	69db      	ldr	r3, [r3, #28]
 8003746:	f003 0303 	and.w	r3, r3, #3
 800374a:	2b00      	cmp	r3, #0
 800374c:	d003      	beq.n	8003756 <HAL_TIM_IRQHandler+0xea>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800374e:	6878      	ldr	r0, [r7, #4]
 8003750:	f000 f94d 	bl	80039ee <HAL_TIM_IC_CaptureCallback>
 8003754:	e005      	b.n	8003762 <HAL_TIM_IRQHandler+0xf6>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 f93f 	bl	80039da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800375c:	6878      	ldr	r0, [r7, #4]
 800375e:	f000 f950 	bl	8003a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	2200      	movs	r2, #0
 8003766:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if ((itflag & (TIM_FLAG_CC4)) == (TIM_FLAG_CC4))
 8003768:	68bb      	ldr	r3, [r7, #8]
 800376a:	f003 0310 	and.w	r3, r3, #16
 800376e:	2b00      	cmp	r3, #0
 8003770:	d020      	beq.n	80037b4 <HAL_TIM_IRQHandler+0x148>
  {
    if ((itsource & (TIM_IT_CC4)) == (TIM_IT_CC4))
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	f003 0310 	and.w	r3, r3, #16
 8003778:	2b00      	cmp	r3, #0
 800377a:	d01b      	beq.n	80037b4 <HAL_TIM_IRQHandler+0x148>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_CC4);
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f06f 0210 	mvn.w	r2, #16
 8003784:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003786:	687b      	ldr	r3, [r7, #4]
 8003788:	2208      	movs	r2, #8
 800378a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800378c:	687b      	ldr	r3, [r7, #4]
 800378e:	681b      	ldr	r3, [r3, #0]
 8003790:	69db      	ldr	r3, [r3, #28]
 8003792:	f403 7340 	and.w	r3, r3, #768	@ 0x300
 8003796:	2b00      	cmp	r3, #0
 8003798:	d003      	beq.n	80037a2 <HAL_TIM_IRQHandler+0x136>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800379a:	6878      	ldr	r0, [r7, #4]
 800379c:	f000 f927 	bl	80039ee <HAL_TIM_IC_CaptureCallback>
 80037a0:	e005      	b.n	80037ae <HAL_TIM_IRQHandler+0x142>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80037a2:	6878      	ldr	r0, [r7, #4]
 80037a4:	f000 f919 	bl	80039da <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80037a8:	6878      	ldr	r0, [r7, #4]
 80037aa:	f000 f92a 	bl	8003a02 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80037ae:	687b      	ldr	r3, [r7, #4]
 80037b0:	2200      	movs	r2, #0
 80037b2:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if ((itflag & (TIM_FLAG_UPDATE)) == (TIM_FLAG_UPDATE))
 80037b4:	68bb      	ldr	r3, [r7, #8]
 80037b6:	f003 0301 	and.w	r3, r3, #1
 80037ba:	2b00      	cmp	r3, #0
 80037bc:	d00c      	beq.n	80037d8 <HAL_TIM_IRQHandler+0x16c>
  {
    if ((itsource & (TIM_IT_UPDATE)) == (TIM_IT_UPDATE))
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	f003 0301 	and.w	r3, r3, #1
 80037c4:	2b00      	cmp	r3, #0
 80037c6:	d007      	beq.n	80037d8 <HAL_TIM_IRQHandler+0x16c>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_UPDATE);
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f06f 0201 	mvn.w	r2, #1
 80037d0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f7fe f87a 	bl	80018cc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if ((itflag & (TIM_FLAG_BREAK)) == (TIM_FLAG_BREAK))
 80037d8:	68bb      	ldr	r3, [r7, #8]
 80037da:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037de:	2b00      	cmp	r3, #0
 80037e0:	d00c      	beq.n	80037fc <HAL_TIM_IRQHandler+0x190>
  {
    if ((itsource & (TIM_IT_BREAK)) == (TIM_IT_BREAK))
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d007      	beq.n	80037fc <HAL_TIM_IRQHandler+0x190>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_BREAK);
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f06f 0280 	mvn.w	r2, #128	@ 0x80
 80037f4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80037f6:	6878      	ldr	r0, [r7, #4]
 80037f8:	f000 fae4 	bl	8003dc4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if ((itflag & (TIM_FLAG_TRIGGER)) == (TIM_FLAG_TRIGGER))
 80037fc:	68bb      	ldr	r3, [r7, #8]
 80037fe:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003802:	2b00      	cmp	r3, #0
 8003804:	d00c      	beq.n	8003820 <HAL_TIM_IRQHandler+0x1b4>
  {
    if ((itsource & (TIM_IT_TRIGGER)) == (TIM_IT_TRIGGER))
 8003806:	68fb      	ldr	r3, [r7, #12]
 8003808:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800380c:	2b00      	cmp	r3, #0
 800380e:	d007      	beq.n	8003820 <HAL_TIM_IRQHandler+0x1b4>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_TRIGGER);
 8003810:	687b      	ldr	r3, [r7, #4]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f06f 0240 	mvn.w	r2, #64	@ 0x40
 8003818:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800381a:	6878      	ldr	r0, [r7, #4]
 800381c:	f000 f8fb 	bl	8003a16 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if ((itflag & (TIM_FLAG_COM)) == (TIM_FLAG_COM))
 8003820:	68bb      	ldr	r3, [r7, #8]
 8003822:	f003 0320 	and.w	r3, r3, #32
 8003826:	2b00      	cmp	r3, #0
 8003828:	d00c      	beq.n	8003844 <HAL_TIM_IRQHandler+0x1d8>
  {
    if ((itsource & (TIM_IT_COM)) == (TIM_IT_COM))
 800382a:	68fb      	ldr	r3, [r7, #12]
 800382c:	f003 0320 	and.w	r3, r3, #32
 8003830:	2b00      	cmp	r3, #0
 8003832:	d007      	beq.n	8003844 <HAL_TIM_IRQHandler+0x1d8>
    {
      __HAL_TIM_CLEAR_FLAG(htim, TIM_FLAG_COM);
 8003834:	687b      	ldr	r3, [r7, #4]
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f06f 0220 	mvn.w	r2, #32
 800383c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	f000 fab6 	bl	8003db0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003844:	bf00      	nop
 8003846:	3710      	adds	r7, #16
 8003848:	46bd      	mov	sp, r7
 800384a:	bd80      	pop	{r7, pc}

0800384c <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, const TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 800384c:	b580      	push	{r7, lr}
 800384e:	b084      	sub	sp, #16
 8003850:	af00      	add	r7, sp, #0
 8003852:	6078      	str	r0, [r7, #4]
 8003854:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003856:	2300      	movs	r3, #0
 8003858:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800385a:	687b      	ldr	r3, [r7, #4]
 800385c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003860:	2b01      	cmp	r3, #1
 8003862:	d101      	bne.n	8003868 <HAL_TIM_ConfigClockSource+0x1c>
 8003864:	2302      	movs	r3, #2
 8003866:	e0b4      	b.n	80039d2 <HAL_TIM_ConfigClockSource+0x186>
 8003868:	687b      	ldr	r3, [r7, #4]
 800386a:	2201      	movs	r2, #1
 800386c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003870:	687b      	ldr	r3, [r7, #4]
 8003872:	2202      	movs	r2, #2
 8003874:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	681b      	ldr	r3, [r3, #0]
 800387c:	689b      	ldr	r3, [r3, #8]
 800387e:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8003880:	68bb      	ldr	r3, [r7, #8]
 8003882:	f023 0377 	bic.w	r3, r3, #119	@ 0x77
 8003886:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003888:	68bb      	ldr	r3, [r7, #8]
 800388a:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 800388e:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8003890:	687b      	ldr	r3, [r7, #4]
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	68ba      	ldr	r2, [r7, #8]
 8003896:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8003898:	683b      	ldr	r3, [r7, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038a0:	d03e      	beq.n	8003920 <HAL_TIM_ConfigClockSource+0xd4>
 80038a2:	f5b3 5f00 	cmp.w	r3, #8192	@ 0x2000
 80038a6:	f200 8087 	bhi.w	80039b8 <HAL_TIM_ConfigClockSource+0x16c>
 80038aa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038ae:	f000 8086 	beq.w	80039be <HAL_TIM_ConfigClockSource+0x172>
 80038b2:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80038b6:	d87f      	bhi.n	80039b8 <HAL_TIM_ConfigClockSource+0x16c>
 80038b8:	2b70      	cmp	r3, #112	@ 0x70
 80038ba:	d01a      	beq.n	80038f2 <HAL_TIM_ConfigClockSource+0xa6>
 80038bc:	2b70      	cmp	r3, #112	@ 0x70
 80038be:	d87b      	bhi.n	80039b8 <HAL_TIM_ConfigClockSource+0x16c>
 80038c0:	2b60      	cmp	r3, #96	@ 0x60
 80038c2:	d050      	beq.n	8003966 <HAL_TIM_ConfigClockSource+0x11a>
 80038c4:	2b60      	cmp	r3, #96	@ 0x60
 80038c6:	d877      	bhi.n	80039b8 <HAL_TIM_ConfigClockSource+0x16c>
 80038c8:	2b50      	cmp	r3, #80	@ 0x50
 80038ca:	d03c      	beq.n	8003946 <HAL_TIM_ConfigClockSource+0xfa>
 80038cc:	2b50      	cmp	r3, #80	@ 0x50
 80038ce:	d873      	bhi.n	80039b8 <HAL_TIM_ConfigClockSource+0x16c>
 80038d0:	2b40      	cmp	r3, #64	@ 0x40
 80038d2:	d058      	beq.n	8003986 <HAL_TIM_ConfigClockSource+0x13a>
 80038d4:	2b40      	cmp	r3, #64	@ 0x40
 80038d6:	d86f      	bhi.n	80039b8 <HAL_TIM_ConfigClockSource+0x16c>
 80038d8:	2b30      	cmp	r3, #48	@ 0x30
 80038da:	d064      	beq.n	80039a6 <HAL_TIM_ConfigClockSource+0x15a>
 80038dc:	2b30      	cmp	r3, #48	@ 0x30
 80038de:	d86b      	bhi.n	80039b8 <HAL_TIM_ConfigClockSource+0x16c>
 80038e0:	2b20      	cmp	r3, #32
 80038e2:	d060      	beq.n	80039a6 <HAL_TIM_ConfigClockSource+0x15a>
 80038e4:	2b20      	cmp	r3, #32
 80038e6:	d867      	bhi.n	80039b8 <HAL_TIM_ConfigClockSource+0x16c>
 80038e8:	2b00      	cmp	r3, #0
 80038ea:	d05c      	beq.n	80039a6 <HAL_TIM_ConfigClockSource+0x15a>
 80038ec:	2b10      	cmp	r3, #16
 80038ee:	d05a      	beq.n	80039a6 <HAL_TIM_ConfigClockSource+0x15a>
 80038f0:	e062      	b.n	80039b8 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 80038f6:	683b      	ldr	r3, [r7, #0]
 80038f8:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 80038fa:	683b      	ldr	r3, [r7, #0]
 80038fc:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 80038fe:	683b      	ldr	r3, [r7, #0]
 8003900:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003902:	f000 f9b9 	bl	8003c78 <TIM_ETR_SetConfig>

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	681b      	ldr	r3, [r3, #0]
 800390a:	689b      	ldr	r3, [r3, #8]
 800390c:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800390e:	68bb      	ldr	r3, [r7, #8]
 8003910:	f043 0377 	orr.w	r3, r3, #119	@ 0x77
 8003914:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	681b      	ldr	r3, [r3, #0]
 800391a:	68ba      	ldr	r2, [r7, #8]
 800391c:	609a      	str	r2, [r3, #8]
      break;
 800391e:	e04f      	b.n	80039c0 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8003920:	687b      	ldr	r3, [r7, #4]
 8003922:	6818      	ldr	r0, [r3, #0]
                        sClockSourceConfig->ClockPrescaler,
 8003924:	683b      	ldr	r3, [r7, #0]
 8003926:	6899      	ldr	r1, [r3, #8]
                        sClockSourceConfig->ClockPolarity,
 8003928:	683b      	ldr	r3, [r7, #0]
 800392a:	685a      	ldr	r2, [r3, #4]
                        sClockSourceConfig->ClockFilter);
 800392c:	683b      	ldr	r3, [r7, #0]
 800392e:	68db      	ldr	r3, [r3, #12]
      TIM_ETR_SetConfig(htim->Instance,
 8003930:	f000 f9a2 	bl	8003c78 <TIM_ETR_SetConfig>
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8003934:	687b      	ldr	r3, [r7, #4]
 8003936:	681b      	ldr	r3, [r3, #0]
 8003938:	689a      	ldr	r2, [r3, #8]
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	f442 4280 	orr.w	r2, r2, #16384	@ 0x4000
 8003942:	609a      	str	r2, [r3, #8]
      break;
 8003944:	e03c      	b.n	80039c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800394a:	683b      	ldr	r3, [r7, #0]
 800394c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800394e:	683b      	ldr	r3, [r7, #0]
 8003950:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003952:	461a      	mov	r2, r3
 8003954:	f000 f916 	bl	8003b84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	681b      	ldr	r3, [r3, #0]
 800395c:	2150      	movs	r1, #80	@ 0x50
 800395e:	4618      	mov	r0, r3
 8003960:	f000 f96f 	bl	8003c42 <TIM_ITRx_SetConfig>
      break;
 8003964:	e02c      	b.n	80039c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8003966:	687b      	ldr	r3, [r7, #4]
 8003968:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800396a:	683b      	ldr	r3, [r7, #0]
 800396c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800396e:	683b      	ldr	r3, [r7, #0]
 8003970:	68db      	ldr	r3, [r3, #12]
      TIM_TI2_ConfigInputStage(htim->Instance,
 8003972:	461a      	mov	r2, r3
 8003974:	f000 f935 	bl	8003be2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	681b      	ldr	r3, [r3, #0]
 800397c:	2160      	movs	r1, #96	@ 0x60
 800397e:	4618      	mov	r0, r3
 8003980:	f000 f95f 	bl	8003c42 <TIM_ITRx_SetConfig>
      break;
 8003984:	e01c      	b.n	80039c0 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8003986:	687b      	ldr	r3, [r7, #4]
 8003988:	6818      	ldr	r0, [r3, #0]
                               sClockSourceConfig->ClockPolarity,
 800398a:	683b      	ldr	r3, [r7, #0]
 800398c:	6859      	ldr	r1, [r3, #4]
                               sClockSourceConfig->ClockFilter);
 800398e:	683b      	ldr	r3, [r7, #0]
 8003990:	68db      	ldr	r3, [r3, #12]
      TIM_TI1_ConfigInputStage(htim->Instance,
 8003992:	461a      	mov	r2, r3
 8003994:	f000 f8f6 	bl	8003b84 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8003998:	687b      	ldr	r3, [r7, #4]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	2140      	movs	r1, #64	@ 0x40
 800399e:	4618      	mov	r0, r3
 80039a0:	f000 f94f 	bl	8003c42 <TIM_ITRx_SetConfig>
      break;
 80039a4:	e00c      	b.n	80039c0 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80039a6:	687b      	ldr	r3, [r7, #4]
 80039a8:	681a      	ldr	r2, [r3, #0]
 80039aa:	683b      	ldr	r3, [r7, #0]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	4619      	mov	r1, r3
 80039b0:	4610      	mov	r0, r2
 80039b2:	f000 f946 	bl	8003c42 <TIM_ITRx_SetConfig>
      break;
 80039b6:	e003      	b.n	80039c0 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80039b8:	2301      	movs	r3, #1
 80039ba:	73fb      	strb	r3, [r7, #15]
      break;
 80039bc:	e000      	b.n	80039c0 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80039be:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80039c0:	687b      	ldr	r3, [r7, #4]
 80039c2:	2201      	movs	r2, #1
 80039c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 80039c8:	687b      	ldr	r3, [r7, #4]
 80039ca:	2200      	movs	r2, #0
 80039cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return status;
 80039d0:	7bfb      	ldrb	r3, [r7, #15]
}
 80039d2:	4618      	mov	r0, r3
 80039d4:	3710      	adds	r7, #16
 80039d6:	46bd      	mov	sp, r7
 80039d8:	bd80      	pop	{r7, pc}

080039da <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80039da:	b480      	push	{r7}
 80039dc:	b083      	sub	sp, #12
 80039de:	af00      	add	r7, sp, #0
 80039e0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80039e2:	bf00      	nop
 80039e4:	370c      	adds	r7, #12
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80039ee:	b480      	push	{r7}
 80039f0:	b083      	sub	sp, #12
 80039f2:	af00      	add	r7, sp, #0
 80039f4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80039f6:	bf00      	nop
 80039f8:	370c      	adds	r7, #12
 80039fa:	46bd      	mov	sp, r7
 80039fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a00:	4770      	bx	lr

08003a02 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8003a02:	b480      	push	{r7}
 8003a04:	b083      	sub	sp, #12
 8003a06:	af00      	add	r7, sp, #0
 8003a08:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8003a0a:	bf00      	nop
 8003a0c:	370c      	adds	r7, #12
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8003a16:	b480      	push	{r7}
 8003a18:	b083      	sub	sp, #12
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8003a1e:	bf00      	nop
 8003a20:	370c      	adds	r7, #12
 8003a22:	46bd      	mov	sp, r7
 8003a24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a28:	4770      	bx	lr
	...

08003a2c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8003a2c:	b480      	push	{r7}
 8003a2e:	b085      	sub	sp, #20
 8003a30:	af00      	add	r7, sp, #0
 8003a32:	6078      	str	r0, [r7, #4]
 8003a34:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	681b      	ldr	r3, [r3, #0]
 8003a3a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8003a3c:	687b      	ldr	r3, [r7, #4]
 8003a3e:	4a46      	ldr	r2, [pc, #280]	@ (8003b58 <TIM_Base_SetConfig+0x12c>)
 8003a40:	4293      	cmp	r3, r2
 8003a42:	d013      	beq.n	8003a6c <TIM_Base_SetConfig+0x40>
 8003a44:	687b      	ldr	r3, [r7, #4]
 8003a46:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a4a:	d00f      	beq.n	8003a6c <TIM_Base_SetConfig+0x40>
 8003a4c:	687b      	ldr	r3, [r7, #4]
 8003a4e:	4a43      	ldr	r2, [pc, #268]	@ (8003b5c <TIM_Base_SetConfig+0x130>)
 8003a50:	4293      	cmp	r3, r2
 8003a52:	d00b      	beq.n	8003a6c <TIM_Base_SetConfig+0x40>
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	4a42      	ldr	r2, [pc, #264]	@ (8003b60 <TIM_Base_SetConfig+0x134>)
 8003a58:	4293      	cmp	r3, r2
 8003a5a:	d007      	beq.n	8003a6c <TIM_Base_SetConfig+0x40>
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	4a41      	ldr	r2, [pc, #260]	@ (8003b64 <TIM_Base_SetConfig+0x138>)
 8003a60:	4293      	cmp	r3, r2
 8003a62:	d003      	beq.n	8003a6c <TIM_Base_SetConfig+0x40>
 8003a64:	687b      	ldr	r3, [r7, #4]
 8003a66:	4a40      	ldr	r2, [pc, #256]	@ (8003b68 <TIM_Base_SetConfig+0x13c>)
 8003a68:	4293      	cmp	r3, r2
 8003a6a:	d108      	bne.n	8003a7e <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003a72:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8003a74:	683b      	ldr	r3, [r7, #0]
 8003a76:	685b      	ldr	r3, [r3, #4]
 8003a78:	68fa      	ldr	r2, [r7, #12]
 8003a7a:	4313      	orrs	r3, r2
 8003a7c:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8003a7e:	687b      	ldr	r3, [r7, #4]
 8003a80:	4a35      	ldr	r2, [pc, #212]	@ (8003b58 <TIM_Base_SetConfig+0x12c>)
 8003a82:	4293      	cmp	r3, r2
 8003a84:	d02b      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003a8c:	d027      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003a8e:	687b      	ldr	r3, [r7, #4]
 8003a90:	4a32      	ldr	r2, [pc, #200]	@ (8003b5c <TIM_Base_SetConfig+0x130>)
 8003a92:	4293      	cmp	r3, r2
 8003a94:	d023      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003a96:	687b      	ldr	r3, [r7, #4]
 8003a98:	4a31      	ldr	r2, [pc, #196]	@ (8003b60 <TIM_Base_SetConfig+0x134>)
 8003a9a:	4293      	cmp	r3, r2
 8003a9c:	d01f      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	4a30      	ldr	r2, [pc, #192]	@ (8003b64 <TIM_Base_SetConfig+0x138>)
 8003aa2:	4293      	cmp	r3, r2
 8003aa4:	d01b      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003aa6:	687b      	ldr	r3, [r7, #4]
 8003aa8:	4a2f      	ldr	r2, [pc, #188]	@ (8003b68 <TIM_Base_SetConfig+0x13c>)
 8003aaa:	4293      	cmp	r3, r2
 8003aac:	d017      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003aae:	687b      	ldr	r3, [r7, #4]
 8003ab0:	4a2e      	ldr	r2, [pc, #184]	@ (8003b6c <TIM_Base_SetConfig+0x140>)
 8003ab2:	4293      	cmp	r3, r2
 8003ab4:	d013      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003ab6:	687b      	ldr	r3, [r7, #4]
 8003ab8:	4a2d      	ldr	r2, [pc, #180]	@ (8003b70 <TIM_Base_SetConfig+0x144>)
 8003aba:	4293      	cmp	r3, r2
 8003abc:	d00f      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003abe:	687b      	ldr	r3, [r7, #4]
 8003ac0:	4a2c      	ldr	r2, [pc, #176]	@ (8003b74 <TIM_Base_SetConfig+0x148>)
 8003ac2:	4293      	cmp	r3, r2
 8003ac4:	d00b      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	4a2b      	ldr	r2, [pc, #172]	@ (8003b78 <TIM_Base_SetConfig+0x14c>)
 8003aca:	4293      	cmp	r3, r2
 8003acc:	d007      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	4a2a      	ldr	r2, [pc, #168]	@ (8003b7c <TIM_Base_SetConfig+0x150>)
 8003ad2:	4293      	cmp	r3, r2
 8003ad4:	d003      	beq.n	8003ade <TIM_Base_SetConfig+0xb2>
 8003ad6:	687b      	ldr	r3, [r7, #4]
 8003ad8:	4a29      	ldr	r2, [pc, #164]	@ (8003b80 <TIM_Base_SetConfig+0x154>)
 8003ada:	4293      	cmp	r3, r2
 8003adc:	d108      	bne.n	8003af0 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	f423 7340 	bic.w	r3, r3, #768	@ 0x300
 8003ae4:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8003ae6:	683b      	ldr	r3, [r7, #0]
 8003ae8:	68db      	ldr	r3, [r3, #12]
 8003aea:	68fa      	ldr	r2, [r7, #12]
 8003aec:	4313      	orrs	r3, r2
 8003aee:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	f023 0280 	bic.w	r2, r3, #128	@ 0x80
 8003af6:	683b      	ldr	r3, [r7, #0]
 8003af8:	695b      	ldr	r3, [r3, #20]
 8003afa:	4313      	orrs	r3, r2
 8003afc:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	68fa      	ldr	r2, [r7, #12]
 8003b02:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8003b04:	683b      	ldr	r3, [r7, #0]
 8003b06:	689a      	ldr	r2, [r3, #8]
 8003b08:	687b      	ldr	r3, [r7, #4]
 8003b0a:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8003b0c:	683b      	ldr	r3, [r7, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	629a      	str	r2, [r3, #40]	@ 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	4a10      	ldr	r2, [pc, #64]	@ (8003b58 <TIM_Base_SetConfig+0x12c>)
 8003b18:	4293      	cmp	r3, r2
 8003b1a:	d003      	beq.n	8003b24 <TIM_Base_SetConfig+0xf8>
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	4a12      	ldr	r2, [pc, #72]	@ (8003b68 <TIM_Base_SetConfig+0x13c>)
 8003b20:	4293      	cmp	r3, r2
 8003b22:	d103      	bne.n	8003b2c <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8003b24:	683b      	ldr	r3, [r7, #0]
 8003b26:	691a      	ldr	r2, [r3, #16]
 8003b28:	687b      	ldr	r3, [r7, #4]
 8003b2a:	631a      	str	r2, [r3, #48]	@ 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	615a      	str	r2, [r3, #20]

  /* Check if the update flag is set after the Update Generation, if so clear the UIF flag */
  if (HAL_IS_BIT_SET(TIMx->SR, TIM_FLAG_UPDATE))
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	691b      	ldr	r3, [r3, #16]
 8003b36:	f003 0301 	and.w	r3, r3, #1
 8003b3a:	2b01      	cmp	r3, #1
 8003b3c:	d105      	bne.n	8003b4a <TIM_Base_SetConfig+0x11e>
  {
    /* Clear the update flag */
    CLEAR_BIT(TIMx->SR, TIM_FLAG_UPDATE);
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	691b      	ldr	r3, [r3, #16]
 8003b42:	f023 0201 	bic.w	r2, r3, #1
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	611a      	str	r2, [r3, #16]
  }
}
 8003b4a:	bf00      	nop
 8003b4c:	3714      	adds	r7, #20
 8003b4e:	46bd      	mov	sp, r7
 8003b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b54:	4770      	bx	lr
 8003b56:	bf00      	nop
 8003b58:	40010000 	.word	0x40010000
 8003b5c:	40000400 	.word	0x40000400
 8003b60:	40000800 	.word	0x40000800
 8003b64:	40000c00 	.word	0x40000c00
 8003b68:	40010400 	.word	0x40010400
 8003b6c:	40014000 	.word	0x40014000
 8003b70:	40014400 	.word	0x40014400
 8003b74:	40014800 	.word	0x40014800
 8003b78:	40001800 	.word	0x40001800
 8003b7c:	40001c00 	.word	0x40001c00
 8003b80:	40002000 	.word	0x40002000

08003b84 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003b84:	b480      	push	{r7}
 8003b86:	b087      	sub	sp, #28
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	60f8      	str	r0, [r7, #12]
 8003b8c:	60b9      	str	r1, [r7, #8]
 8003b8e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	6a1b      	ldr	r3, [r3, #32]
 8003b94:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	6a1b      	ldr	r3, [r3, #32]
 8003b9a:	f023 0201 	bic.w	r2, r3, #1
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	699b      	ldr	r3, [r3, #24]
 8003ba6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8003ba8:	693b      	ldr	r3, [r7, #16]
 8003baa:	f023 03f0 	bic.w	r3, r3, #240	@ 0xf0
 8003bae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8003bb0:	687b      	ldr	r3, [r7, #4]
 8003bb2:	011b      	lsls	r3, r3, #4
 8003bb4:	693a      	ldr	r2, [r7, #16]
 8003bb6:	4313      	orrs	r3, r2
 8003bb8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8003bba:	697b      	ldr	r3, [r7, #20]
 8003bbc:	f023 030a 	bic.w	r3, r3, #10
 8003bc0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8003bc2:	697a      	ldr	r2, [r7, #20]
 8003bc4:	68bb      	ldr	r3, [r7, #8]
 8003bc6:	4313      	orrs	r3, r2
 8003bc8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	693a      	ldr	r2, [r7, #16]
 8003bce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	697a      	ldr	r2, [r7, #20]
 8003bd4:	621a      	str	r2, [r3, #32]
}
 8003bd6:	bf00      	nop
 8003bd8:	371c      	adds	r7, #28
 8003bda:	46bd      	mov	sp, r7
 8003bdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be0:	4770      	bx	lr

08003be2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8003be2:	b480      	push	{r7}
 8003be4:	b087      	sub	sp, #28
 8003be6:	af00      	add	r7, sp, #0
 8003be8:	60f8      	str	r0, [r7, #12]
 8003bea:	60b9      	str	r1, [r7, #8]
 8003bec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  tmpccer = TIMx->CCER;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	6a1b      	ldr	r3, [r3, #32]
 8003bf2:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	6a1b      	ldr	r3, [r3, #32]
 8003bf8:	f023 0210 	bic.w	r2, r3, #16
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8003c00:	68fb      	ldr	r3, [r7, #12]
 8003c02:	699b      	ldr	r3, [r3, #24]
 8003c04:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8003c06:	693b      	ldr	r3, [r7, #16]
 8003c08:	f423 4370 	bic.w	r3, r3, #61440	@ 0xf000
 8003c0c:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	031b      	lsls	r3, r3, #12
 8003c12:	693a      	ldr	r2, [r7, #16]
 8003c14:	4313      	orrs	r3, r2
 8003c16:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8003c18:	697b      	ldr	r3, [r7, #20]
 8003c1a:	f023 03a0 	bic.w	r3, r3, #160	@ 0xa0
 8003c1e:	617b      	str	r3, [r7, #20]
  tmpccer |= (TIM_ICPolarity << 4U);
 8003c20:	68bb      	ldr	r3, [r7, #8]
 8003c22:	011b      	lsls	r3, r3, #4
 8003c24:	697a      	ldr	r2, [r7, #20]
 8003c26:	4313      	orrs	r3, r2
 8003c28:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	693a      	ldr	r2, [r7, #16]
 8003c2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8003c30:	68fb      	ldr	r3, [r7, #12]
 8003c32:	697a      	ldr	r2, [r7, #20]
 8003c34:	621a      	str	r2, [r3, #32]
}
 8003c36:	bf00      	nop
 8003c38:	371c      	adds	r7, #28
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c40:	4770      	bx	lr

08003c42 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8003c42:	b480      	push	{r7}
 8003c44:	b085      	sub	sp, #20
 8003c46:	af00      	add	r7, sp, #0
 8003c48:	6078      	str	r0, [r7, #4]
 8003c4a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8003c4c:	687b      	ldr	r3, [r7, #4]
 8003c4e:	689b      	ldr	r3, [r3, #8]
 8003c50:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8003c52:	68fb      	ldr	r3, [r7, #12]
 8003c54:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003c58:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8003c5a:	683a      	ldr	r2, [r7, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	4313      	orrs	r3, r2
 8003c60:	f043 0307 	orr.w	r3, r3, #7
 8003c64:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	68fa      	ldr	r2, [r7, #12]
 8003c6a:	609a      	str	r2, [r3, #8]
}
 8003c6c:	bf00      	nop
 8003c6e:	3714      	adds	r7, #20
 8003c70:	46bd      	mov	sp, r7
 8003c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c76:	4770      	bx	lr

08003c78 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8003c78:	b480      	push	{r7}
 8003c7a:	b087      	sub	sp, #28
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	60f8      	str	r0, [r7, #12]
 8003c80:	60b9      	str	r1, [r7, #8]
 8003c82:	607a      	str	r2, [r7, #4]
 8003c84:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8003c86:	68fb      	ldr	r3, [r7, #12]
 8003c88:	689b      	ldr	r3, [r3, #8]
 8003c8a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8003c8c:	697b      	ldr	r3, [r7, #20]
 8003c8e:	f423 437f 	bic.w	r3, r3, #65280	@ 0xff00
 8003c92:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8003c94:	683b      	ldr	r3, [r7, #0]
 8003c96:	021a      	lsls	r2, r3, #8
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	431a      	orrs	r2, r3
 8003c9c:	68bb      	ldr	r3, [r7, #8]
 8003c9e:	4313      	orrs	r3, r2
 8003ca0:	697a      	ldr	r2, [r7, #20]
 8003ca2:	4313      	orrs	r3, r2
 8003ca4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	697a      	ldr	r2, [r7, #20]
 8003caa:	609a      	str	r2, [r3, #8]
}
 8003cac:	bf00      	nop
 8003cae:	371c      	adds	r7, #28
 8003cb0:	46bd      	mov	sp, r7
 8003cb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cb6:	4770      	bx	lr

08003cb8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 8003cb8:	b480      	push	{r7}
 8003cba:	b085      	sub	sp, #20
 8003cbc:	af00      	add	r7, sp, #0
 8003cbe:	6078      	str	r0, [r7, #4]
 8003cc0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cc8:	2b01      	cmp	r3, #1
 8003cca:	d101      	bne.n	8003cd0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8003ccc:	2302      	movs	r3, #2
 8003cce:	e05a      	b.n	8003d86 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8003cd0:	687b      	ldr	r3, [r7, #4]
 8003cd2:	2201      	movs	r2, #1
 8003cd4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003cd8:	687b      	ldr	r3, [r7, #4]
 8003cda:	2202      	movs	r2, #2
 8003cdc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8003ce0:	687b      	ldr	r3, [r7, #4]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	685b      	ldr	r3, [r3, #4]
 8003ce6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	689b      	ldr	r3, [r3, #8]
 8003cee:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	f023 0370 	bic.w	r3, r3, #112	@ 0x70
 8003cf6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8003cf8:	683b      	ldr	r3, [r7, #0]
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	68fa      	ldr	r2, [r7, #12]
 8003cfe:	4313      	orrs	r3, r2
 8003d00:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	681b      	ldr	r3, [r3, #0]
 8003d06:	68fa      	ldr	r2, [r7, #12]
 8003d08:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	681b      	ldr	r3, [r3, #0]
 8003d0e:	4a21      	ldr	r2, [pc, #132]	@ (8003d94 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8003d10:	4293      	cmp	r3, r2
 8003d12:	d022      	beq.n	8003d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d14:	687b      	ldr	r3, [r7, #4]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8003d1c:	d01d      	beq.n	8003d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	4a1d      	ldr	r2, [pc, #116]	@ (8003d98 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8003d24:	4293      	cmp	r3, r2
 8003d26:	d018      	beq.n	8003d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	4a1b      	ldr	r2, [pc, #108]	@ (8003d9c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8003d2e:	4293      	cmp	r3, r2
 8003d30:	d013      	beq.n	8003d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	681b      	ldr	r3, [r3, #0]
 8003d36:	4a1a      	ldr	r2, [pc, #104]	@ (8003da0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8003d38:	4293      	cmp	r3, r2
 8003d3a:	d00e      	beq.n	8003d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4a18      	ldr	r2, [pc, #96]	@ (8003da4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8003d42:	4293      	cmp	r3, r2
 8003d44:	d009      	beq.n	8003d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	681b      	ldr	r3, [r3, #0]
 8003d4a:	4a17      	ldr	r2, [pc, #92]	@ (8003da8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8003d4c:	4293      	cmp	r3, r2
 8003d4e:	d004      	beq.n	8003d5a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8003d50:	687b      	ldr	r3, [r7, #4]
 8003d52:	681b      	ldr	r3, [r3, #0]
 8003d54:	4a15      	ldr	r2, [pc, #84]	@ (8003dac <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8003d56:	4293      	cmp	r3, r2
 8003d58:	d10c      	bne.n	8003d74 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8003d5a:	68bb      	ldr	r3, [r7, #8]
 8003d5c:	f023 0380 	bic.w	r3, r3, #128	@ 0x80
 8003d60:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8003d62:	683b      	ldr	r3, [r7, #0]
 8003d64:	685b      	ldr	r3, [r3, #4]
 8003d66:	68ba      	ldr	r2, [r7, #8]
 8003d68:	4313      	orrs	r3, r2
 8003d6a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	681b      	ldr	r3, [r3, #0]
 8003d70:	68ba      	ldr	r2, [r7, #8]
 8003d72:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  __HAL_UNLOCK(htim);
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2200      	movs	r2, #0
 8003d80:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

  return HAL_OK;
 8003d84:	2300      	movs	r3, #0
}
 8003d86:	4618      	mov	r0, r3
 8003d88:	3714      	adds	r7, #20
 8003d8a:	46bd      	mov	sp, r7
 8003d8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d90:	4770      	bx	lr
 8003d92:	bf00      	nop
 8003d94:	40010000 	.word	0x40010000
 8003d98:	40000400 	.word	0x40000400
 8003d9c:	40000800 	.word	0x40000800
 8003da0:	40000c00 	.word	0x40000c00
 8003da4:	40010400 	.word	0x40010400
 8003da8:	40014000 	.word	0x40014000
 8003dac:	40001800 	.word	0x40001800

08003db0 <HAL_TIMEx_CommutCallback>:
  * @brief  Commutation callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8003db0:	b480      	push	{r7}
 8003db2:	b083      	sub	sp, #12
 8003db4:	af00      	add	r7, sp, #0
 8003db6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8003db8:	bf00      	nop
 8003dba:	370c      	adds	r7, #12
 8003dbc:	46bd      	mov	sp, r7
 8003dbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dc2:	4770      	bx	lr

08003dc4 <HAL_TIMEx_BreakCallback>:
  * @brief  Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8003dc4:	b480      	push	{r7}
 8003dc6:	b083      	sub	sp, #12
 8003dc8:	af00      	add	r7, sp, #0
 8003dca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8003dcc:	bf00      	nop
 8003dce:	370c      	adds	r7, #12
 8003dd0:	46bd      	mov	sp, r7
 8003dd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dd6:	4770      	bx	lr

08003dd8 <FSMC_NORSRAM_Init>:
  * @param  Init Pointer to NORSRAM Initialization structure
  * @retval HAL status
  */
HAL_StatusTypeDef  FSMC_NORSRAM_Init(FSMC_NORSRAM_TypeDef *Device,
                                    FSMC_NORSRAM_InitTypeDef *Init)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	b087      	sub	sp, #28
 8003ddc:	af00      	add	r7, sp, #0
 8003dde:	6078      	str	r0, [r7, #4]
 8003de0:	6039      	str	r1, [r7, #0]
  assert_param(IS_FSMC_WRITE_FIFO(Init->WriteFifo));
#endif /* FSMC_BCR1_WFDIS */
  assert_param(IS_FSMC_PAGESIZE(Init->PageSize));

  /* Disable NORSRAM Device */
  __FSMC_NORSRAM_DISABLE(Device, Init->NSBank);
 8003de2:	683b      	ldr	r3, [r7, #0]
 8003de4:	681a      	ldr	r2, [r3, #0]
 8003de6:	687b      	ldr	r3, [r7, #4]
 8003de8:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003dec:	683a      	ldr	r2, [r7, #0]
 8003dee:	6812      	ldr	r2, [r2, #0]
 8003df0:	f023 0101 	bic.w	r1, r3, #1
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

  /* Set NORSRAM device control parameters */
  if (Init->MemoryType == FSMC_MEMORY_TYPE_NOR)
 8003dfa:	683b      	ldr	r3, [r7, #0]
 8003dfc:	689b      	ldr	r3, [r3, #8]
 8003dfe:	2b08      	cmp	r3, #8
 8003e00:	d102      	bne.n	8003e08 <FSMC_NORSRAM_Init+0x30>
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_ENABLE;
 8003e02:	2340      	movs	r3, #64	@ 0x40
 8003e04:	617b      	str	r3, [r7, #20]
 8003e06:	e001      	b.n	8003e0c <FSMC_NORSRAM_Init+0x34>
  }
  else
  {
    flashaccess = FSMC_NORSRAM_FLASH_ACCESS_DISABLE;
 8003e08:	2300      	movs	r3, #0
 8003e0a:	617b      	str	r3, [r7, #20]
  }

  btcr_reg = (flashaccess                   | \
              Init->DataAddressMux          | \
 8003e0c:	683b      	ldr	r3, [r7, #0]
 8003e0e:	685a      	ldr	r2, [r3, #4]
  btcr_reg = (flashaccess                   | \
 8003e10:	697b      	ldr	r3, [r7, #20]
 8003e12:	431a      	orrs	r2, r3
              Init->MemoryType              | \
 8003e14:	683b      	ldr	r3, [r7, #0]
 8003e16:	689b      	ldr	r3, [r3, #8]
              Init->DataAddressMux          | \
 8003e18:	431a      	orrs	r2, r3
              Init->MemoryDataWidth         | \
 8003e1a:	683b      	ldr	r3, [r7, #0]
 8003e1c:	68db      	ldr	r3, [r3, #12]
              Init->MemoryType              | \
 8003e1e:	431a      	orrs	r2, r3
              Init->BurstAccessMode         | \
 8003e20:	683b      	ldr	r3, [r7, #0]
 8003e22:	691b      	ldr	r3, [r3, #16]
              Init->MemoryDataWidth         | \
 8003e24:	431a      	orrs	r2, r3
              Init->WaitSignalPolarity      | \
 8003e26:	683b      	ldr	r3, [r7, #0]
 8003e28:	695b      	ldr	r3, [r3, #20]
              Init->BurstAccessMode         | \
 8003e2a:	431a      	orrs	r2, r3
              Init->WaitSignalActive        | \
 8003e2c:	683b      	ldr	r3, [r7, #0]
 8003e2e:	69db      	ldr	r3, [r3, #28]
              Init->WaitSignalPolarity      | \
 8003e30:	431a      	orrs	r2, r3
              Init->WriteOperation          | \
 8003e32:	683b      	ldr	r3, [r7, #0]
 8003e34:	6a1b      	ldr	r3, [r3, #32]
              Init->WaitSignalActive        | \
 8003e36:	431a      	orrs	r2, r3
              Init->WaitSignal              | \
 8003e38:	683b      	ldr	r3, [r7, #0]
 8003e3a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
              Init->WriteOperation          | \
 8003e3c:	431a      	orrs	r2, r3
              Init->ExtendedMode            | \
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
              Init->WaitSignal              | \
 8003e42:	431a      	orrs	r2, r3
              Init->AsynchronousWait        | \
 8003e44:	683b      	ldr	r3, [r7, #0]
 8003e46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
              Init->ExtendedMode            | \
 8003e48:	431a      	orrs	r2, r3
              Init->WriteBurst);
 8003e4a:	683b      	ldr	r3, [r7, #0]
 8003e4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
  btcr_reg = (flashaccess                   | \
 8003e4e:	4313      	orrs	r3, r2
 8003e50:	613b      	str	r3, [r7, #16]

#if defined(FSMC_BCR1_WRAPMOD)
  btcr_reg |= Init->WrapMode;
 8003e52:	683b      	ldr	r3, [r7, #0]
 8003e54:	699b      	ldr	r3, [r3, #24]
 8003e56:	693a      	ldr	r2, [r7, #16]
 8003e58:	4313      	orrs	r3, r2
 8003e5a:	613b      	str	r3, [r7, #16]
  btcr_reg |= Init->ContinuousClock;
#endif /* FSMC_BCR1_CCLKEN */
#if defined(FSMC_BCR1_WFDIS)
  btcr_reg |= Init->WriteFifo;
#endif /* FSMC_BCR1_WFDIS */
  btcr_reg |= Init->PageSize;
 8003e5c:	683b      	ldr	r3, [r7, #0]
 8003e5e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8003e60:	693a      	ldr	r2, [r7, #16]
 8003e62:	4313      	orrs	r3, r2
 8003e64:	613b      	str	r3, [r7, #16]

  mask = (FSMC_BCR1_MBKEN                |
 8003e66:	4b10      	ldr	r3, [pc, #64]	@ (8003ea8 <FSMC_NORSRAM_Init+0xd0>)
 8003e68:	60fb      	str	r3, [r7, #12]
          FSMC_BCR1_EXTMOD               |
          FSMC_BCR1_ASYNCWAIT            |
          FSMC_BCR1_CBURSTRW);

#if defined(FSMC_BCR1_WRAPMOD)
  mask |= FSMC_BCR1_WRAPMOD;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003e70:	60fb      	str	r3, [r7, #12]
  mask |= FSMC_BCR1_CCLKEN;
#endif
#if defined(FSMC_BCR1_WFDIS)
  mask |= FSMC_BCR1_WFDIS;
#endif /* FSMC_BCR1_WFDIS */
  mask |= FSMC_BCR1_CPSIZE;
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	f443 23e0 	orr.w	r3, r3, #458752	@ 0x70000
 8003e78:	60fb      	str	r3, [r7, #12]

  MODIFY_REG(Device->BTCR[Init->NSBank], mask, btcr_reg);
 8003e7a:	683b      	ldr	r3, [r7, #0]
 8003e7c:	681a      	ldr	r2, [r3, #0]
 8003e7e:	687b      	ldr	r3, [r7, #4]
 8003e80:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	43db      	mvns	r3, r3
 8003e88:	ea02 0103 	and.w	r1, r2, r3
 8003e8c:	683b      	ldr	r3, [r7, #0]
 8003e8e:	681a      	ldr	r2, [r3, #0]
 8003e90:	693b      	ldr	r3, [r7, #16]
 8003e92:	4319      	orrs	r1, r3
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    /* Configure Write FIFO mode when Write Fifo is enabled for bank2..4 */
    SET_BIT(Device->BTCR[FSMC_NORSRAM_BANK1], (uint32_t)(Init->WriteFifo));
  }
#endif /* FSMC_BCR1_WFDIS */

  return HAL_OK;
 8003e9a:	2300      	movs	r3, #0
}
 8003e9c:	4618      	mov	r0, r3
 8003e9e:	371c      	adds	r7, #28
 8003ea0:	46bd      	mov	sp, r7
 8003ea2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ea6:	4770      	bx	lr
 8003ea8:	0008fb7f 	.word	0x0008fb7f

08003eac <FSMC_NORSRAM_Timing_Init>:
  * @param  Bank NORSRAM bank number
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Timing_Init(FSMC_NORSRAM_TypeDef *Device,
                                          FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank)
{
 8003eac:	b480      	push	{r7}
 8003eae:	b085      	sub	sp, #20
 8003eb0:	af00      	add	r7, sp, #0
 8003eb2:	60f8      	str	r0, [r7, #12]
 8003eb4:	60b9      	str	r1, [r7, #8]
 8003eb6:	607a      	str	r2, [r7, #4]
  assert_param(IS_FSMC_DATA_LATENCY(Timing->DataLatency));
  assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
  assert_param(IS_FSMC_NORSRAM_BANK(Bank));

  /* Set FSMC_NORSRAM device timing parameters */
  MODIFY_REG(Device->BTCR[Bank + 1U], BTR_CLEAR_MASK, (Timing->AddressSetupTime                                  |
 8003eb8:	687b      	ldr	r3, [r7, #4]
 8003eba:	1c5a      	adds	r2, r3, #1
 8003ebc:	68fb      	ldr	r3, [r7, #12]
 8003ebe:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003ec2:	f003 4140 	and.w	r1, r3, #3221225472	@ 0xc0000000
 8003ec6:	68bb      	ldr	r3, [r7, #8]
 8003ec8:	681a      	ldr	r2, [r3, #0]
 8003eca:	68bb      	ldr	r3, [r7, #8]
 8003ecc:	685b      	ldr	r3, [r3, #4]
 8003ece:	011b      	lsls	r3, r3, #4
 8003ed0:	431a      	orrs	r2, r3
 8003ed2:	68bb      	ldr	r3, [r7, #8]
 8003ed4:	689b      	ldr	r3, [r3, #8]
 8003ed6:	021b      	lsls	r3, r3, #8
 8003ed8:	431a      	orrs	r2, r3
 8003eda:	68bb      	ldr	r3, [r7, #8]
 8003edc:	68db      	ldr	r3, [r3, #12]
 8003ede:	041b      	lsls	r3, r3, #16
 8003ee0:	431a      	orrs	r2, r3
 8003ee2:	68bb      	ldr	r3, [r7, #8]
 8003ee4:	691b      	ldr	r3, [r3, #16]
 8003ee6:	3b01      	subs	r3, #1
 8003ee8:	051b      	lsls	r3, r3, #20
 8003eea:	431a      	orrs	r2, r3
 8003eec:	68bb      	ldr	r3, [r7, #8]
 8003eee:	695b      	ldr	r3, [r3, #20]
 8003ef0:	3b02      	subs	r3, #2
 8003ef2:	061b      	lsls	r3, r3, #24
 8003ef4:	431a      	orrs	r2, r3
 8003ef6:	68bb      	ldr	r3, [r7, #8]
 8003ef8:	699b      	ldr	r3, [r3, #24]
 8003efa:	4313      	orrs	r3, r2
 8003efc:	687a      	ldr	r2, [r7, #4]
 8003efe:	3201      	adds	r2, #1
 8003f00:	4319      	orrs	r1, r3
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
    tmpr |= (uint32_t)(((Timing->CLKDivision) - 1U) << FSMC_BTR1_CLKDIV_Pos);
    MODIFY_REG(Device->BTCR[FSMC_NORSRAM_BANK1 + 1U], FSMC_BTR1_CLKDIV, tmpr);
  }

#endif
  return HAL_OK;
 8003f08:	2300      	movs	r3, #0
}
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	3714      	adds	r7, #20
 8003f0e:	46bd      	mov	sp, r7
 8003f10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f14:	4770      	bx	lr
	...

08003f18 <FSMC_NORSRAM_Extended_Timing_Init>:
  * @retval HAL status
  */
HAL_StatusTypeDef FSMC_NORSRAM_Extended_Timing_Init(FSMC_NORSRAM_EXTENDED_TypeDef *Device,
                                                   FSMC_NORSRAM_TimingTypeDef *Timing, uint32_t Bank,
                                                   uint32_t ExtendedMode)
{
 8003f18:	b480      	push	{r7}
 8003f1a:	b085      	sub	sp, #20
 8003f1c:	af00      	add	r7, sp, #0
 8003f1e:	60f8      	str	r0, [r7, #12]
 8003f20:	60b9      	str	r1, [r7, #8]
 8003f22:	607a      	str	r2, [r7, #4]
 8003f24:	603b      	str	r3, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FSMC_EXTENDED_MODE(ExtendedMode));

  /* Set NORSRAM device timing register for write configuration, if extended mode is used */
  if (ExtendedMode == FSMC_EXTENDED_MODE_ENABLE)
 8003f26:	683b      	ldr	r3, [r7, #0]
 8003f28:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f2c:	d11d      	bne.n	8003f6a <FSMC_NORSRAM_Extended_Timing_Init+0x52>
    assert_param(IS_FSMC_TURNAROUND_TIME(Timing->BusTurnAroundDuration));
    assert_param(IS_FSMC_ACCESS_MODE(Timing->AccessMode));
    assert_param(IS_FSMC_NORSRAM_BANK(Bank));

    /* Set NORSRAM device timing register for write configuration, if extended mode is used */
    MODIFY_REG(Device->BWTR[Bank], BWTR_CLEAR_MASK, (Timing->AddressSetupTime                                    |
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	687a      	ldr	r2, [r7, #4]
 8003f32:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
 8003f36:	4b13      	ldr	r3, [pc, #76]	@ (8003f84 <FSMC_NORSRAM_Extended_Timing_Init+0x6c>)
 8003f38:	4013      	ands	r3, r2
 8003f3a:	68ba      	ldr	r2, [r7, #8]
 8003f3c:	6811      	ldr	r1, [r2, #0]
 8003f3e:	68ba      	ldr	r2, [r7, #8]
 8003f40:	6852      	ldr	r2, [r2, #4]
 8003f42:	0112      	lsls	r2, r2, #4
 8003f44:	4311      	orrs	r1, r2
 8003f46:	68ba      	ldr	r2, [r7, #8]
 8003f48:	6892      	ldr	r2, [r2, #8]
 8003f4a:	0212      	lsls	r2, r2, #8
 8003f4c:	4311      	orrs	r1, r2
 8003f4e:	68ba      	ldr	r2, [r7, #8]
 8003f50:	6992      	ldr	r2, [r2, #24]
 8003f52:	4311      	orrs	r1, r2
 8003f54:	68ba      	ldr	r2, [r7, #8]
 8003f56:	68d2      	ldr	r2, [r2, #12]
 8003f58:	0412      	lsls	r2, r2, #16
 8003f5a:	430a      	orrs	r2, r1
 8003f5c:	ea43 0102 	orr.w	r1, r3, r2
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	687a      	ldr	r2, [r7, #4]
 8003f64:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
 8003f68:	e005      	b.n	8003f76 <FSMC_NORSRAM_Extended_Timing_Init+0x5e>
                                                     Timing->AccessMode                                          |
                                                     ((Timing->BusTurnAroundDuration)  << FSMC_BWTR1_BUSTURN_Pos)));
  }
  else
  {
    Device->BWTR[Bank] = 0x0FFFFFFFU;
 8003f6a:	68fb      	ldr	r3, [r7, #12]
 8003f6c:	687a      	ldr	r2, [r7, #4]
 8003f6e:	f06f 4170 	mvn.w	r1, #4026531840	@ 0xf0000000
 8003f72:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
  }

  return HAL_OK;
 8003f76:	2300      	movs	r3, #0
}
 8003f78:	4618      	mov	r0, r3
 8003f7a:	3714      	adds	r7, #20
 8003f7c:	46bd      	mov	sp, r7
 8003f7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f82:	4770      	bx	lr
 8003f84:	cff00000 	.word	0xcff00000

08003f88 <memset>:
 8003f88:	4402      	add	r2, r0
 8003f8a:	4603      	mov	r3, r0
 8003f8c:	4293      	cmp	r3, r2
 8003f8e:	d100      	bne.n	8003f92 <memset+0xa>
 8003f90:	4770      	bx	lr
 8003f92:	f803 1b01 	strb.w	r1, [r3], #1
 8003f96:	e7f9      	b.n	8003f8c <memset+0x4>

08003f98 <__libc_init_array>:
 8003f98:	b570      	push	{r4, r5, r6, lr}
 8003f9a:	4d0d      	ldr	r5, [pc, #52]	@ (8003fd0 <__libc_init_array+0x38>)
 8003f9c:	4c0d      	ldr	r4, [pc, #52]	@ (8003fd4 <__libc_init_array+0x3c>)
 8003f9e:	1b64      	subs	r4, r4, r5
 8003fa0:	10a4      	asrs	r4, r4, #2
 8003fa2:	2600      	movs	r6, #0
 8003fa4:	42a6      	cmp	r6, r4
 8003fa6:	d109      	bne.n	8003fbc <__libc_init_array+0x24>
 8003fa8:	4d0b      	ldr	r5, [pc, #44]	@ (8003fd8 <__libc_init_array+0x40>)
 8003faa:	4c0c      	ldr	r4, [pc, #48]	@ (8003fdc <__libc_init_array+0x44>)
 8003fac:	f000 f818 	bl	8003fe0 <_init>
 8003fb0:	1b64      	subs	r4, r4, r5
 8003fb2:	10a4      	asrs	r4, r4, #2
 8003fb4:	2600      	movs	r6, #0
 8003fb6:	42a6      	cmp	r6, r4
 8003fb8:	d105      	bne.n	8003fc6 <__libc_init_array+0x2e>
 8003fba:	bd70      	pop	{r4, r5, r6, pc}
 8003fbc:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fc0:	4798      	blx	r3
 8003fc2:	3601      	adds	r6, #1
 8003fc4:	e7ee      	b.n	8003fa4 <__libc_init_array+0xc>
 8003fc6:	f855 3b04 	ldr.w	r3, [r5], #4
 8003fca:	4798      	blx	r3
 8003fcc:	3601      	adds	r6, #1
 8003fce:	e7f2      	b.n	8003fb6 <__libc_init_array+0x1e>
 8003fd0:	0800aef8 	.word	0x0800aef8
 8003fd4:	0800aef8 	.word	0x0800aef8
 8003fd8:	0800aef8 	.word	0x0800aef8
 8003fdc:	0800aefc 	.word	0x0800aefc

08003fe0 <_init>:
 8003fe0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fe2:	bf00      	nop
 8003fe4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003fe6:	bc08      	pop	{r3}
 8003fe8:	469e      	mov	lr, r3
 8003fea:	4770      	bx	lr

08003fec <_fini>:
 8003fec:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003fee:	bf00      	nop
 8003ff0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ff2:	bc08      	pop	{r3}
 8003ff4:	469e      	mov	lr, r3
 8003ff6:	4770      	bx	lr
